{"version":3,"file":"SessionTimer-C_wkNlb8.js","sources":["../../src/composables/useInactivityTimeout/useInactivityTimeout.js","../../src/containers/SessionTimer/SessionTimer.vue"],"sourcesContent":["import { ref, watch, onMounted, onUnmounted } from 'vue';\nimport { useIdle, useTimestamp } from '@vueuse/core';\nimport { useThrottleFn } from '@vueuse/core';\n\n/**\n * Inactivity timeout composable.\n *\n * @param {Object} options – The options object.\n * @param {Number} options.idleThreshold – The idle threshold in milliseconds.\n * @param {Number} options.countdownDuration – The countdown duration in milliseconds.\n * @param {Function} options.onIdle – The idle callback function.\n * @param {Function} options.onTimeout – The timeout callback function.\n * @returns {Object} Object containing the countdown timer and reset function.\n */\nexport default function useInactivityTimeout({ idleThreshold, countdownDuration, onIdle, onTimeout }) {\n  const timeoutThreshold = Math.max(0, Math.floor(Number(idleThreshold) + Number(countdownDuration)));\n\n  const isTabActive = ref(true);\n  const lastActiveInternal = ref(null);\n\n  const countdownTimer = ref(Math.floor(countdownDuration / 1000));\n  const isCountdownTimerActive = ref(false);\n\n  const { idle, lastActive } = useIdle(idleThreshold, {\n    listenForVisibilityChange: false,\n  });\n  const now = useTimestamp({ interval: 1000 });\n\n  let countdownIntervalTimer = null;\n\n  /**\n   * Timeout handler.\n   *\n   * @returns {Promise<void>}\n   */\n  const timeout = async () => {\n    await onTimeout();\n    resetTimer();\n  };\n\n  /**\n   * Handle the document visibility change event.\n   *\n   * When users switch tabs or minimize the window, the document visibility change event is triggered. We use this event\n   * as browsers tend to both throttle and/or pause JavaScript execution when the tab is not in focus. This event allows\n   * us to store the last active timestamp and the current timestamp in sessionStroage, in order to determine the true\n   * idle time when the user returns to the tab.\n   *\n   * Whilst the useIdle composable technically handles this, it does not work as expected as when the user returns to\n   * the tab, the idle timer is immediately reset, making it impossible to determine the true idle time. That's why we\n   * initialise useIdle with the option listenForVisibilityChange set to false and handle the visibility change event\n   * manually in this function.\n   *\n   * @returns {void}\n   */\n  const handleVisibilityChange = () => {\n    if (document.hidden) {\n      isTabActive.value = false;\n\n      // When the user leaves the tab, reset the countdown timer to prevent it from unessarily continuing in the\n      // background, likely with a throttled timer imposed by the browser.\n      resetCountdown();\n    } else {\n      isTabActive.value = true;\n\n      if (!lastActiveInternal.value) return;\n\n      const elapsedTimeSinceLastActive = Date.now() - lastActiveInternal.value;\n\n      // If the user was away for longer than the timeout threshold, call the timeout handler.\n      if (elapsedTimeSinceLastActive >= timeoutThreshold) {\n        timeout();\n        return;\n      }\n\n      // If the user was away for longer than the idle threshold but less than the timeout threshold, determine the\n      // remaining time left for the countdown and start it at the remaining time.\n      if (elapsedTimeSinceLastActive >= idleThreshold) {\n        const remainingTime = timeoutThreshold - elapsedTimeSinceLastActive;\n        countdownTimer.value = Math.floor(Math.max(remainingTime, 0) / 1000);\n        startCountdown();\n        return;\n      }\n\n      // If the user was away for less than the session timeout threshold, set the idle state and last active timestamp\n      // accordingly to resume the idle timer based on the actual idle time.\n      lastActive.value = lastActiveInternal.value;\n      idle.value = false;\n    }\n  };\n\n  /**\n   * Start the countdown timer.\n   *\n   * Once the user is considered idle, a countdown timer is started to count down the remaining time before the user\n   * sessions times out. This function is called when the user goes idle as well as when they return to the tab, hence,\n   * to prevent multiple countdown timers from being started, the countdown is only started if no active timer exists.\n   * Additionally, the countdown timer is only started when the tab is active to prevent the @vueuse/core useIdle\n   * composable from resetting the idle state when the user is away from the tab.\n   *\n   * @returns {void}\n   */\n  const startCountdown = () => {\n    if (isCountdownTimerActive.value || !isTabActive.value) return;\n\n    isCountdownTimerActive.value = true;\n\n    onIdle();\n\n    countdownIntervalTimer = setInterval(async () => {\n      countdownTimer.value -= 1;\n\n      if (countdownTimer.value <= 0) {\n        resetCountdown(false);\n        await timeout();\n      }\n    }, 1000);\n  };\n\n  /**\n   * Reset the sign-out countdown timer.\n   *\n   * @param {Boolean} resetToOriginalValue – Whether to reset the countdown to the original value or not.\n   * @returns {void}\n   */\n  const resetCountdown = (resetToOriginalValue = true) => {\n    isCountdownTimerActive.value = false;\n\n    clearInterval(countdownIntervalTimer);\n    countdownIntervalTimer = null;\n\n    countdownTimer.value = resetToOriginalValue ? Math.floor(countdownDuration / 1000) : 0;\n  };\n\n  /**\n   * Idle state reset\n   *\n   * Reset the idle state and the internal last active timestamp.\n   *\n   * @returns {void}\n   */\n  const resetIdleState = () => {\n    const nowTimestamp = now.value;\n    lastActiveInternal.value = nowTimestamp;\n    lastActive.value = nowTimestamp;\n    idle.value = false;\n  };\n\n  /**\n   * Full timer reset.\n   *\n   * Reset the idle state and countdown timer. This function is intended to be called when the component is mounted and\n   * unmounted to ensure the idle state is correctly set, as well as when the user manually resets the timer by i.e.\n   * clicking a \"stay logged in\" button.\n   */\n  const resetTimer = () => {\n    resetCountdown();\n    resetIdleState();\n  };\n\n  /**\n   * Idle state watcher.\n   *\n   * Starts the countdown timer when the user goes idle.\n   *\n   * @param {Boolean} idle - The idle state as provided by the useIdle composable.\n   * @returns {void}\n   */\n  watch(idle, (isIdle) => {\n    if (isIdle) {\n      startCountdown();\n    }\n  });\n\n  /**\n   * Last active timestamp watcher.\n   *\n   * When the user is not idle and the countdown timer is not active, store the last active timestamp.\n   * Important: whilst @vueuse/core useIdle composable exposes the lastActive timestamp, it does not work as expected in\n   * our usecase as we don't want to consider a user active when the countdown timer is running. That's why we store the\n   * last active timestamp in a separate variable and only update it under specific conditions.\n   *\n   * @param {Date} lastActive - The last active timestamp as provided by the useIdle composable.\n   * @returns {void}\n   */\n  watch(\n    lastActive,\n    useThrottleFn(() => {\n      if (!isCountdownTimerActive.value) {\n        lastActiveInternal.value = lastActive.value;\n      }\n    }, 1000),\n  );\n\n  onMounted(() => {\n    resetTimer();\n    lastActiveInternal.value = lastActive.value;\n    document.addEventListener('visibilitychange', handleVisibilityChange);\n  });\n\n  onUnmounted(() => {\n    resetTimer();\n    document.removeEventListener('visibilitychange', handleVisibilityChange);\n  });\n\n  return {\n    countdownTimer,\n    resetTimer,\n  };\n}\n","<template>\n  <PvConfirmDialog\n    group=\"inactivity-logout\"\n    :pt=\"{\n      root: { class: 'px-5' },\n      content: { style: 'max-width: 48rem' },\n      closeButton: { class: 'hidden' },\n      rejectButton: { root: { class: 'hidden' } },\n    }\"\n  >\n    <template #message>\n      {{ i18n.t('homeSelector.inactivityLogout', { timeLeft: countdownTimer }) }}\n    </template>\n  </PvConfirmDialog>\n</template>\n\n<script setup>\nimport { useConfirm } from 'primevue/useconfirm';\nimport { useI18n } from 'vue-i18n';\nimport PvConfirmDialog from 'primevue/confirmdialog';\nimport useInactivityTimeout from '@/composables/useInactivityTimeout/useInactivityTimeout';\nimport useSignOutMutation from '@/composables/mutations/useSignOutMutation';\nimport { AUTH_SESSION_TIMEOUT_IDLE_THRESHOLD, AUTH_SESSION_TIMEOUT_COUNTDOWN_DURATION } from '@/constants/auth';\n\nconst confirm = useConfirm();\nconst i18n = useI18n();\n\nconst { mutate: signOut } = useSignOutMutation();\n\nconst { countdownTimer, resetTimer } = useInactivityTimeout({\n  idleThreshold: AUTH_SESSION_TIMEOUT_IDLE_THRESHOLD,\n  countdownDuration: AUTH_SESSION_TIMEOUT_COUNTDOWN_DURATION,\n  onIdle: () => {\n    confirm.require({\n      group: 'inactivity-logout',\n      icon: 'pi pi-exclamation-triangle',\n      acceptLabel: i18n.t('homeSelector.inactivityLogoutAcceptLabel'),\n      acceptIcon: 'pi pi-check mr-2',\n      blockScroll: true,\n      accept: resetTimer,\n    });\n  },\n  onTimeout: async () => {\n    await signOut();\n  },\n});\n</script>\n\n<style>\nbutton.p-button.p-component.p-confirm-dialog-accept {\n  background-color: var(--primary-color);\n  color: white;\n  border: none;\n  border-radius: 0.375rem;\n  padding: 0.5rem;\n}\n</style>\n"],"names":["useInactivityTimeout","idleThreshold","countdownDuration","onIdle","onTimeout","timeoutThreshold","isTabActive","ref","lastActiveInternal","countdownTimer","isCountdownTimerActive","idle","lastActive","useIdle","now","useTimestamp","countdownIntervalTimer","timeout","resetTimer","handleVisibilityChange","resetCountdown","elapsedTimeSinceLastActive","remainingTime","startCountdown","resetToOriginalValue","resetIdleState","nowTimestamp","watch","isIdle","useThrottleFn","onMounted","onUnmounted","confirm","useConfirm","i18n","useI18n","signOut","useSignOutMutation","AUTH_SESSION_TIMEOUT_IDLE_THRESHOLD","AUTH_SESSION_TIMEOUT_COUNTDOWN_DURATION","_createBlock","_unref","PvConfirmDialog"],"mappings":"stBAce,SAASA,EAAqB,CAAE,cAAAC,EAAe,kBAAAC,EAAmB,OAAAC,EAAQ,UAAAC,CAAS,EAAI,CACpG,MAAMC,EAAmB,KAAK,IAAI,EAAG,KAAK,MAAM,OAAOJ,CAAa,EAAI,OAAOC,CAAiB,CAAC,CAAC,EAE5FI,EAAcC,EAAI,EAAI,EACtBC,EAAqBD,EAAI,IAAI,EAE7BE,EAAiBF,EAAI,KAAK,MAAML,EAAoB,GAAI,CAAC,EACzDQ,EAAyBH,EAAI,EAAK,EAElC,CAAE,KAAAI,EAAM,WAAAC,GAAeC,EAAQZ,EAAe,CAClD,0BAA2B,EAC/B,CAAG,EACKa,EAAMC,EAAa,CAAE,SAAU,GAAI,CAAE,EAE3C,IAAIC,EAAyB,KAO7B,MAAMC,EAAU,SAAY,CAC1B,MAAMb,EAAS,EACfc,EAAU,CACZ,EAiBMC,EAAyB,IAAM,CACnC,GAAI,SAAS,OACXb,EAAY,MAAQ,GAIpBc,EAAc,MACT,CAGL,GAFAd,EAAY,MAAQ,GAEhB,CAACE,EAAmB,MAAO,OAE/B,MAAMa,EAA6B,KAAK,IAAG,EAAKb,EAAmB,MAGnE,GAAIa,GAA8BhB,EAAkB,CAClDY,EAAO,EACP,MACF,CAIA,GAAII,GAA8BpB,EAAe,CAC/C,MAAMqB,EAAgBjB,EAAmBgB,EACzCZ,EAAe,MAAQ,KAAK,MAAM,KAAK,IAAIa,EAAe,CAAC,EAAI,GAAI,EACnEC,EAAc,EACd,MACF,CAIAX,EAAW,MAAQJ,EAAmB,MACtCG,EAAK,MAAQ,EACf,CACF,EAaMY,EAAiB,IAAM,CACvBb,EAAuB,OAAS,CAACJ,EAAY,QAEjDI,EAAuB,MAAQ,GAE/BP,EAAM,EAENa,EAAyB,YAAY,SAAY,CAC/CP,EAAe,OAAS,EAEpBA,EAAe,OAAS,IAC1BW,EAAe,EAAK,EACpB,MAAMH,EAAO,EAEjB,EAAG,GAAI,EACT,EAQMG,EAAiB,CAACI,EAAuB,KAAS,CACtDd,EAAuB,MAAQ,GAE/B,cAAcM,CAAsB,EACpCA,EAAyB,KAEzBP,EAAe,MAAQe,EAAuB,KAAK,MAAMtB,EAAoB,GAAI,EAAI,CACvF,EASMuB,EAAiB,IAAM,CAC3B,MAAMC,EAAeZ,EAAI,MACzBN,EAAmB,MAAQkB,EAC3Bd,EAAW,MAAQc,EACnBf,EAAK,MAAQ,EACf,EASMO,EAAa,IAAM,CACvBE,EAAc,EACdK,EAAc,CAChB,EAUA,OAAAE,EAAMhB,EAAOiB,GAAW,CAClBA,GACFL,EAAc,CAElB,CAAC,EAaDI,EACEf,EACAiB,EAAc,IAAM,CACbnB,EAAuB,QAC1BF,EAAmB,MAAQI,EAAW,MAE1C,EAAG,GAAI,CACX,EAEEkB,EAAU,IAAM,CACdZ,EAAU,EACVV,EAAmB,MAAQI,EAAW,MACtC,SAAS,iBAAiB,mBAAoBO,CAAsB,CACtE,CAAC,EAEDY,EAAY,IAAM,CAChBb,EAAU,EACV,SAAS,oBAAoB,mBAAoBC,CAAsB,CACzE,CAAC,EAEM,CACL,eAAAV,EACA,WAAAS,CACJ,CACA,yCCzLA,MAAMc,EAAUC,EAAU,EACpBC,EAAOC,EAAO,EAEd,CAAE,OAAQC,CAAO,EAAKC,EAAkB,EAExC,CAAE,eAAA5B,EAAgB,WAAAS,CAAU,EAAKlB,EAAqB,CAC1D,cAAesC,EACf,kBAAmBC,EACnB,OAAQ,IAAM,CACZP,EAAQ,QAAQ,CACd,MAAO,oBACP,KAAM,6BACN,YAAaE,EAAK,EAAE,0CAA0C,EAC9D,WAAY,mBACZ,YAAa,GACb,OAAQhB,CACd,CAAK,CACH,EACA,UAAW,SAAY,CACrB,MAAMkB,EAAO,CACf,CACF,CAAC,oBA5CCI,EAYkBC,EAAAC,CAAA,EAAA,CAXhB,MAAM,oBACL,GAAI,yHAKJ,IAEU,UACT,IAA2E,KAAxED,EAAAP,CAAA,EAAK,EAAC,gCAAA,CAAA,SAA8CO,EAAAhC,CAAA,CAAc,CAAA,CAAA,EAAA,CAAA"}