{"version":3,"file":"index.browser.min.js","sources":["../src/index.ts"],"sourcesContent":["import { JsPsych, JsPsychPlugin, ParameterType, TrialType } from \"jspsych\";\n\nconst info = <const>{\n  name: \"corsi-blocks\",\n  parameters: {\n    /**\n     * An array of block indexes that specify the order of the sequence to be displayed. For example,\n     * [0, 1, 2, 3, 4] would display the first 5 blocks in the order they appear in the blocks parameter.\n     */\n    sequence: {\n      type: ParameterType.INT,\n      default: undefined,\n      array: true,\n    },\n    /**\n     * An array of objects that specify the x and y coordinates of each block. The coordinates represent the center\n     * of the block. The coordinates are specified as percentages of the width and height of the display. For example,\n     * {x: 50, y: 50} would place the block in the center of the display.\n     *\n     * The default value is an array of nine blocks that approximates the layout of the original Corsi blocks task.\n     */\n    blocks: {\n      type: ParameterType.COMPLEX,\n      array: true,\n      default: [\n        { y: 80, x: 45 },\n        { y: 94, x: 80 },\n        { y: 70, x: 20 },\n        { y: 60, x: 70 },\n        { y: 50, x: 35 },\n        { y: 40, x: 6 },\n        { y: 45, x: 94 },\n        { y: 25, x: 60 },\n        { y: 6, x: 47 },\n      ],\n      nested: {\n        x: {\n          type: ParameterType.INT,\n          default: undefined,\n        },\n        y: {\n          type: ParameterType.INT,\n          default: undefined,\n        },\n      },\n    },\n    /**\n     * The size of the blocks as a percentage of the overall display size.\n     */\n    block_size: {\n      type: ParameterType.INT,\n      default: 12,\n    },\n    /**\n     * The width of the display, specified as a valid CSS measurement.\n     */\n    display_width: {\n      type: ParameterType.STRING,\n      default: \"400px\",\n    },\n    /**\n     * The height of the display, specified as a valid CSS measurement.\n     */\n    display_height: {\n      type: ParameterType.STRING,\n      default: \"400px\",\n    },\n    /**\n     * An optional text prompt that can be shown below the display area.\n     */\n    prompt: {\n      type: ParameterType.STRING,\n      default: null,\n    },\n    /**\n     * The mode of the trial. If 'display', then the sequence is displayed and the trial ends after\n     * the sequence is complete. If 'input', then the use must click on the blocks in the correct order.\n     */\n    mode: {\n      type: ParameterType.STRING,\n      default: \"display\",\n      options: [\"display\", \"input\"],\n    },\n    /**\n     * The duration, in milliseconds, between each block in the sequence.\n     */\n    sequence_gap_duration: {\n      type: ParameterType.INT,\n      default: 250,\n    },\n    /**\n     * The duration, in milliseconds, that each block is displayed during the sequence.\n     */\n    sequence_block_duration: {\n      type: ParameterType.INT,\n      default: 1000,\n    },\n    /**\n     * The duration, in milliseconds, to show the blocks before the sequence begins.\n     */\n    pre_stim_duration: {\n      type: ParameterType.INT,\n      default: 500,\n    },\n    /**\n     * The duration, in milliseconds, to show the feedback response animation\n     * during input mode.\n     */\n    response_animation_duration: {\n      type: ParameterType.INT,\n      default: 500,\n    },\n    /**\n     * The color of unselected, unhighlighted blocks.\n     */\n    block_color: {\n      type: ParameterType.STRING,\n      default: \"#555\",\n    },\n    /**\n     * The color of the highlighted block.\n     */\n    highlight_color: {\n      type: ParameterType.STRING,\n      default: \"#ff0000\",\n    },\n    /**\n     * The color of correct feedback.\n     */\n    correct_color: {\n      type: ParameterType.STRING,\n      default: \"#00ff00\",\n    },\n    /**\n     * The color of incorrect feedback.\n     */\n    incorrect_color: {\n      type: ParameterType.STRING,\n      default: \"#ff0000\",\n    },\n  },\n};\n\ntype Info = typeof info;\n\n/**\n * **corsi-blocks**\n *\n * This plugin displays a sequence of blocks and then gets the\n * subject's response. The sequence can be displayed in either\n * 'display' mode or 'input' mode. In 'display' mode, the\n * sequence is displayed and the trial ends after the sequence\n * is complete. In 'input' mode, the subject must click on the\n * blocks in the correct order.\n *\n * @author Josh de Leeuw\n * @see {@link https://DOCUMENTATION_URL DOCUMENTATION LINK TEXT}\n */\nclass CorsiBlocksPlugin implements JsPsychPlugin<Info> {\n  static info = info;\n\n  constructor(private jsPsych: JsPsych) {}\n\n  trial(display_element: HTMLElement, trial: TrialType<Info>) {\n    let css = `<style id=\"jspsych-corsi-css\">\n      #jspsych-corsi-stimulus { \n        position: relative; \n        width:${trial.display_width}; \n        height:${trial.display_height};\n      }\n      .jspsych-corsi-block { \n        background-color: ${trial.block_color}; \n        position: absolute; \n        width: ${trial.block_size}%; \n        height: ${trial.block_size}%;\n        transform: translate(-50%, -50%);\n      }\n      #jspsych-corsi-prompt { \n        position: absolute; \n        text-align: center; \n        width: ${trial.display_width}; \n        top: 100%; \n      }\n      #jspsych-corsi-prompt p { \n        font-size: 18px; \n      }\n      ${trial.mode == \"input\" ? \".jspsych-corsi-block { cursor: pointer; }\" : \"\"}\n    </style>`;\n\n    let html = css;\n    html += '<div id=\"jspsych-corsi-stimulus\">';\n\n    for (let i = 0; i < trial.blocks.length; i++) {\n      html += `<div class=\"jspsych-corsi-block\" data-id=\"${i}\" style=\"top:${trial.blocks[i].y}%; left:${trial.blocks[i].x}%;\"></div>`;\n    }\n\n    if (trial.prompt != null) {\n      html += `<div id=\"jspsych-corsi-prompt\"><p>${trial.prompt}</p></div>`;\n    }\n    html += \"</div>\";\n\n    display_element.innerHTML = html;\n\n    const start_time = performance.now();\n\n    const trial_data = {\n      sequence: trial.sequence,\n      response: [],\n      rt: [],\n      blocks: trial.blocks,\n      correct: null,\n    };\n\n    const end_trial = () => {\n      display_element.innerHTML = \"\";\n      this.jsPsych.finishTrial(trial_data);\n    };\n\n    const wait = function (fn, t) {\n      const start = performance.now();\n\n      const _wait_help = (fn, t, s) => {\n        const duration = performance.now() - s;\n        if (duration >= t) {\n          fn();\n        } else {\n          window.requestAnimationFrame(() => _wait_help(fn, t, start));\n        }\n      };\n      window.requestAnimationFrame(() => _wait_help(fn, t, start));\n    };\n\n    if (trial.mode == \"display\") {\n      let sequence_location = 0;\n      let display_phase = \"pre-stim\";\n\n      const update_display = () => {\n        if (display_phase == \"pre-stim\") {\n          wait(update_display, trial.pre_stim_duration);\n          display_phase = \"sequence\";\n        } else if (display_phase == \"sequence\") {\n          const block: HTMLElement = display_element.querySelector(\n            `.jspsych-corsi-block[data-id=\"${trial.sequence[sequence_location]}\"]`\n          );\n          if (sequence_location < trial.sequence.length) {\n            block.style.backgroundColor = trial.highlight_color;\n            wait(update_display, trial.sequence_block_duration);\n            display_phase = \"iti\";\n          }\n          if (sequence_location == trial.sequence.length) {\n            end_trial();\n          }\n        } else if (display_phase == \"iti\") {\n          const block: HTMLElement = display_element.querySelector(\n            `.jspsych-corsi-block[data-id=\"${trial.sequence[sequence_location]}\"]`\n          );\n          block.style.backgroundColor = trial.block_color;\n          sequence_location++;\n          wait(update_display, trial.sequence_gap_duration);\n          display_phase = \"sequence\";\n        }\n      };\n\n      window.requestAnimationFrame(update_display);\n    }\n\n    if (trial.mode == \"input\") {\n      const correct_animation = [\n        { backgroundColor: trial.block_color },\n        { backgroundColor: trial.correct_color, offset: 0.2 },\n        { backgroundColor: trial.block_color },\n      ];\n\n      const incorrect_animation = [\n        { backgroundColor: trial.block_color },\n        { backgroundColor: trial.incorrect_color, offset: 0.2 },\n        { backgroundColor: trial.block_color },\n      ];\n\n      const animation_timing = {\n        duration: trial.response_animation_duration,\n        iterations: 1,\n      };\n\n      const register_click = (id: string) => {\n        if (trial_data.correct !== null) {\n          return; // extra click during timeout, do nothing\n        }\n        const rt = Math.round(performance.now() - start_time);\n        trial_data.response.push(parseInt(id));\n        trial_data.rt.push(rt);\n        const correct = parseInt(id) == trial.sequence[trial_data.response.length - 1];\n        if (correct) {\n          display_element\n            .querySelector(`.jspsych-corsi-block[data-id=\"${id}\"]`)\n            .animate(correct_animation, animation_timing);\n          if (trial_data.response.length == trial.sequence.length) {\n            trial_data.correct = true;\n            setTimeout(end_trial, trial.response_animation_duration); // allows animation to finish\n          }\n        } else {\n          display_element\n            .querySelector(`.jspsych-corsi-block[data-id=\"${id}\"]`)\n            .animate(incorrect_animation, animation_timing);\n          trial_data.correct = false;\n          setTimeout(end_trial, trial.response_animation_duration); // allows animation to finish\n        }\n      };\n\n      var blocks = display_element.querySelectorAll(\".jspsych-corsi-block\");\n      for (var i = 0; i < blocks.length; i++) {\n        blocks[i].addEventListener(\"click\", (e) => {\n          register_click((e.target as HTMLElement).getAttribute(\"data-id\"));\n        });\n      }\n    }\n  }\n}\n\nexport default CorsiBlocksPlugin;\n"],"names":["info","name","parameters","sequence","type","ParameterType","INT","default","undefined","array","blocks","COMPLEX","y","x","nested","block_size","display_width","STRING","display_height","prompt","mode","options","sequence_gap_duration","sequence_block_duration","pre_stim_duration","response_animation_duration","block_color","highlight_color","correct_color","incorrect_color","CorsiBlocksPlugin","jsPsych","_classCallCheck","this","display_element","trial","_this","html","concat","i","length","innerHTML","start_time","performance","now","trial_data","response","rt","correct","end_trial","finishTrial","wait","fn","t","start","_wait_help","s","window","requestAnimationFrame","sequence_location","display_phase","update_display","block","querySelector","style","backgroundColor","correct_animation","offset","incorrect_animation","animation_timing","duration","iterations","register_click","id","Math","round","push","parseInt","animate","setTimeout","querySelectorAll","addEventListener","e","target","getAttribute"],"mappings":"sNAEA,IAAMA,EAAc,CAClBC,KAAM,eACNC,WAAY,CAKVC,SAAU,CACRC,KAAMC,EAAaA,cAACC,IACpBC,aAASC,EACTC,OAAO,GASTC,OAAQ,CACNN,KAAMC,EAAaA,cAACM,QACpBF,OAAO,EACPF,QAAS,CACP,CAAEK,EAAG,GAAIC,EAAG,IACZ,CAAED,EAAG,GAAIC,EAAG,IACZ,CAAED,EAAG,GAAIC,EAAG,IACZ,CAAED,EAAG,GAAIC,EAAG,IACZ,CAAED,EAAG,GAAIC,EAAG,IACZ,CAAED,EAAG,GAAIC,EAAG,GACZ,CAAED,EAAG,GAAIC,EAAG,IACZ,CAAED,EAAG,GAAIC,EAAG,IACZ,CAAED,EAAG,EAAGC,EAAG,KAEbC,OAAQ,CACND,EAAG,CACDT,KAAMC,EAAaA,cAACC,IACpBC,aAASC,GAEXI,EAAG,CACDR,KAAMC,EAAaA,cAACC,IACpBC,aAASC,KAOfO,WAAY,CACVX,KAAMC,EAAaA,cAACC,IACpBC,QAAS,IAKXS,cAAe,CACbZ,KAAMC,EAAaA,cAACY,OACpBV,QAAS,SAKXW,eAAgB,CACdd,KAAMC,EAAaA,cAACY,OACpBV,QAAS,SAKXY,OAAQ,CACNf,KAAMC,EAAaA,cAACY,OACpBV,QAAS,MAMXa,KAAM,CACJhB,KAAMC,EAAaA,cAACY,OACpBV,QAAS,UACTc,QAAS,CAAC,UAAW,UAKvBC,sBAAuB,CACrBlB,KAAMC,EAAaA,cAACC,IACpBC,QAAS,KAKXgB,wBAAyB,CACvBnB,KAAMC,EAAaA,cAACC,IACpBC,QAAS,KAKXiB,kBAAmB,CACjBpB,KAAMC,EAAaA,cAACC,IACpBC,QAAS,KAMXkB,4BAA6B,CAC3BrB,KAAMC,EAAaA,cAACC,IACpBC,QAAS,KAKXmB,YAAa,CACXtB,KAAMC,EAAaA,cAACY,OACpBV,QAAS,QAKXoB,gBAAiB,CACfvB,KAAMC,EAAaA,cAACY,OACpBV,QAAS,WAKXqB,cAAe,CACbxB,KAAMC,EAAaA,cAACY,OACpBV,QAAS,WAKXsB,gBAAiB,CACfzB,KAAMC,EAAaA,cAACY,OACpBV,QAAS,aAoBTuB,aAGJ,SAAAA,EAAoBC,gGAAgBC,CAAAC,KAAAH,GAAhBG,KAAOF,QAAPA,CAAoB,6CAExC,SAAMG,EAA8BC,GAAsB,IAAAC,EAAAH,KA0BpDI,EAzBG,iHAAAC,OAGKH,EAAMnB,cACLmB,uBAAAA,OAAAA,EAAMjB,+FAGKiB,EAAMT,YAPvB,qDAAAY,OASMH,EAAMpB,WACLoB,yBAAAA,OAAAA,EAAMpB,WAVb,uKAAAuB,OAgBMH,EAAMnB,cAMfmB,kHAAAA,OAAc,SAAdA,EAAMf,KAAkB,4CAA8C,GAtB1E,kBA0BAiB,GAAQ,oCAER,IAAK,IAAIE,EAAI,EAAGA,EAAIJ,EAAMzB,OAAO8B,OAAQD,IACvCF,uDAAqDE,EAAjD,iBAAAD,OAAkEH,EAAMzB,OAAO6B,GAAG3B,EAAlF,YAAA0B,OAA8FH,EAAMzB,OAAO6B,GAAG1B,EAAlH,cAGkB,MAAhBsB,EAAMhB,SACRkB,GAA6CF,qCAAAA,OAAAA,EAAMhB,OAAnD,eAEFkB,GAAQ,SAERH,EAAgBO,UAAYJ,EAE5B,IA0GM3B,EACK6B,EA3GLG,EAAaC,YAAYC,MAEzBC,EAAa,CACjB1C,SAAUgC,EAAMhC,SAChB2C,SAAU,GACVC,GAAI,GACJrC,OAAQyB,EAAMzB,OACdsC,QAAS,MAGLC,EAAY,WAChBf,EAAgBO,UAAY,GAC5BL,EAAKL,QAAQmB,YAAYL,IAGrBM,EAAO,SAAUC,EAAIC,GACzB,IAAMC,EAAQX,YAAYC,MAEpBW,EAAa,SAAbA,EAAcH,EAAIC,EAAGG,GACRb,YAAYC,MAAQY,GACrBH,EACdD,IAEAK,OAAOC,uBAAsB,WAAA,OAAMH,EAAWH,EAAIC,EAAGC,OAGzDG,OAAOC,uBAAsB,WAAA,OAAMH,EAAWH,EAAIC,EAAGC,OAGvD,GAAkB,WAAdnB,EAAMf,KAAmB,CAC3B,IAAIuC,EAAoB,EACpBC,EAAgB,WA6BpBH,OAAOC,uBA3BgB,SAAjBG,IACJ,GAAqB,YAAjBD,EACFT,EAAKU,EAAgB1B,EAAMX,mBAC3BoC,EAAgB,gBACX,GAAqB,YAAjBA,EAA6B,CACtC,IAAME,EAAqB5B,EAAgB6B,cAAhB,iCAAAzB,OACQH,EAAMhC,SAASwD,GADlD,OAGIA,EAAoBxB,EAAMhC,SAASqC,SACrCsB,EAAME,MAAMC,gBAAkB9B,EAAMR,gBACpCwB,EAAKU,EAAgB1B,EAAMZ,yBAC3BqC,EAAgB,OAEdD,GAAqBxB,EAAMhC,SAASqC,QACtCS,GAEH,KAA2B,OAAjBW,IACkB1B,EAAgB6B,cAAhB,iCAAAzB,OACQH,EAAMhC,SAASwD,GADlD,OAGMK,MAAMC,gBAAkB9B,EAAMT,YACpCiC,IACAR,EAAKU,EAAgB1B,EAAMb,uBAC3BsC,EAAgB,cAKrB,CAEiB,SAAdzB,EAAMf,MAAiB,WACzB,IAAM8C,EAAoB,CACxB,CAAED,gBAAiB9B,EAAMT,aACzB,CAAEuC,gBAAiB9B,EAAMP,cAAeuC,OAAQ,IAChD,CAAEF,gBAAiB9B,EAAMT,cAGrB0C,EAAsB,CAC1B,CAAEH,gBAAiB9B,EAAMT,aACzB,CAAEuC,gBAAiB9B,EAAMN,gBAAiBsC,OAAQ,IAClD,CAAEF,gBAAiB9B,EAAMT,cAGrB2C,EAAmB,CACvBC,SAAUnC,EAAMV,4BAChB8C,WAAY,GAGRC,EAAiB,SAACC,GACtB,GAA2B,OAAvB5B,EAAWG,QAAf,CAGA,IAAMD,EAAK2B,KAAKC,MAAMhC,YAAYC,MAAQF,GAC1CG,EAAWC,SAAS8B,KAAKC,SAASJ,IAClC5B,EAAWE,GAAG6B,KAAK7B,GACH8B,SAASJ,IAAOtC,EAAMhC,SAAS0C,EAAWC,SAASN,OAAS,IAE1EN,EACG6B,cAA+CU,iCAAAA,OAAAA,SAC/CK,QAAQZ,EAAmBG,GAC1BxB,EAAWC,SAASN,QAAUL,EAAMhC,SAASqC,SAC/CK,EAAWG,SAAU,EACrB+B,WAAW9B,EAAWd,EAAMV,gCAG9BS,EACG6B,cAA+CU,iCAAAA,OAAAA,SAC/CK,QAAQV,EAAqBC,GAChCxB,EAAWG,SAAU,EACrB+B,WAAW9B,EAAWd,EAAMV,6BAlB7B,GAuBH,IADIf,EAASwB,EAAgB8C,iBAAiB,wBACrCzC,EAAI,EAAGA,EAAI7B,EAAO8B,OAAQD,IACjC7B,EAAO6B,GAAG0C,iBAAiB,SAAS,SAACC,GACnCV,EAAgBU,EAAEC,OAAuBC,aAAa,cA9CjC,CAAA,EAkD5B,gGA7JMtD,EAAI9B,KAAGA"}