{"version":3,"file":"useGroupsQuery-nr4_Vz4U.js","sources":["../../src/composables/queries/useAdministrationsQuery.ts","../../src/composables/queries/useSchoolsQuery.ts","../../src/composables/queries/useClassesQuery.ts","../../src/composables/queries/useGroupsQuery.ts"],"sourcesContent":["import { type MaybeRefOrGetter } from 'vue';\nimport { useQuery, type UseQueryReturnType, type UseQueryOptions } from '@tanstack/vue-query';\nimport { computeQueryOverrides } from '@/helpers/computeQueryOverrides';\nimport { hasArrayEntries } from '@/helpers/hasArrayEntries';\nimport { fetchDocumentsById } from '@/helpers/query/utils';\nimport { ADMINISTRATIONS_QUERY_KEY } from '@/constants/queryKeys';\nimport { FIRESTORE_COLLECTIONS } from '@/constants/firebase';\n\n/**\n * Administrations query.\n *\n * @param {ref<Array<String>>} administrationIds – A Vue ref containing an array of administration IDs to fetch.\n * @param {QueryOptions|undefined} queryOptions – Optional TanStack query options.\n * @returns {UseQueryResult} The TanStack query result.\n */\nconst useAdministrationsQuery = (administrationIds, queryOptions?: UseQueryOptions): UseQueryReturnType => {\n  // Ensure all necessary data is available before enabling the query.\n  const conditions = [() => hasArrayEntries(administrationIds)];\n  const { isQueryEnabled, options } = computeQueryOverrides(conditions, queryOptions);\n\n  return useQuery({\n    queryKey: [ADMINISTRATIONS_QUERY_KEY, administrationIds],\n    queryFn: () => fetchDocumentsById(FIRESTORE_COLLECTIONS.ADMINISTRATIONS, administrationIds),\n    enabled: isQueryEnabled,\n    ...options,\n  });\n};\n\nexport default useAdministrationsQuery;\n","import { type MaybeRefOrGetter } from 'vue';\nimport { useQuery, type UseQueryReturnType, type UseQueryOptions } from '@tanstack/vue-query';\nimport { computeQueryOverrides } from '@/helpers/computeQueryOverrides';\nimport { hasArrayEntries } from '@/helpers/hasArrayEntries';\nimport { fetchDocumentsById } from '@/helpers/query/utils';\nimport { SCHOOLS_QUERY_KEY } from '@/constants/queryKeys';\nimport { FIRESTORE_COLLECTIONS } from '@/constants/firebase';\n\n/**\n * School Query\n *\n * @param {Array} schoolIds – The array of school IDs to fetch.\n * @param {QueryOptions|undefined} queryOptions – Optional TanStack query options.\n * @returns {UseQueryResult} The TanStack query result.\n */\nconst useSchoolsQuery = (schoolIds, queryOptions?: UseQueryOptions): UseQueryReturnType => {\n  // Ensure all necessary data is loaded before enabling the query.\n  const conditions = [() => hasArrayEntries(schoolIds)];\n  const { isQueryEnabled, options } = computeQueryOverrides(conditions, queryOptions);\n\n  return useQuery({\n    queryKey: [SCHOOLS_QUERY_KEY, schoolIds],\n    queryFn: () => fetchDocumentsById(FIRESTORE_COLLECTIONS.SCHOOLS, schoolIds),\n    enabled: isQueryEnabled,\n    ...options,\n  });\n};\n\nexport default useSchoolsQuery;\n","import { type MaybeRefOrGetter } from 'vue';\nimport { useQuery, type UseQueryReturnType, type UseQueryOptions } from '@tanstack/vue-query';\nimport { computeQueryOverrides } from '@/helpers/computeQueryOverrides';\nimport { fetchDocumentsById } from '@/helpers/query/utils';\nimport { hasArrayEntries } from '@/helpers/hasArrayEntries';\nimport { CLASSES_QUERY_KEY } from '@/constants/queryKeys';\nimport { FIRESTORE_COLLECTIONS } from '@/constants/firebase';\n\n/**\n * Classes query.\n *\n * @param {Array} classId – The array of class IDs to fetch.\n * @param {QueryOptions|undefined} queryOptions – Optional TanStack query options.\n * @returns {UseQueryResult} The TanStack query result.\n */\nconst useClassesQuery = (classIds, queryOptions?: UseQueryOptions): UseQueryReturnType => {\n  // Ensure all necessary data is loaded before enabling the query.\n  const conditions = [() => hasArrayEntries(classIds)];\n  const { isQueryEnabled, options } = computeQueryOverrides(conditions, queryOptions);\n\n  return useQuery({\n    queryKey: [CLASSES_QUERY_KEY, classIds],\n    queryFn: () => fetchDocumentsById(FIRESTORE_COLLECTIONS.CLASSES, classIds),\n    enabled: isQueryEnabled,\n    ...options,\n  });\n};\n\nexport default useClassesQuery;\n","import { type MaybeRefOrGetter } from 'vue';\nimport { useQuery, type UseQueryReturnType, type UseQueryOptions } from '@tanstack/vue-query';\nimport { computeQueryOverrides } from '@/helpers/computeQueryOverrides';\nimport { hasArrayEntries } from '@/helpers/hasArrayEntries';\nimport { fetchDocumentsById } from '@/helpers/query/utils';\nimport { GROUPS_QUERY_KEY } from '@/constants/queryKeys';\nimport { FIRESTORE_COLLECTIONS } from '@/constants/firebase';\n\n/**\n * Group Query\n *\n * @param {Array} groupIds – The array of group IDs to fetch.\n * @param {QueryOptions|undefined} queryOptions – Optional TanStack query options.\n * @returns {UseQueryResult} The TanStack query result.\n */\nconst useGroupsQuery = (groupIds, queryOptions?: UseQueryOptions): UseQueryReturnType => {\n  // Ensure all necessary data is loaded before enabling the query.\n  const conditions = [() => hasArrayEntries(groupIds)];\n  const { isQueryEnabled, options } = computeQueryOverrides(conditions, queryOptions);\n\n  return useQuery({\n    queryKey: [GROUPS_QUERY_KEY, groupIds],\n    queryFn: () => fetchDocumentsById(FIRESTORE_COLLECTIONS.GROUPS, groupIds),\n    enabled: isQueryEnabled,\n    ...options,\n  });\n};\n\nexport default useGroupsQuery;\n"],"names":["useAdministrationsQuery","administrationIds","queryOptions","conditions","hasArrayEntries","isQueryEnabled","options","computeQueryOverrides","useQuery","ADMINISTRATIONS_QUERY_KEY","fetchDocumentsById","FIRESTORE_COLLECTIONS","useSchoolsQuery","schoolIds","SCHOOLS_QUERY_KEY","useClassesQuery","classIds","CLASSES_QUERY_KEY","useGroupsQuery","groupIds","GROUPS_QUERY_KEY"],"mappings":"ihBAeA,MAAMA,EAA0B,CAACC,EAAmBC,IAAuD,CAEzG,MAAMC,EAAa,CAAC,IAAMC,EAAgBH,CAAiB,CAAC,EACtD,CAAE,eAAAI,EAAgB,QAAAC,CAAA,EAAYC,EAAsBJ,EAAYD,CAAY,EAElF,OAAOM,EAAS,CACd,SAAU,CAACC,EAA2BR,CAAiB,EACvD,QAAS,IAAMS,EAAmBC,EAAsB,gBAAiBV,CAAiB,EAC1F,QAASI,EACT,GAAGC,CAAA,CACJ,CACH,ECXMM,EAAkB,CAACC,EAAWX,IAAuD,CAEzF,MAAMC,EAAa,CAAC,IAAMC,EAAgBS,CAAS,CAAC,EAC9C,CAAE,eAAAR,EAAgB,QAAAC,CAAA,EAAYC,EAAsBJ,EAAYD,CAAY,EAElF,OAAOM,EAAS,CACd,SAAU,CAACM,EAAmBD,CAAS,EACvC,QAAS,IAAMH,EAAmBC,EAAsB,QAASE,CAAS,EAC1E,QAASR,EACT,GAAGC,CAAA,CACJ,CACH,ECXMS,EAAkB,CAACC,EAAUd,IAAuD,CAExF,MAAMC,EAAa,CAAC,IAAMC,EAAgBY,CAAQ,CAAC,EAC7C,CAAE,eAAAX,EAAgB,QAAAC,CAAA,EAAYC,EAAsBJ,EAAYD,CAAY,EAElF,OAAOM,EAAS,CACd,SAAU,CAACS,EAAmBD,CAAQ,EACtC,QAAS,IAAMN,EAAmBC,EAAsB,QAASK,CAAQ,EACzE,QAASX,EACT,GAAGC,CAAA,CACJ,CACH,ECXMY,EAAiB,CAACC,EAAUjB,IAAuD,CAEvF,MAAMC,EAAa,CAAC,IAAMC,EAAgBe,CAAQ,CAAC,EAC7C,CAAE,eAAAd,EAAgB,QAAAC,CAAA,EAAYC,EAAsBJ,EAAYD,CAAY,EAElF,OAAOM,EAAS,CACd,SAAU,CAACY,EAAkBD,CAAQ,EACrC,QAAS,IAAMT,EAAmBC,EAAsB,OAAQQ,CAAQ,EACxE,QAASd,EACT,GAAGC,CAAA,CACJ,CACH"}