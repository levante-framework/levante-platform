{"version":3,"file":"chunk-C6jcZpD8.js","sources":["../../../../node_modules/lodash/chunk.js"],"sourcesContent":["var baseSlice = require('./_baseSlice'),\n    isIterateeCall = require('./_isIterateeCall'),\n    toInteger = require('./toInteger');\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeCeil = Math.ceil,\n    nativeMax = Math.max;\n\n/**\n * Creates an array of elements split into groups the length of `size`.\n * If `array` can't be split evenly, the final chunk will be the remaining\n * elements.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Array\n * @param {Array} array The array to process.\n * @param {number} [size=1] The length of each chunk\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {Array} Returns the new array of chunks.\n * @example\n *\n * _.chunk(['a', 'b', 'c', 'd'], 2);\n * // => [['a', 'b'], ['c', 'd']]\n *\n * _.chunk(['a', 'b', 'c', 'd'], 3);\n * // => [['a', 'b', 'c'], ['d']]\n */\nfunction chunk(array, size, guard) {\n  if ((guard ? isIterateeCall(array, size, guard) : size === undefined)) {\n    size = 1;\n  } else {\n    size = nativeMax(toInteger(size), 0);\n  }\n  var length = array == null ? 0 : array.length;\n  if (!length || size < 1) {\n    return [];\n  }\n  var index = 0,\n      resIndex = 0,\n      result = Array(nativeCeil(length / size));\n\n  while (index < length) {\n    result[resIndex++] = baseSlice(array, index, (index += size));\n  }\n  return result;\n}\n\nmodule.exports = chunk;\n"],"names":["baseSlice","require$$0","isIterateeCall","require$$1","toInteger","require$$2","nativeCeil","nativeMax","chunk","array","size","guard","length","index","resIndex","result","chunk_1"],"mappings":"geAAA,IAAIA,EAAYC,EACZC,EAAiBC,EACjBC,EAAYC,EAGZC,EAAa,KAAK,KAClBC,EAAY,KAAK,IAuBrB,SAASC,EAAMC,EAAOC,EAAMC,EAAO,EAC5BA,EAAQT,EAAeO,EAAOC,EAAMC,CAAK,EAAID,IAAS,QACzDA,EAAO,EAEPA,EAAOH,EAAUH,EAAUM,CAAI,EAAG,CAAC,EAErC,IAAIE,EAASH,GAAS,KAAO,EAAIA,EAAM,OACvC,GAAI,CAACG,GAAUF,EAAO,EACpB,MAAO,CAAA,EAMT,QAJIG,EAAQ,EACRC,EAAW,EACXC,EAAS,MAAMT,EAAWM,EAASF,CAAI,CAAC,EAErCG,EAAQD,GACbG,EAAOD,GAAU,EAAId,EAAUS,EAAOI,EAAQA,GAASH,CAAI,EAE7D,OAAOK,CACT,CAEA,IAAAC,EAAiBR","x_google_ignoreList":[0]}