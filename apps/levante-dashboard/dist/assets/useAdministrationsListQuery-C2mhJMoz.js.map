{"version":3,"file":"useAdministrationsListQuery-C2mhJMoz.js","sources":["../../../../node_modules/@primeuix/styles/dist/inputgroup/index.mjs","../../../../node_modules/primevue/inputgroup/style/index.mjs","../../../../node_modules/primevue/inputgroup/index.mjs","../../src/composables/queries/useAdministrationsListQuery.ts"],"sourcesContent":["var style=\"\\n    .p-inputgroup,\\n    .p-inputgroup .p-iconfield,\\n    .p-inputgroup .p-floatlabel,\\n    .p-inputgroup .p-iftalabel {\\n        display: flex;\\n        align-items: stretch;\\n        width: 100%;\\n    }\\n\\n    .p-inputgroup .p-inputtext,\\n    .p-inputgroup .p-inputwrapper {\\n        flex: 1 1 auto;\\n        width: 1%;\\n    }\\n\\n    .p-inputgroupaddon {\\n        display: flex;\\n        align-items: center;\\n        justify-content: center;\\n        padding: dt('inputgroup.addon.padding');\\n        background: dt('inputgroup.addon.background');\\n        color: dt('inputgroup.addon.color');\\n        border-block-start: 1px solid dt('inputgroup.addon.border.color');\\n        border-block-end: 1px solid dt('inputgroup.addon.border.color');\\n        min-width: dt('inputgroup.addon.min.width');\\n    }\\n\\n    .p-inputgroupaddon:first-child,\\n    .p-inputgroupaddon + .p-inputgroupaddon {\\n        border-inline-start: 1px solid dt('inputgroup.addon.border.color');\\n    }\\n\\n    .p-inputgroupaddon:last-child {\\n        border-inline-end: 1px solid dt('inputgroup.addon.border.color');\\n    }\\n\\n    .p-inputgroupaddon:has(.p-button) {\\n        padding: 0;\\n        overflow: hidden;\\n    }\\n\\n    .p-inputgroupaddon .p-button {\\n        border-radius: 0;\\n    }\\n\\n    .p-inputgroup > .p-component,\\n    .p-inputgroup > .p-inputwrapper > .p-component,\\n    .p-inputgroup > .p-iconfield > .p-component,\\n    .p-inputgroup > .p-floatlabel > .p-component,\\n    .p-inputgroup > .p-floatlabel > .p-inputwrapper > .p-component,\\n    .p-inputgroup > .p-iftalabel > .p-component,\\n    .p-inputgroup > .p-iftalabel > .p-inputwrapper > .p-component {\\n        border-radius: 0;\\n        margin: 0;\\n    }\\n\\n    .p-inputgroupaddon:first-child,\\n    .p-inputgroup > .p-component:first-child,\\n    .p-inputgroup > .p-inputwrapper:first-child > .p-component,\\n    .p-inputgroup > .p-iconfield:first-child > .p-component,\\n    .p-inputgroup > .p-floatlabel:first-child > .p-component,\\n    .p-inputgroup > .p-floatlabel:first-child > .p-inputwrapper > .p-component,\\n    .p-inputgroup > .p-iftalabel:first-child > .p-component,\\n    .p-inputgroup > .p-iftalabel:first-child > .p-inputwrapper > .p-component {\\n        border-start-start-radius: dt('inputgroup.addon.border.radius');\\n        border-end-start-radius: dt('inputgroup.addon.border.radius');\\n    }\\n\\n    .p-inputgroupaddon:last-child,\\n    .p-inputgroup > .p-component:last-child,\\n    .p-inputgroup > .p-inputwrapper:last-child > .p-component,\\n    .p-inputgroup > .p-iconfield:last-child > .p-component,\\n    .p-inputgroup > .p-floatlabel:last-child > .p-component,\\n    .p-inputgroup > .p-floatlabel:last-child > .p-inputwrapper > .p-component,\\n    .p-inputgroup > .p-iftalabel:last-child > .p-component,\\n    .p-inputgroup > .p-iftalabel:last-child > .p-inputwrapper > .p-component {\\n        border-start-end-radius: dt('inputgroup.addon.border.radius');\\n        border-end-end-radius: dt('inputgroup.addon.border.radius');\\n    }\\n\\n    .p-inputgroup .p-component:focus,\\n    .p-inputgroup .p-component.p-focus,\\n    .p-inputgroup .p-inputwrapper-focus,\\n    .p-inputgroup .p-component:focus ~ label,\\n    .p-inputgroup .p-component.p-focus ~ label,\\n    .p-inputgroup .p-inputwrapper-focus ~ label {\\n        z-index: 1;\\n    }\\n\\n    .p-inputgroup > .p-button:not(.p-button-icon-only) {\\n        width: auto;\\n    }\\n\\n    .p-inputgroup .p-iconfield + .p-iconfield .p-inputtext {\\n        border-inline-start: 0;\\n    }\\n\";export{style};//# sourceMappingURL=index.mjs.map","import { style } from '@primeuix/styles/inputgroup';\nimport BaseStyle from '@primevue/core/base/style';\n\nvar classes = {\n  root: 'p-inputgroup'\n};\nvar InputGroupStyle = BaseStyle.extend({\n  name: 'inputgroup',\n  style: style,\n  classes: classes\n});\n\nexport { InputGroupStyle as default };\n//# sourceMappingURL=index.mjs.map\n","import BaseComponent from '@primevue/core/basecomponent';\nimport InputGroupStyle from 'primevue/inputgroup/style';\nimport { createElementBlock, openBlock, mergeProps, renderSlot } from 'vue';\n\nvar script$1 = {\n  name: 'BaseInputGroup',\n  \"extends\": BaseComponent,\n  style: InputGroupStyle,\n  provide: function provide() {\n    return {\n      $pcInputGroup: this,\n      $parentInstance: this\n    };\n  }\n};\n\nvar script = {\n  name: 'InputGroup',\n  \"extends\": script$1,\n  inheritAttrs: false\n};\n\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  return openBlock(), createElementBlock(\"div\", mergeProps({\n    \"class\": _ctx.cx('root')\n  }, _ctx.ptmi('root')), [renderSlot(_ctx.$slots, \"default\")], 16);\n}\n\nscript.render = render;\n\nexport { script as default };\n//# sourceMappingURL=index.mjs.map\n","import { computed, toValue } from 'vue';\nimport { useQuery } from '@tanstack/vue-query';\nimport _isEmpty from 'lodash/isEmpty';\nimport { computeQueryOverrides } from '@/helpers/computeQueryOverrides';\nimport { administrationPageFetcher } from '@/helpers/query/administrations';\nimport useUserClaimsQuery from '@/composables/queries/useUserClaimsQuery';\nimport useUserType from '@/composables/useUserType';\nimport { ADMINISTRATIONS_LIST_QUERY_KEY } from '@/constants/queryKeys';\n\n/**\n * Administrations list query.\n *\n * @param {ref<String>} orderBy – A Vue ref containing the field to order the query by.\n * @param {ref<Boolean>} [testAdministrationsOnly=false] – A Vue ref containing whether to fetch only test data.\n * @param {QueryOptions|undefined} queryOptions – Optional TanStack query options.\n * @returns {UseQueryResult} The TanStack query result.\n */\nconst useAdministrationsListQuery = (\n  orderBy,\n  testAdministrationsOnly = false,\n  queryOptions?: UseQueryOptions,\n): UseQueryReturnType => {\n  // Fetch the user claims.\n  const { data: userClaims } = useUserClaimsQuery({\n    enabled: queryOptions?.enabled ?? true,\n  });\n\n  // Get admin status and administation orgs.\n  const { isSuperAdmin } = useUserType(userClaims);\n  const exhaustiveAdministrationOrgs = computed(() => userClaims.value?.claims?.adminOrgs);\n\n  // Ensure all necessary data is loaded before enabling the query.\n  const claimsLoaded = computed(() => !_isEmpty(userClaims?.value?.claims));\n  const queryConditions = [() => claimsLoaded.value];\n  const { isQueryEnabled, options } = computeQueryOverrides(queryConditions, queryOptions);\n\n  // Build query key, based on whether or not we only fetch test administrations.\n  const queryKey = computed(() =>\n    toValue(testAdministrationsOnly)\n      ? [ADMINISTRATIONS_LIST_QUERY_KEY, 'test-data', orderBy]\n      : [ADMINISTRATIONS_LIST_QUERY_KEY, orderBy],\n  );\n\n  return useQuery({\n    queryKey,\n    queryFn: async () => {\n      const result = await administrationPageFetcher(isSuperAdmin, exhaustiveAdministrationOrgs, testAdministrationsOnly, orderBy);\n      return result.sortedAdministrations;\n    },\n    enabled: isQueryEnabled,\n    ...options,\n  });\n};\n\n/**\n * Full administrations list query that returns both sorted and full administrations.\n *\n * @param {ref<String>} orderBy – A Vue ref containing the field to order the query by.\n * @param {ref<Boolean>} [testAdministrationsOnly=false] – A Vue ref containing whether to fetch only test data.\n * @param {QueryOptions|undefined} queryOptions – Optional TanStack query options.\n * @returns {UseQueryResult} The TanStack query result with both sortedAdministrations and administrations.\n */\nconst useFullAdministrationsListQuery = (\n  orderBy,\n  testAdministrationsOnly = false,\n  queryOptions?: UseQueryOptions,\n): UseQueryReturnType => {\n  // Fetch the user claims.\n  const { data: userClaims } = useUserClaimsQuery({\n    enabled: queryOptions?.enabled ?? true,\n  });\n\n  // Get admin status and administation orgs.\n  const { isSuperAdmin } = useUserType(userClaims);\n  const exhaustiveAdministrationOrgs = computed(() => userClaims.value?.claims?.adminOrgs);\n\n  // Ensure all necessary data is loaded before enabling the query.\n  const claimsLoaded = computed(() => !_isEmpty(userClaims?.value?.claims));\n  const queryConditions = [() => claimsLoaded.value];\n  const { isQueryEnabled, options } = computeQueryOverrides(queryConditions, queryOptions);\n\n  // Build query key, based on whether or not we only fetch test administrations.\n  const queryKey = computed(() =>\n    toValue(testAdministrationsOnly)\n      ? [ADMINISTRATIONS_LIST_QUERY_KEY, 'full', 'test-data', orderBy]\n      : [ADMINISTRATIONS_LIST_QUERY_KEY, 'full', orderBy],\n  );\n\n  return useQuery({\n    queryKey,\n    queryFn: () =>\n      administrationPageFetcher(isSuperAdmin, exhaustiveAdministrationOrgs, testAdministrationsOnly, orderBy),\n    enabled: isQueryEnabled,\n    ...options,\n  });\n};\n\nexport default useAdministrationsListQuery;\nexport { useFullAdministrationsListQuery };\n"],"names":["style","classes","InputGroupStyle","BaseStyle","script$1","BaseComponent","script","render","_ctx","_cache","$props","$setup","$data","$options","openBlock","createElementBlock","mergeProps","renderSlot","useAdministrationsListQuery","orderBy","testAdministrationsOnly","queryOptions","userClaims","useUserClaimsQuery","isSuperAdmin","useUserType","exhaustiveAdministrationOrgs","computed","_b","_a","claimsLoaded","_isEmpty","queryConditions","isQueryEnabled","options","computeQueryOverrides","queryKey","toValue","ADMINISTRATIONS_LIST_QUERY_KEY","useQuery","administrationPageFetcher","useFullAdministrationsListQuery"],"mappings":"ujcACR,EACIC,EAAkBC,EAAU,OAAO,CACrC,KAAM,aACN,MAAOH,EACP,QAASC,CACX,CAAC,ECNGG,EAAW,CACb,KAAM,iBACN,QAAWC,EACX,MAAOH,EACP,QAAS,UAAmB,CAC1B,MAAO,CACL,cAAe,KACf,gBAAiB,IACvB,CACE,CACF,EAEII,EAAS,CACX,KAAM,aACN,QAAWF,EACX,aAAc,EAChB,EAEA,SAASG,EAAOC,EAAMC,EAAQC,EAAQC,EAAQC,EAAOC,EAAU,CAC7D,OAAOC,EAAS,EAAIC,EAAmB,MAAOC,EAAW,CACvD,MAASR,EAAK,GAAG,MAAM,CAC3B,EAAKA,EAAK,KAAK,MAAM,CAAC,EAAG,CAACS,EAAWT,EAAK,OAAQ,SAAS,CAAC,EAAG,EAAE,CACjE,CAEAF,EAAO,OAASC,ECXhB,MAAMW,EAA8B,CAClCC,EACAC,EAA0B,GAC1BC,IACuB,CAEvB,KAAM,CAAE,KAAMC,CAAA,EAAeC,EAAmB,CAC9C,SAASF,GAAA,YAAAA,EAAc,UAAW,EAAA,CACnC,EAGK,CAAE,aAAAG,CAAA,EAAiBC,EAAYH,CAAU,EACzCI,EAA+BC,EAAS,IAAA,SAAM,OAAAC,GAAAC,EAAAP,EAAW,QAAX,YAAAO,EAAkB,SAAlB,YAAAD,EAA0B,UAAS,EAGjFE,EAAeH,EAAS,IAAA,OAAM,OAACI,GAASF,EAAAP,GAAA,YAAAA,EAAY,QAAZ,YAAAO,EAAmB,MAAM,EAAC,EAClEG,EAAkB,CAAC,IAAMF,EAAa,KAAK,EAC3C,CAAE,eAAAG,EAAgB,QAAAC,CAAA,EAAYC,EAAsBH,EAAiBX,CAAY,EAGjFe,EAAWT,EAAS,IACxBU,EAAQjB,CAAuB,EAC3B,CAACkB,EAAgC,YAAanB,CAAO,EACrD,CAACmB,EAAgCnB,CAAO,CAAA,EAG9C,OAAOoB,EAAS,CACd,SAAAH,EACA,QAAS,UACQ,MAAMI,EAA0BhB,EAAcE,EAA8BN,EAAyBD,CAAO,GAC7G,sBAEhB,QAASc,EACT,GAAGC,CAAA,CACJ,CACH,EAUMO,EAAkC,CACtCtB,EACAC,EAA0B,GAC1BC,IACuB,CAEvB,KAAM,CAAE,KAAMC,CAAA,EAAeC,EAAmB,CAC9C,SAASF,GAAA,YAAAA,EAAc,UAAW,EAAA,CACnC,EAGK,CAAE,aAAAG,CAAA,EAAiBC,EAAYH,CAAU,EACzCI,EAA+BC,EAAS,IAAA,SAAM,OAAAC,GAAAC,EAAAP,EAAW,QAAX,YAAAO,EAAkB,SAAlB,YAAAD,EAA0B,UAAS,EAGjFE,EAAeH,EAAS,IAAA,OAAM,OAACI,GAASF,EAAAP,GAAA,YAAAA,EAAY,QAAZ,YAAAO,EAAmB,MAAM,EAAC,EAClEG,EAAkB,CAAC,IAAMF,EAAa,KAAK,EAC3C,CAAE,eAAAG,EAAgB,QAAAC,CAAA,EAAYC,EAAsBH,EAAiBX,CAAY,EAGjFe,EAAWT,EAAS,IACxBU,EAAQjB,CAAuB,EAC3B,CAACkB,EAAgC,OAAQ,YAAanB,CAAO,EAC7D,CAACmB,EAAgC,OAAQnB,CAAO,CAAA,EAGtD,OAAOoB,EAAS,CACd,SAAAH,EACA,QAAS,IACPI,EAA0BhB,EAAcE,EAA8BN,EAAyBD,CAAO,EACxG,QAASc,EACT,GAAGC,CAAA,CACJ,CACH","x_google_ignoreList":[0,1,2]}