{"version":3,"file":"index.browser.min.js","sources":["../src/index.ts"],"sourcesContent":["import interact from \"interactjs\";\nimport { JsPsych, JsPsychPlugin, ParameterType, TrialType } from \"jspsych\";\n\nconst info = <const>{\n  name: \"html-swipe-response\",\n  parameters: {\n    /** The HTML string to be displayed. */\n    stimulus: {\n      type: ParameterType.HTML_STRING,\n      pretty_name: \"Stimulus\",\n      default: undefined,\n    },\n    /** Array containing the label(s) for the button(s). */\n    button_choices: {\n      type: ParameterType.STRING,\n      pretty_name: \"Button Choices\",\n      default: [],\n      array: true,\n    },\n    /** Array containing the key(s) the subject is allowed to press to respond to the stimulus. */\n    keyboard_choices: {\n      type: ParameterType.KEYS,\n      pretty_name: \"Keyboard Choices\",\n      default: [\"ArrowLeft\", \"ArrowRight\"],\n    },\n    /** The HTML for creating button. Can create own style. Use the \"%choice%\" string to indicate where the label from the choices parameter should be inserted. */\n    button_html: {\n      type: ParameterType.HTML_STRING,\n      pretty_name: \"Button HTML\",\n      default: '<button class=\"jspsych-btn\">%choice%</button>',\n      array: true,\n    },\n    /** Any content here will be displayed below the stimulus. */\n    prompt: {\n      type: ParameterType.HTML_STRING,\n      pretty_name: \"Prompt\",\n      default: null,\n    },\n    /** How long to show the stimulus. */\n    stimulus_duration: {\n      type: ParameterType.INT,\n      pretty_name: \"Stimulus duration\",\n      default: null,\n    },\n    /** How long to show trial before it ends. */\n    trial_duration: {\n      type: ParameterType.INT,\n      pretty_name: \"Trial duration\",\n      default: null,\n    },\n    /** The vertical margin of the button. */\n    margin_vertical: {\n      type: ParameterType.STRING,\n      pretty_name: \"Margin vertical\",\n      default: \"0px\",\n    },\n    /** The horizontal margin of the button. */\n    margin_horizontal: {\n      type: ParameterType.STRING,\n      pretty_name: \"Margin horizontal\",\n      default: \"8px\",\n    },\n    /** If true, trial will end when subject makes a response. */\n    response_ends_trial: {\n      type: ParameterType.BOOL,\n      pretty_name: \"Response ends trial\",\n      default: true,\n    },\n    /** How far away from the center should the subject have to swipe for a\n     * left/right response to be recorded. */\n    swipe_threshold: {\n      type: ParameterType.INT,\n      pretty_name: \"Swipe translation threshold\",\n      default: 20,\n    },\n    /** The offscreen coordinate for the swipe animation */\n    swipe_offscreen_coordinate: {\n      type: ParameterType.INT,\n      pretty_name: \"Swipe offscreen coordinate\",\n      default: 1000,\n    },\n    /** How much should the swipe animation rotate the stimulus */\n    swipe_animation_max_rotation: {\n      type: ParameterType.INT,\n      pretty_name: \"Swipe animation max rotation\",\n      default: 20,\n    },\n    /** How long should the swipe animation last in milliseconds. Set this to\n     * zero to disable the animation. This will not be included in the reaction\n     * time. */\n    swipe_animation_duration: {\n      type: ParameterType.INT,\n      pretty_name: \"Swipe animation duration (ms)\",\n      default: 250,\n    },\n  },\n};\n\ntype Info = typeof info;\n\n/**\n * **html-swipe-response**\n * jsPsych plugin for displaying a stimulus and getting a swipe response\n * @author Adam Richie-Halford\n * @see {@link https://www.jspsych.org/plugins/jspsych-html-swipe-response/ html-swipe-response plugin documentation on jspsych.org}\n */\nclass HtmlSwipeResponsePlugin implements JsPsychPlugin<Info> {\n  static info = info;\n\n  constructor(private jsPsych: JsPsych) {}\n\n  trial(display_element: HTMLElement, trial: TrialType<Info>) {\n    // display stimulus\n    let html =\n      '<div id=\"jspsych-html-swipe-response-stimulus-container\"><div id=\"jspsych-html-swipe-response-stimulus\">' +\n      trial.stimulus +\n      \"</div></div>\";\n\n    //display buttons\n    var buttons = [];\n    if (Array.isArray(trial.button_html)) {\n      if (trial.button_html.length == trial.button_choices.length) {\n        buttons = trial.button_html;\n      } else {\n        console.error(\n          \"Error in html-swipe-response plugin. The length of the button_html array does not equal the length of the button_choices array\"\n        );\n      }\n    } else {\n      for (var i = 0; i < trial.button_choices.length; i++) {\n        buttons.push(trial.button_html);\n      }\n    }\n\n    html += '<div id=\"jspsych-html-swipe-response-btngroup\">';\n    for (var i = 0; i < trial.button_choices.length; i++) {\n      var str = buttons[i].replace(/%choice%/g, trial.button_choices[i]);\n      html +=\n        '<div class=\"jspsych-html-swipe-response-button\" style=\"display: inline-block; margin:' +\n        trial.margin_vertical +\n        \" \" +\n        trial.margin_horizontal +\n        '\" id=\"jspsych-html-swipe-response-button-' +\n        i +\n        '\" data-choice=\"' +\n        i +\n        '\">' +\n        str +\n        \"</div>\";\n    }\n    html += \"</div>\";\n\n    // add prompt\n    if (trial.prompt !== null) {\n      html += trial.prompt;\n    }\n\n    // draw\n    display_element.innerHTML = html;\n\n    // store response\n    let response = {\n      rt: null,\n      key: null,\n      button: null,\n      swipe: null,\n      source: null,\n    };\n\n    // References to container and stimulus\n    const container_div = document.getElementById(\"jspsych-html-swipe-response-stimulus-container\");\n    const stimulus_div = document.getElementById(\"jspsych-html-swipe-response-stimulus\");\n\n    let position = {\n      x: 0,\n      y: 0,\n      rotation: 0,\n    };\n\n    const setPosition = (coordinates) => {\n      const { x = 0, y = 0, rotation = 0 } = coordinates;\n      position = { x, y, rotation };\n      container_div.style.transform = `translate3D(${x}px, ${y}px, 0)`;\n      stimulus_div.style.transform = `translate3D(${x}px, ${y}px, 0) rotate(${rotation}deg)`;\n    };\n\n    // Reset the position of the stimulus and container\n    const resetPosition = async () => {\n      for (const div of [container_div, stimulus_div]) {\n        div.style.transition = `${trial.swipe_animation_duration / 1000}s ease-in-out, ${\n          trial.swipe_animation_duration / 1000\n        }s ease-in`;\n      }\n      setPosition({ x: 0, y: 0, rotation: 0 });\n      for (const div of [container_div, stimulus_div]) {\n        div.style.transition = null;\n      }\n    };\n\n    // Handle drag movement of the stimulus and container together\n    const dragMoveListener = (event) => {\n      const x = position.x + event.delta.x;\n      const y = position.y + event.delta.y;\n      let rotation = 0;\n\n      if (x > 0) {\n        rotation = Math.min(trial.swipe_animation_max_rotation, x / 4);\n      } else {\n        rotation = Math.max(-trial.swipe_animation_max_rotation, x / 4);\n      }\n\n      setPosition({ x: x, y: y, rotation });\n    };\n\n    // start time\n    const start_time = performance.now();\n\n    // add event listeners to buttons\n    for (var i = 0; i < trial.button_choices.length; i++) {\n      display_element\n        .querySelector(\"#jspsych-html-swipe-response-button-\" + i)\n        .addEventListener(\"click\", (e) => {\n          var btn_el = e.currentTarget as HTMLButtonElement;\n          var choice = btn_el.getAttribute(\"data-choice\"); // don't use dataset for jsdom compatibility\n          after_button_response(choice);\n        });\n    }\n\n    const sendCardToLeft = async () => {\n      for (const div of [container_div, stimulus_div]) {\n        div.style.transition = `${trial.swipe_animation_duration / 1000}s ease-in-out, ${\n          trial.swipe_animation_duration / 1000\n        }s ease-in`;\n      }\n      setPosition({\n        x: -trial.swipe_offscreen_coordinate,\n        y: position.y,\n        rotation: -trial.swipe_animation_max_rotation,\n      });\n    };\n\n    const sendCardToRight = async () => {\n      for (const div of [container_div, stimulus_div]) {\n        div.style.transition = `${trial.swipe_animation_duration / 1000}s ease-in-out, ${\n          trial.swipe_animation_duration / 1000\n        }s ease-in`;\n      }\n      setPosition({\n        x: trial.swipe_offscreen_coordinate,\n        y: position.y,\n        rotation: trial.swipe_animation_max_rotation,\n      });\n    };\n\n    // after a valid response, the stimulus will have the CSS class 'responded'\n    // which can be used to provide visual feedback that a response was recorded\n    const toggle_css_respond = (idx: number) => {\n      //responded class for stimulus\n      display_element.querySelector(\"#jspsych-html-swipe-response-stimulus\").className +=\n        \" responded\";\n\n      //responded class for button\n      document\n        .querySelectorAll(`#jspsych-html-swipe-response-button-${idx} > button`)\n        .forEach((element) => {\n          element.className += \" responded\";\n        });\n    };\n\n    // disable all the buttons after a response\n    const disable_buttons = () => {\n      document.querySelectorAll(\".jspsych-html-swipe-response-button button\").forEach((element) => {\n        element.setAttribute(\"disabled\", \"disabled\");\n      });\n    };\n\n    // function to handle swipe responses by the subject\n    const after_swipe_response = (left_or_right) => {\n      if (left_or_right !== null) {\n        // measure rt\n        const end_time = performance.now();\n        const rt = Math.round(end_time - start_time);\n\n        response = {\n          rt: rt,\n          key: null,\n          button: null,\n          swipe: left_or_right,\n          source: \"swipe\",\n        };\n\n        const idx = left_or_right === \"left\" ? 0 : 1;\n        toggle_css_respond(idx);\n        disable_buttons();\n      }\n\n      if (trial.response_ends_trial) {\n        if (trial.swipe_animation_duration > 0) {\n          this.jsPsych.pluginAPI.setTimeout(end_trial, trial.swipe_animation_duration);\n        } else {\n          end_trial();\n        }\n      }\n    };\n\n    for (const div of [stimulus_div, container_div]) {\n      interact(div).draggable({\n        inertia: false,\n        autoScroll: true,\n        modifiers: [\n          interact.modifiers.restrictRect({\n            endOnly: true,\n          }),\n        ],\n        listeners: {\n          move: dragMoveListener,\n          end: () => {\n            if (position.x < -trial.swipe_threshold) {\n              sendCardToLeft();\n              after_swipe_response(\"left\");\n            } else if (position.x > trial.swipe_threshold) {\n              sendCardToRight();\n              after_swipe_response(\"right\");\n            } else {\n              resetPosition();\n            }\n          },\n        },\n      });\n    }\n\n    // function to handle responses by the subject\n    const after_keyboard_response = (info) => {\n      // only record the first response\n      if (response.key == null) {\n        response = {\n          source: \"keyboard\",\n          button: null,\n          swipe: null,\n          ...info,\n        };\n      }\n\n      if (response.key.toLowerCase() == trial.keyboard_choices[0].toLowerCase()) {\n        toggle_css_respond(0);\n        sendCardToLeft();\n      } else if (response.key.toLowerCase() == trial.keyboard_choices[1].toLowerCase()) {\n        toggle_css_respond(1);\n        sendCardToRight();\n      }\n      disable_buttons();\n\n      if (trial.response_ends_trial) {\n        if (trial.swipe_animation_duration > 0) {\n          this.jsPsych.pluginAPI.setTimeout(end_trial, trial.swipe_animation_duration);\n        } else {\n          end_trial();\n        }\n      }\n    };\n\n    // function to handle responses by the subject\n    const after_button_response = (choice) => {\n      // measure rt\n      var end_time = performance.now();\n      var rt = Math.round(end_time - start_time);\n      response.button = parseInt(choice);\n      response.rt = rt;\n      response.source = \"button\";\n\n      toggle_css_respond(parseInt(choice));\n      disable_buttons();\n\n      if (response.button === 0) {\n        sendCardToLeft();\n      } else if (response.button === 1) {\n        sendCardToRight();\n      }\n\n      if (trial.response_ends_trial) {\n        if (trial.swipe_animation_duration > 0) {\n          this.jsPsych.pluginAPI.setTimeout(end_trial, trial.swipe_animation_duration);\n        } else {\n          end_trial();\n        }\n      }\n    };\n\n    let keyboardListener;\n\n    // start the response listener\n    if (trial.keyboard_choices != \"NO_KEYS\") {\n      keyboardListener = this.jsPsych.pluginAPI.getKeyboardResponse({\n        callback_function: after_keyboard_response,\n        valid_responses: trial.keyboard_choices,\n        rt_method: \"performance\",\n        persist: false,\n        allow_held_key: false,\n      });\n    }\n\n    // function to end trial when it is time\n    const end_trial = () => {\n      // kill any remaining setTimeout handlers\n      this.jsPsych.pluginAPI.clearAllTimeouts();\n\n      // kill keyboard listeners\n      if (typeof keyboardListener !== \"undefined\") {\n        this.jsPsych.pluginAPI.cancelKeyboardResponse(keyboardListener);\n      }\n\n      for (const div of [stimulus_div, container_div]) {\n        interact(div).unset();\n      }\n\n      // gather the data to store for the trial\n      const trial_data = {\n        rt: response.rt,\n        stimulus: trial.stimulus,\n        button_response: response.button,\n        keyboard_response: response.key,\n        swipe_response: response.swipe,\n        response_source: response.source,\n      };\n\n      // clear the display\n      display_element.innerHTML = \"\";\n\n      // move on to the next trial\n      this.jsPsych.finishTrial(trial_data);\n    };\n\n    // hide stimulus if stimulus_duration is set\n    if (trial.stimulus_duration !== null) {\n      this.jsPsych.pluginAPI.setTimeout(() => {\n        display_element.querySelector<HTMLElement>(\n          \"#jspsych-html-swipe-response-stimulus\"\n        ).style.visibility = \"hidden\";\n      }, trial.stimulus_duration);\n    }\n\n    // end trial if trial_duration is set\n    if (trial.trial_duration !== null) {\n      this.jsPsych.pluginAPI.setTimeout(end_trial, trial.trial_duration);\n    }\n  }\n\n  simulate(\n    trial: TrialType<Info>,\n    simulation_mode,\n    simulation_options: any,\n    load_callback: () => void\n  ) {\n    if (simulation_mode == \"data-only\") {\n      load_callback();\n      this.simulate_data_only(trial, simulation_options);\n    }\n    if (simulation_mode == \"visual\") {\n      this.simulate_visual(trial, simulation_options, load_callback);\n    }\n  }\n\n  private create_simulation_data(trial: TrialType<Info>, simulation_options) {\n    const keyboard_data = {\n      stimulus: trial.stimulus,\n      rt: this.jsPsych.randomization.sampleExGaussian(500, 50, 1 / 150, true),\n      button_response: null,\n      keyboard_response: this.jsPsych.pluginAPI.getValidKey(trial.keyboard_choices),\n      swipe_response: null,\n      response_source: \"keyboard\",\n    };\n\n    const swipe_data = {\n      stimulus: trial.stimulus,\n      rt: this.jsPsych.randomization.sampleExGaussian(500, 50, 1 / 150, true),\n      button_response: null,\n      swipe_response: Math.random() < 0.5 ? \"left\" : \"right\",\n      keyboard_response: null,\n      response_source: \"swipe\",\n    };\n\n    const button_data = {\n      stimulus: trial.stimulus,\n      rt: this.jsPsych.randomization.sampleExGaussian(500, 50, 1 / 150, true),\n      button_response: this.jsPsych.randomization.randomInt(0, trial.button_choices.length - 1),\n      swipe_response: null,\n      keyboard_response: null,\n      response_source: \"button\",\n    };\n\n    let default_data;\n\n    if (Math.random() < 0.33) {\n      default_data = keyboard_data;\n    } else if (Math.random() < 0.5) {\n      default_data = swipe_data;\n    } else {\n      default_data = button_data;\n    }\n\n    const data = this.jsPsych.pluginAPI.mergeSimulationData(default_data, simulation_options);\n\n    this.jsPsych.pluginAPI.ensureSimulationDataConsistency(trial, data);\n\n    return data;\n  }\n\n  private simulate_data_only(trial: TrialType<Info>, simulation_options) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    this.jsPsych.finishTrial(data);\n  }\n\n  private simulate_visual(trial: TrialType<Info>, simulation_options, load_callback: () => void) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    const display_element = this.jsPsych.getDisplayElement();\n\n    this.trial(display_element, trial);\n    load_callback();\n\n    if (data.rt !== null) {\n      if (data.swipe_response !== null) {\n        const test_stimulus_div = document.getElementById(\"jspsych-html-swipe-response-stimulus\");\n\n        let pageX = trial.swipe_threshold * 5;\n        if (data.swipe_response === \"left\") {\n          pageX *= -1;\n        }\n\n        setTimeout(() => {\n          interact(test_stimulus_div).fire({\n            type: \"dragstart\",\n            target: test_stimulus_div,\n          });\n\n          interact(test_stimulus_div).fire({\n            type: \"dragmove\",\n            target: test_stimulus_div,\n            delta: { x: pageX, y: 0 },\n          });\n\n          interact(test_stimulus_div).fire({\n            type: \"dragend\",\n            target: test_stimulus_div,\n            delta: { x: pageX, y: 0 },\n          });\n        }, data.rt);\n      } else if (data.keyboard_response !== null) {\n        this.jsPsych.pluginAPI.pressKey(data.keyboard_response, data.rt);\n      } else {\n        this.jsPsych.pluginAPI.clickTarget(\n          display_element.querySelector(`div[data-choice=\"${data.button_response}\"] button`),\n          data.rt\n        );\n      }\n    }\n  }\n}\n\nexport default HtmlSwipeResponsePlugin;\n"],"names":["info","name","parameters","stimulus","type","ParameterType","HTML_STRING","pretty_name","default","undefined","button_choices","STRING","array","keyboard_choices","KEYS","button_html","prompt","stimulus_duration","INT","trial_duration","margin_vertical","margin_horizontal","response_ends_trial","BOOL","swipe_threshold","swipe_offscreen_coordinate","swipe_animation_max_rotation","swipe_animation_duration","HtmlSwipeResponsePlugin","jsPsych","_classCallCheck","this","key","value","display_element","trial","_this","html","buttons","Array","isArray","length","console","error","i","push","str","replace","innerHTML","response","rt","button","swipe","source","container_div","document","getElementById","stimulus_div","position","x","y","rotation","setPosition","coordinates","_coordinates$x","_coordinates$y","_coordinates$rotation","style","transform","concat","dragMoveListener","event","delta","Math","min","max","start_time","performance","now","querySelector","addEventListener","e","choice","currentTarget","getAttribute","after_button_response","sendCardToLeft","__awaiter","_regeneratorRuntime","mark","_callee2","_i3","_arr3","wrap","_context2","prev","next","transition","stop","sendCardToRight","_callee3","_i4","_arr4","_context3","toggle_css_respond","idx","className","querySelectorAll","forEach","element","disable_buttons","setAttribute","after_swipe_response","left_or_right","end_time","round","pluginAPI","setTimeout","end_trial","_i5","_arr5","interact","draggable","inertia","autoScroll","modifiers","restrictRect","endOnly","listeners","move","end","_callee","_i","_arr","_i2","_arr2","_context","keyboardListener","parseInt","getKeyboardResponse","callback_function","Object","assign","toLowerCase","valid_responses","rt_method","persist","allow_held_key","clearAllTimeouts","cancelKeyboardResponse","_i6","_arr6","unset","trial_data","button_response","keyboard_response","swipe_response","response_source","finishTrial","visibility","simulation_mode","simulation_options","load_callback","simulate_data_only","simulate_visual","default_data","keyboard_data","randomization","sampleExGaussian","getValidKey","swipe_data","random","button_data","randomInt","data","mergeSimulationData","ensureSimulationDataConsistency","create_simulation_data","getDisplayElement","test_stimulus_div","pageX","fire","target","pressKey","clickTarget"],"mappings":"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"}