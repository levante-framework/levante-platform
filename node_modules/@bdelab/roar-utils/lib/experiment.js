function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
function _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0) { ; } } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
import jsPsychPreload from '@jspsych/plugin-preload';
import path from 'path-browserify';
import { getAssetType, getDevice, getFormattedURL, getLanguage, camelize } from './utils';

/**
 * Generates an asset object from a given JSON object, bucket URI and language.
 *
 * @param {object} json - The JSON object containing data about assets.
 * It may contain properties: 'preload' and 'default', each having their own structure.
 * @param {string} bucketURI - The bucket URI where the assets are stored.
 * @param {string} language - (Optional) The language identifier as a ISO 639-1 code.
 * Ex. 'en' for English
 * @returns {object} assets - The generated asset object, structured as follows:
 * { images: {}, video: {}, audio: {} }. Each sub-object is a collection of assets
 * by type. Each asset key is a camelized file name, and the value is a formatted URL.
 *
 * @example
 *
 * JSON structure for an app that has multilingual and multidevice support
 *
 * const json = {
 *   "default": {
 *       "languageSpecific": {
 *           "device": ["image_asset2.png", "audio_asset2.mp3",,
 *           "shared": ["shared_video1.mp4",]
 *       },
 *       "shared": ["shared_image_asset2.png", "shared_audio_asset2.mp3"]
 *   }
 * };
 *
 * const bucketURI = 'https://storage.googleapis.com';
 * const language = 'en';
 *
 * generateAssetObject(json, bucketURI, language);
 *
 *  Outputs:
 *     {
 *       images: {
 *         imageAsset2: 'https://storage.googleapis.com/en/desktop/image_asset2.png',
 *         sharedImageAsset2: 'https://storage.googleapis.com/en/shared/shared_image_asset2.png',
 *       },
 *       video: {
 *         sharedVideo1: 'https://storage.googleapis.com/en/shared/shared_video1.mp4',
 *       },
 *       audio: {
 *         audioAsset2: 'https://storage.googleapis.com/en/desktop/audio_asset2.mp3',
 *         sharedAudioAsset2: 'https://storage.googleapis.com/shared/desktop/shared_audio_asset2.mp3'
 *       }
 *     }
 */

export function generateAssetObject(json, bucketURI, language) {
  var assets = {
    images: {},
    video: {},
    audio: {}
  };
  var lng = getLanguage(language);
  var device = getDevice();
  var handleAssets = function handleAssets(arr, type) {
    var nestedInLangSpecific = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    var isDefault = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
    arr.forEach(function (filePath) {
      var assetType = getAssetType(filePath);
      var parsedFileName = path.parse(filePath).name;
      var camelizedFileName = camelize(parsedFileName);
      var formattedURL = getFormattedURL(bucketURI, filePath, lng, device, type, nestedInLangSpecific, isDefault);
      assets[assetType][camelizedFileName] = formattedURL;
    });
  };
  var handleSharedAssets = function handleSharedAssets(sharedObject) {
    if (Array.isArray(sharedObject)) {
      handleAssets(sharedObject, 'shared');
    } else {
      Object.entries(sharedObject).forEach(function (_ref) {
        var _ref2 = _slicedToArray(_ref, 2),
          type = _ref2[0],
          filePaths = _ref2[1];
        var assetType = type === 'device' ? 'shared/device' : 'shared';
        handleAssets(filePaths, assetType);
      });
    }
  };
  var handleAssetsForAllTypes = function handleAssetsForAllTypes(object, isDefault) {
    Object.entries(object).forEach(function (_ref3) {
      var _ref4 = _slicedToArray(_ref3, 2),
        type = _ref4[0],
        filePaths = _ref4[1];
      handleAssets(filePaths, type, true, isDefault);
    });
  };
  var handleGroupAssets = function handleGroupAssets(groupObject) {
    var isDefault = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    // Handles the case where groupObject is an array.
    if (Array.isArray(groupObject)) {
      handleAssets(groupObject, 'default');
      return;
    }

    // Handles the case where groupObject is language-specific.
    if (groupObject.languageSpecific) {
      if (Array.isArray(groupObject.languageSpecific)) {
        handleAssets(groupObject.languageSpecific, 'languageSpecific');
      } else {
        handleAssetsForAllTypes(groupObject.languageSpecific, isDefault);
      }
    }

    // Handles the case where groupObject is device-specific.
    if (groupObject.device) {
      handleAssets(groupObject.device, 'device');
    }

    // Handles the case where groupObject is shared.
    if (groupObject.shared) {
      handleSharedAssets(groupObject.shared);
    }
  };
  if (json.preload) {
    Object.entries(json.preload).forEach(function (_ref5) {
      var _ref6 = _slicedToArray(_ref5, 2),
        groupObject = _ref6[1];
      handleGroupAssets(groupObject);
    });
  }
  if (json["default"]) {
    handleGroupAssets(json["default"], true);
  }
  return assets;
}

/**
 * Creates jsPsych preload trial(s) for a jsPsych experiment from a given JSON object,
 *  bucket URI, and language.
 *
 * @param {object} jsonData - The JSON object containing data about assets.
 * It may contain properties: 'preload' and 'default', each having their own structure.
 * @param {string} bucketURI - The bucket URI where the assets are stored.
 * @param {string} language - (Optional) The language identifier as a ISO 639-1 code.
 * Ex. 'en' for English
 * @returns {object} preloadTrials - The generated preload trials object,
 * structured as follows:
 *  - For each group (or 'default'), there's a key in the object.
 *  - Each value is an object with properties corresponding to jsPsych preload plugin
 *  parameters, and separate arrays for 'images', 'audio', and 'video' URLs.
 *
 * @example
 *
 * const jsonData = {
 *   preload: {
 *     image: ['file1.jpg', 'file2.jpg'],
 *     video: ['file1.mp4', 'file2.mp4'],
 *     audio: ['file1.mp3', 'file2.mp3']
 *   },
 *   default: {
 *     image: ['file3.jpg', 'file4.jpg'],
 *     video: ['file3.mp4', 'file4.mp4'],
 *     audio: ['file3.mp3', 'file4.mp3']
 *   }
 * };
 *
 *  const bucketURI = 'https://bucket.example.com';
 *  const language = 'en';
 *
 * createPreloadTrials(jsonData, bucketURI, language);
 *
 * // Outputs:
 * // {
 * //   default: {
 * //     type: jsPsychPreload,
 * //     message: 'The experiment is loading',
 * //     show_progress_bar: true,
 * //     continue_after_error: false,
 * //     error_message: '',
 * //     show_detailed_errors: true,
 * //     max_load_time: null,
 * //     on_error: null,
 * //     on_success: null,
 * //     images: ['https://bucket.example.com/en/file1.jpg', 'https://bucket.example.com/en/file2.jpg'],
 * //     video: [...],
 * //     audio: [...]
 * //   },
 * // }
 */

export function createPreloadTrials(jsonData, bucketURI, language) {
  var preloadTrials = {};
  var lng = getLanguage(language);
  var device = getDevice();
  function handleAssets(assets, group, type) {
    var nestedInLangSpecific = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
    var isDefault = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
    assets.forEach(function (filePath) {
      var assetType = getAssetType(filePath);
      var formattedURL = getFormattedURL(bucketURI, filePath, lng, device, type, nestedInLangSpecific, isDefault);

      // Initialize preloadTrials[group] if it does not exist
      if (!preloadTrials[group]) {
        preloadTrials[group] = {
          type: jsPsychPreload,
          message: 'The experiment is loading',
          show_progress_bar: true,
          continue_after_error: false,
          error_message: '',
          show_detailed_errors: true,
          max_load_time: null,
          on_error: null,
          on_success: null,
          images: [],
          audio: [],
          video: []
        };
      }

      // Add formattedURL to the corresponding array in preloadTrials[group]
      preloadTrials[group][assetType].push(formattedURL);
    });
  }

  // Extracted the common logic to handle assets for all types into a separate function.
  function handleAssetsForAllTypes(group, object, isDefault) {
    Object.entries(object).forEach(function (_ref7) {
      var _ref8 = _slicedToArray(_ref7, 2),
        type = _ref8[0],
        filePaths = _ref8[1];
      handleAssets(filePaths, group, type, true, isDefault);
    });
  }

  // Helper function to handle language specific assets.
  function handleLanguageSpecificAssets(group, languageSpecificObject, isDefault) {
    if (Array.isArray(languageSpecificObject)) {
      handleAssets(languageSpecificObject, group, 'languageSpecific');
    } else {
      handleAssetsForAllTypes(group, languageSpecificObject, isDefault);
    }
  }

  // Helper function to handle shared assets.
  function handleSharedAssets(group, sharedObject) {
    if (Array.isArray(sharedObject)) {
      handleAssets(sharedObject, group, 'shared');
    } else {
      Object.entries(sharedObject).forEach(function (_ref9) {
        var _ref10 = _slicedToArray(_ref9, 2),
          type = _ref10[0],
          filePaths = _ref10[1];
        var assetType = type === 'device' ? 'shared/device' : 'shared';
        handleAssets(filePaths, group, assetType);
      });
    }
  }
  function handleGroupAssets(group, groupObject) {
    var isDefault = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    // Handles the case where groupObject is an array.
    if (Array.isArray(groupObject)) {
      handleAssets(groupObject, group, 'default');
      return;
    }

    // Handles the case where groupObject is language-specific.
    if (groupObject.languageSpecific) {
      handleLanguageSpecificAssets(group, groupObject.languageSpecific, isDefault);
    }

    // Handles the case where groupObject is device-specific.
    if (groupObject.device) {
      handleAssets(groupObject.device, group, 'device');
    }

    // Handles the case where groupObject is shared.
    if (groupObject.shared) {
      handleSharedAssets(group, groupObject.shared);
    }
  }
  if (jsonData.preload) {
    Object.entries(jsonData.preload).forEach(function (_ref11) {
      var _ref12 = _slicedToArray(_ref11, 2),
        group = _ref12[0],
        groupObject = _ref12[1];
      handleGroupAssets(group, groupObject);
    });
  }
  if (jsonData["default"]) {
    handleGroupAssets('default', jsonData["default"], true);
  }
  return preloadTrials;
}