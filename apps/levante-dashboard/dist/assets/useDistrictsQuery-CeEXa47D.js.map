{"version":3,"file":"useDistrictsQuery-CeEXa47D.js","sources":["../../../../node_modules/lodash/_arrayAggregator.js","../../../../node_modules/lodash/_baseAggregator.js","../../../../node_modules/lodash/_createAggregator.js","../../../../node_modules/lodash/groupBy.js","../../src/helpers/hasArrayEntries.ts","../../src/composables/queries/useDistrictsQuery.ts"],"sourcesContent":["/**\n * A specialized version of `baseAggregator` for arrays.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} setter The function to set `accumulator` values.\n * @param {Function} iteratee The iteratee to transform keys.\n * @param {Object} accumulator The initial aggregated object.\n * @returns {Function} Returns `accumulator`.\n */\nfunction arrayAggregator(array, setter, iteratee, accumulator) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    var value = array[index];\n    setter(accumulator, value, iteratee(value), array);\n  }\n  return accumulator;\n}\n\nmodule.exports = arrayAggregator;\n","var baseEach = require('./_baseEach');\n\n/**\n * Aggregates elements of `collection` on `accumulator` with keys transformed\n * by `iteratee` and values set by `setter`.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} setter The function to set `accumulator` values.\n * @param {Function} iteratee The iteratee to transform keys.\n * @param {Object} accumulator The initial aggregated object.\n * @returns {Function} Returns `accumulator`.\n */\nfunction baseAggregator(collection, setter, iteratee, accumulator) {\n  baseEach(collection, function(value, key, collection) {\n    setter(accumulator, value, iteratee(value), collection);\n  });\n  return accumulator;\n}\n\nmodule.exports = baseAggregator;\n","var arrayAggregator = require('./_arrayAggregator'),\n    baseAggregator = require('./_baseAggregator'),\n    baseIteratee = require('./_baseIteratee'),\n    isArray = require('./isArray');\n\n/**\n * Creates a function like `_.groupBy`.\n *\n * @private\n * @param {Function} setter The function to set accumulator values.\n * @param {Function} [initializer] The accumulator object initializer.\n * @returns {Function} Returns the new aggregator function.\n */\nfunction createAggregator(setter, initializer) {\n  return function(collection, iteratee) {\n    var func = isArray(collection) ? arrayAggregator : baseAggregator,\n        accumulator = initializer ? initializer() : {};\n\n    return func(collection, setter, baseIteratee(iteratee, 2), accumulator);\n  };\n}\n\nmodule.exports = createAggregator;\n","var baseAssignValue = require('./_baseAssignValue'),\n    createAggregator = require('./_createAggregator');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Creates an object composed of keys generated from the results of running\n * each element of `collection` thru `iteratee`. The order of grouped values\n * is determined by the order they occur in `collection`. The corresponding\n * value of each key is an array of elements responsible for generating the\n * key. The iteratee is invoked with one argument: (value).\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [iteratee=_.identity] The iteratee to transform keys.\n * @returns {Object} Returns the composed aggregate object.\n * @example\n *\n * _.groupBy([6.1, 4.2, 6.3], Math.floor);\n * // => { '4': [4.2], '6': [6.1, 6.3] }\n *\n * // The `_.property` iteratee shorthand.\n * _.groupBy(['one', 'two', 'three'], 'length');\n * // => { '3': ['one', 'two'], '5': ['three'] }\n */\nvar groupBy = createAggregator(function(result, value, key) {\n  if (hasOwnProperty.call(result, key)) {\n    result[key].push(value);\n  } else {\n    baseAssignValue(result, key, [value]);\n  }\n});\n\nmodule.exports = groupBy;\n","import { toValue, MaybeRefOrGetter } from 'vue';\n\n/**\n * Test if an array has entries.\n *\n * @param {MaybeRefOrGetter<any[]>} array – The array (or ref/getter) to check for entries.\n * @returns {boolean} Whether the array has entries.\n */\nexport const hasArrayEntries = (array: MaybeRefOrGetter<any[]>): boolean => {\n  const value = toValue(array);\n  return Array.isArray(value) && value.length > 0;\n};\n","import { type MaybeRefOrGetter } from 'vue';\nimport { useQuery, type UseQueryReturnType, type UseQueryOptions } from '@tanstack/vue-query';\nimport { computeQueryOverrides } from '@/helpers/computeQueryOverrides';\nimport { hasArrayEntries } from '@/helpers/hasArrayEntries';\nimport { fetchDocumentsById } from '@/helpers/query/utils';\nimport { DISTRICTS_QUERY_KEY } from '@/constants/queryKeys';\nimport { FIRESTORE_COLLECTIONS } from '@/constants/firebase';\n\n/**\n * Districts query.\n *\n * @param {Array} districtIds – The array of class IDs to fetch.\n * @param {QueryOptions|undefined} queryOptions – Optional TanStack query options.\n * @returns {UseQueryResult} The TanStack query result.\n */\nconst useDistrictsQuery = (districtIds: string[], queryOptions?: UseQueryOptions): UseQueryReturnType => {\n  // Ensure all necessary data is available before enabling the query.\n  const conditions = [() => hasArrayEntries(districtIds)];\n  const { isQueryEnabled, options } = computeQueryOverrides(conditions, queryOptions);\n  return useQuery({\n    queryKey: [DISTRICTS_QUERY_KEY, districtIds],\n    queryFn: () => fetchDocumentsById(FIRESTORE_COLLECTIONS.DISTRICTS, districtIds),\n    enabled: isQueryEnabled,\n    ...options,\n  });\n};\n\nexport default useDistrictsQuery;\n"],"names":["arrayAggregator","array","setter","iteratee","accumulator","index","length","value","_arrayAggregator","baseEach","require$$0","baseAggregator","collection","key","_baseAggregator","require$$1","baseIteratee","require$$2","isArray","require$$3","createAggregator","initializer","func","_createAggregator","baseAssignValue","objectProto","hasOwnProperty","groupBy","result","groupBy_1","hasArrayEntries","toValue","useDistrictsQuery","districtIds","queryOptions","conditions","isQueryEnabled","options","computeQueryOverrides","useQuery","DISTRICTS_QUERY_KEY","fetchDocumentsById","FIRESTORE_COLLECTIONS"],"mappings":"qjBAUA,SAASA,EAAgBC,EAAOC,EAAQC,EAAUC,EAAa,CAI7D,QAHIC,EAAQ,GACRC,EAASL,GAAS,KAAO,EAAIA,EAAM,OAEhC,EAAEI,EAAQC,GAAQ,CACvB,IAAIC,EAAQN,EAAMI,CAAK,EACvBH,EAAOE,EAAaG,EAAOJ,EAASI,CAAK,EAAGN,CAAK,CACrD,CACE,OAAOG,CACT,CAEA,IAAAI,EAAiBR,ECrBbS,EAAWC,EAaf,SAASC,EAAeC,EAAYV,EAAQC,EAAUC,EAAa,CACjE,OAAAK,EAASG,EAAY,SAASL,EAAOM,EAAKD,EAAY,CACpDV,EAAOE,EAAaG,EAAOJ,EAASI,CAAK,EAAGK,CAAU,CAC1D,CAAG,EACMR,CACT,CAEA,IAAAU,EAAiBH,ECpBbX,EAAkBU,EAClBC,EAAiBI,EACjBC,EAAeC,EACfC,EAAUC,EAUd,SAASC,EAAiBlB,EAAQmB,EAAa,CAC7C,OAAO,SAAST,EAAYT,EAAU,CACpC,IAAImB,EAAOJ,EAAQN,CAAU,EAAIZ,EAAkBW,EAC/CP,EAAciB,EAAcA,EAAW,EAAK,CAAA,EAEhD,OAAOC,EAAKV,EAAYV,EAAQc,EAAab,CAAW,EAAGC,CAAW,CAC1E,CACA,CAEA,IAAAmB,EAAiBH,ECtBbI,EAAkBd,EAClBU,EAAmBL,EAGnBU,EAAc,OAAO,UAGrBC,EAAiBD,EAAY,eAyB7BE,EAAUP,EAAiB,SAASQ,EAAQrB,EAAOM,EAAK,CACtDa,EAAe,KAAKE,EAAQf,CAAG,EACjCe,EAAOf,CAAG,EAAE,KAAKN,CAAK,EAEtBiB,EAAgBI,EAAQf,EAAK,CAACN,CAAK,CAAC,CAExC,CAAC,EAEDsB,EAAiBF,eChCJG,EAAmB7B,GAA4C,CAC1E,MAAMM,EAAQwB,EAAQ9B,CAAK,EAC3B,OAAO,MAAM,QAAQM,CAAK,GAAKA,EAAM,OAAS,CAChD,ECIMyB,EAAoB,CAACC,EAAuBC,IAAuD,CAEvG,MAAMC,EAAa,CAAC,IAAML,EAAgBG,CAAW,CAAC,EAChD,CAAE,eAAAG,EAAgB,QAAAC,CAAA,EAAYC,EAAsBH,EAAYD,CAAY,EAClF,OAAOK,EAAS,CACd,SAAU,CAACC,EAAqBP,CAAW,EAC3C,QAAS,IAAMQ,EAAmBC,EAAsB,UAAWT,CAAW,EAC9E,QAASG,EACT,GAAGC,CAAA,CACJ,CACH","x_google_ignoreList":[0,1,2,3]}