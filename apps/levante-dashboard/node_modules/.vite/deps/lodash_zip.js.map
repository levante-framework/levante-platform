{
  "version": 3,
  "sources": ["../../../../../node_modules/lodash/unzip.js", "../../../../../node_modules/lodash/zip.js"],
  "sourcesContent": ["var arrayFilter = require('./_arrayFilter'),\n    arrayMap = require('./_arrayMap'),\n    baseProperty = require('./_baseProperty'),\n    baseTimes = require('./_baseTimes'),\n    isArrayLikeObject = require('./isArrayLikeObject');\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * This method is like `_.zip` except that it accepts an array of grouped\n * elements and creates an array regrouping the elements to their pre-zip\n * configuration.\n *\n * @static\n * @memberOf _\n * @since 1.2.0\n * @category Array\n * @param {Array} array The array of grouped elements to process.\n * @returns {Array} Returns the new array of regrouped elements.\n * @example\n *\n * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);\n * // => [['a', 1, true], ['b', 2, false]]\n *\n * _.unzip(zipped);\n * // => [['a', 'b'], [1, 2], [true, false]]\n */\nfunction unzip(array) {\n  if (!(array && array.length)) {\n    return [];\n  }\n  var length = 0;\n  array = arrayFilter(array, function(group) {\n    if (isArrayLikeObject(group)) {\n      length = nativeMax(group.length, length);\n      return true;\n    }\n  });\n  return baseTimes(length, function(index) {\n    return arrayMap(array, baseProperty(index));\n  });\n}\n\nmodule.exports = unzip;\n", "var baseRest = require('./_baseRest'),\n    unzip = require('./unzip');\n\n/**\n * Creates an array of grouped elements, the first of which contains the\n * first elements of the given arrays, the second of which contains the\n * second elements of the given arrays, and so on.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {...Array} [arrays] The arrays to process.\n * @returns {Array} Returns the new array of grouped elements.\n * @example\n *\n * _.zip(['a', 'b'], [1, 2], [true, false]);\n * // => [['a', 1, true], ['b', 2, false]]\n */\nvar zip = baseRest(unzip);\n\nmodule.exports = zip;\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA,QAAAA,eAAA;AAAA,QAAAA,eAAA;AAAA,QAAI,cAAc;AAAlB,QACI,WAAW;AADf,QAEI,eAAe;AAFnB,QAGI,YAAY;AAHhB,QAII,oBAAoB;AAGxB,QAAI,YAAY,KAAK;AAqBrB,aAAS,MAAM,OAAO;AACpB,UAAI,EAAE,SAAS,MAAM,SAAS;AAC5B,eAAO,CAAC;AAAA,MACV;AACA,UAAI,SAAS;AACb,cAAQ,YAAY,OAAO,SAAS,OAAO;AACzC,YAAI,kBAAkB,KAAK,GAAG;AAC5B,mBAAS,UAAU,MAAM,QAAQ,MAAM;AACvC,iBAAO;AAAA,QACT;AAAA,MACF,CAAC;AACD,aAAO,UAAU,QAAQ,SAAS,OAAO;AACvC,eAAO,SAAS,OAAO,aAAa,KAAK,CAAC;AAAA,MAC5C,CAAC;AAAA,IACH;AAEA,WAAO,UAAU;AAAA;AAAA;;;AC5CjB;AAAA;AAAA;AAAA,QAAAC,eAAA;AAAA,QAAAA,eAAA;AAAA,QAAI,WAAW;AAAf,QACI,QAAQ;AAkBZ,QAAI,MAAM,SAAS,KAAK;AAExB,WAAO,UAAU;AAAA;AAAA;",
  "names": ["import_dist", "import_dist"]
}
