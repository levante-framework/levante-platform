{"version":3,"file":"index.browser.min.js","sources":["../src/index.ts"],"sourcesContent":["import { JsPsych, JsPsychPlugin, ParameterType, TrialType } from \"jspsych\";\n\nconst info = <const>{\n  name: \"survey-multi-select\",\n  parameters: {\n    /** Array containing one or more objects with parameters for the question(s) that should be shown on the page. */\n    questions: {\n      type: ParameterType.COMPLEX,\n      array: true,\n      pretty_name: \"Questions\",\n      nested: {\n        /** Question prompt. */\n        prompt: {\n          type: ParameterType.HTML_STRING,\n          pretty_name: \"Prompt\",\n          default: undefined,\n        },\n        /** Array of multiple select options for this question. */\n        options: {\n          type: ParameterType.STRING,\n          pretty_name: \"Options\",\n          array: true,\n          default: undefined,\n        },\n        /** If true, then the question will be centered and options will be displayed horizontally. */\n        horizontal: {\n          type: ParameterType.BOOL,\n          pretty_name: \"Horizontal\",\n          default: false,\n        },\n        /** Whether or not a response to this question must be given in order to continue. */\n        required: {\n          type: ParameterType.BOOL,\n          pretty_name: \"Required\",\n          default: false,\n        },\n        /** Name of the question in the trial data. If no name is given, the questions are named Q0, Q1, etc. */\n        name: {\n          type: ParameterType.STRING,\n          pretty_name: \"Question Name\",\n          default: \"\",\n        },\n      },\n    },\n    /** If true, the order of the questions in the 'questions' array will be randomized. */\n    randomize_question_order: {\n      type: ParameterType.BOOL,\n      pretty_name: \"Randomize Question Order\",\n      default: false,\n    },\n    /** HTML-formatted string to display at top of the page above all of the questions. */\n    preamble: {\n      type: ParameterType.HTML_STRING,\n      pretty_name: \"Preamble\",\n      default: null,\n    },\n    /** Label of the button to submit responses. */\n    button_label: {\n      type: ParameterType.STRING,\n      pretty_name: \"Button label\",\n      default: \"Continue\",\n    },\n    /** Message that will be displayed if one or more required questions is not answered. */\n    required_message: {\n      type: ParameterType.STRING,\n      pretty_name: \"Required message\",\n      default: \"You must choose at least one response for this question\",\n    },\n    /** Setting this to true will enable browser auto-complete or auto-fill for the form. */\n    autocomplete: {\n      type: ParameterType.BOOL,\n      pretty_name: \"Allow autocomplete\",\n      default: false,\n    },\n  },\n};\n\ntype Info = typeof info;\n\n/**\n * **survey-multi-select**\n *\n * jsPsych plugin for presenting multiple choice survey questions with the ability to respond with more than one option\n *\n * @see {@link https://www.jspsych.org/plugins/jspsych-survey-multi-select/ survey-multi-select plugin documentation on jspsych.org}\n */\nclass SurveyMultiSelectPlugin implements JsPsychPlugin<Info> {\n  static info = info;\n\n  constructor(private jsPsych: JsPsych) {}\n\n  trial(display_element: HTMLElement, trial: TrialType<Info>) {\n    var plugin_id_name = \"jspsych-survey-multi-select\";\n    var plugin_id_selector = \"#\" + plugin_id_name;\n    const _join = (...args: Array<string | number>) => args.join(\"-\");\n\n    // inject CSS for trial\n    var cssstr =\n      \".jspsych-survey-multi-select-question { margin-top: 2em; margin-bottom: 2em; text-align: left; }\" +\n      \".jspsych-survey-multi-select-text span.required {color: darkred;}\" +\n      \".jspsych-survey-multi-select-horizontal .jspsych-survey-multi-select-text {  text-align: center;}\" +\n      \".jspsych-survey-multi-select-option { line-height: 2; }\" +\n      \".jspsych-survey-multi-select-horizontal .jspsych-survey-multi-select-option {  display: inline-block;  margin-left: 1em;  margin-right: 1em;  vertical-align: top;}\" +\n      \"label.jspsych-survey-multi-select-text input[type='checkbox'] {margin-right: 1em;}\";\n    display_element.innerHTML =\n      '<style id=\"jspsych-survey-multi-select-css\">' + cssstr + \"</style>\";\n\n    // form element\n    var trial_form_id = _join(plugin_id_name, \"form\");\n    display_element.innerHTML += '<form id=\"' + trial_form_id + '\"></form>';\n    var trial_form = display_element.querySelector<HTMLFormElement>(\"#\" + trial_form_id);\n    if (!trial.autocomplete) {\n      trial_form.setAttribute(\"autocomplete\", \"off\");\n    }\n    // show preamble text\n    var preamble_id_name = _join(plugin_id_name, \"preamble\");\n    if (trial.preamble !== null) {\n      trial_form.innerHTML +=\n        '<div id=\"' +\n        preamble_id_name +\n        '\" class=\"' +\n        preamble_id_name +\n        '\">' +\n        trial.preamble +\n        \"</div>\";\n    }\n    // generate question order. this is randomized here as opposed to randomizing the order of trial.questions\n    // so that the data are always associated with the same question regardless of order\n    var question_order = [];\n    for (var i = 0; i < trial.questions.length; i++) {\n      question_order.push(i);\n    }\n    if (trial.randomize_question_order) {\n      question_order = this.jsPsych.randomization.shuffle(question_order);\n    }\n    // add multiple-select questions\n    for (var i = 0; i < trial.questions.length; i++) {\n      var question = trial.questions[question_order[i]];\n      var question_id = question_order[i];\n      // create question container\n      var question_classes = [_join(plugin_id_name, \"question\")];\n      if (question.horizontal) {\n        question_classes.push(_join(plugin_id_name, \"horizontal\"));\n      }\n\n      trial_form.innerHTML +=\n        '<div id=\"' +\n        _join(plugin_id_name, question_id) +\n        '\" data-name=\"' +\n        question.name +\n        '\" class=\"' +\n        question_classes.join(\" \") +\n        '\"></div>';\n\n      var question_selector = _join(plugin_id_selector, question_id);\n\n      // add question text\n      display_element.querySelector(question_selector).innerHTML +=\n        '<p id=\"survey-question\" class=\"' +\n        plugin_id_name +\n        '-text survey-multi-select\">' +\n        question.prompt +\n        \"</p>\";\n\n      // create option check boxes\n      for (var j = 0; j < question.options.length; j++) {\n        var option_id_name = _join(plugin_id_name, \"option\", question_id, j);\n\n        // add check box container\n        display_element.querySelector(question_selector).innerHTML +=\n          '<div id=\"' + option_id_name + '\" class=\"' + _join(plugin_id_name, \"option\") + '\"></div>';\n\n        // add label and question text\n        var form = document.getElementById(option_id_name);\n        var input_name = _join(plugin_id_name, \"response\", question_id);\n        var input_id = _join(plugin_id_name, \"response\", question_id, j);\n        var label = document.createElement(\"label\");\n        label.setAttribute(\"class\", plugin_id_name + \"-text\");\n        label.innerHTML = question.options[j];\n        label.setAttribute(\"for\", input_id);\n\n        // create checkboxes\n        var input = document.createElement(\"input\");\n        input.setAttribute(\"type\", \"checkbox\");\n        input.setAttribute(\"name\", input_name);\n        input.setAttribute(\"id\", input_id);\n        input.setAttribute(\"value\", question.options[j]);\n        form.appendChild(label);\n        label.insertBefore(input, label.firstChild);\n      }\n    }\n    // add submit button\n    trial_form.innerHTML += '<div class=\"fail-message\"></div>';\n    trial_form.innerHTML +=\n      '<button id=\"' +\n      plugin_id_name +\n      '-next\" class=\"' +\n      plugin_id_name +\n      ' jspsych-btn\">' +\n      trial.button_label +\n      \"</button>\";\n\n    // validation check on the data first for custom validation handling\n    // then submit the form\n    display_element\n      .querySelector(\"#jspsych-survey-multi-select-next\")\n      .addEventListener(\"click\", () => {\n        for (var i = 0; i < trial.questions.length; i++) {\n          if (trial.questions[i].required) {\n            if (\n              display_element.querySelector(\n                \"#jspsych-survey-multi-select-\" + i + \" input:checked\"\n              ) == null\n            ) {\n              display_element\n                .querySelector<HTMLInputElement>(\"#jspsych-survey-multi-select-\" + i + \" input\")\n                .setCustomValidity(trial.required_message);\n            } else {\n              display_element\n                .querySelector<HTMLInputElement>(\"#jspsych-survey-multi-select-\" + i + \" input\")\n                .setCustomValidity(\"\");\n            }\n          }\n        }\n        trial_form.reportValidity();\n      });\n\n    trial_form.addEventListener(\"submit\", (event) => {\n      event.preventDefault();\n      // measure response time\n      var endTime = performance.now();\n      var response_time = Math.round(endTime - startTime);\n\n      // create object to hold responses\n      var question_data = {};\n      var has_response = [];\n      for (var index = 0; index < trial.questions.length; index++) {\n        var match = display_element.querySelector(\"#jspsych-survey-multi-select-\" + index);\n        var val = [];\n        var inputboxes = match.querySelectorAll<HTMLInputElement>(\"input[type=checkbox]:checked\");\n        for (var j = 0; j < inputboxes.length; j++) {\n          var currentChecked = inputboxes[j];\n          val.push(currentChecked.value);\n        }\n        var id = \"Q\" + index;\n        var obje = {};\n        var name = id;\n        if (match.attributes[\"data-name\"].value !== \"\") {\n          name = match.attributes[\"data-name\"].value;\n        }\n        obje[name] = val;\n        Object.assign(question_data, obje);\n        if (val.length == 0) {\n          has_response.push(false);\n        } else {\n          has_response.push(true);\n        }\n      }\n\n      // save data\n      var trial_data = {\n        rt: response_time,\n        response: question_data,\n        question_order: question_order,\n      };\n      display_element.innerHTML = \"\";\n\n      // next trial\n      this.jsPsych.finishTrial(trial_data);\n    });\n\n    var startTime = performance.now();\n  }\n\n  simulate(\n    trial: TrialType<Info>,\n    simulation_mode,\n    simulation_options: any,\n    load_callback: () => void\n  ) {\n    if (simulation_mode == \"data-only\") {\n      load_callback();\n      this.simulate_data_only(trial, simulation_options);\n    }\n    if (simulation_mode == \"visual\") {\n      this.simulate_visual(trial, simulation_options, load_callback);\n    }\n  }\n\n  private create_simulation_data(trial: TrialType<Info>, simulation_options) {\n    const question_data = {};\n    let rt = 1000;\n\n    for (const q of trial.questions) {\n      let n_answers;\n      if (q.required) {\n        n_answers = this.jsPsych.randomization.randomInt(1, q.options.length);\n      } else {\n        n_answers = this.jsPsych.randomization.randomInt(0, q.options.length);\n      }\n      const name = q.name ? q.name : `Q${trial.questions.indexOf(q)}`;\n      const selections = this.jsPsych.randomization.sampleWithoutReplacement(q.options, n_answers);\n      question_data[name] = selections;\n      rt += this.jsPsych.randomization.sampleExGaussian(1500, 400, 1 / 200, true);\n    }\n\n    const default_data = {\n      response: question_data,\n      rt: rt,\n      question_order: trial.randomize_question_order\n        ? this.jsPsych.randomization.shuffle([...Array(trial.questions.length).keys()])\n        : [...Array(trial.questions.length).keys()],\n    };\n\n    const data = this.jsPsych.pluginAPI.mergeSimulationData(default_data, simulation_options);\n\n    this.jsPsych.pluginAPI.ensureSimulationDataConsistency(trial, data);\n\n    return data;\n  }\n\n  private simulate_data_only(trial: TrialType<Info>, simulation_options) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    this.jsPsych.finishTrial(data);\n  }\n\n  private simulate_visual(trial: TrialType<Info>, simulation_options, load_callback: () => void) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    const display_element = this.jsPsych.getDisplayElement();\n\n    this.trial(display_element, trial);\n    load_callback();\n\n    const answers: [string, []][] = Object.entries(data.response);\n    for (let i = 0; i < answers.length; i++) {\n      for (const a of answers[i][1]) {\n        this.jsPsych.pluginAPI.clickTarget(\n          display_element.querySelector(\n            `#jspsych-survey-multi-select-response-${i}-${trial.questions[i].options.indexOf(a)}`\n          ),\n          ((data.rt - 1000) / answers.length) * (i + 1)\n        );\n      }\n    }\n\n    this.jsPsych.pluginAPI.clickTarget(\n      display_element.querySelector(\"#jspsych-survey-multi-select-next\"),\n      data.rt\n    );\n  }\n}\n\nexport default SurveyMultiSelectPlugin;\n"],"names":["info","name","parameters","questions","type","ParameterType","COMPLEX","array","pretty_name","nested","prompt","HTML_STRING","default","undefined","options","STRING","horizontal","BOOL","required","randomize_question_order","preamble","button_label","required_message","autocomplete","SurveyMultiSelectPlugin","jsPsych","_classCallCheck","this","key","value","display_element","trial","_this","plugin_id_name","plugin_id_selector","_join","_len","arguments","length","args","Array","_key","join","innerHTML","trial_form_id","trial_form","querySelector","setAttribute","preamble_id_name","question_order","i","push","randomization","shuffle","question","question_id","question_classes","question_selector","j","option_id_name","form","document","getElementById","input_name","input_id","label","createElement","input","appendChild","insertBefore","firstChild","addEventListener","setCustomValidity","reportValidity","event","preventDefault","endTime","performance","now","response_time","Math","round","startTime","question_data","index","match","val","inputboxes","querySelectorAll","currentChecked","obje","attributes","Object","assign","trial_data","rt","response","finishTrial","simulation_mode","simulation_options","load_callback","simulate_data_only","simulate_visual","_step","_iterator","_createForOfIteratorHelper","s","n","done","q","n_answers","randomInt","concat","indexOf","selections","sampleWithoutReplacement","sampleExGaussian","err","e","f","default_data","_toConsumableArray","keys","data","pluginAPI","mergeSimulationData","ensureSimulationDataConsistency","create_simulation_data","getDisplayElement","answers","entries","_step2","_iterator2","a","clickTarget"],"mappings":"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"}