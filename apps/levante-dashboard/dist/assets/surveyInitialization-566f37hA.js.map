{"version":3,"file":"surveyInitialization-566f37hA.js","sources":["../../src/helpers/surveyInitialization.ts"],"sourcesContent":["import {\n  getParsedLocale,\n  fetchBuffer,\n  showAndPlaceAudioButton,\n  restoreSurveyData,\n  saveFinalSurveyData,\n  saveSurveyData,\n  type AudioLinkMap,\n  type RoarfirekitType,\n  type LocalStorageSurveyData,\n} from '@/helpers/survey';\nimport { LEVANTE_SURVEY_RESPONSES_KEY } from '@/constants/bucket';\nimport type { SurveyModel, PageModel, Question, CompleteEvent } from 'survey-core';\nimport type { Router } from 'vue-router';\nimport type { ToastServiceMethods } from 'primevue/toastservice';\nimport type { QueryClient } from '@tanstack/vue-query';\n\ninterface UserData {\n  id: string;\n  selectedAdminId: string | null;\n  surveyResponsesData: any;\n  childIds?: (string | number)[];\n  classes?: { current: (string | number)[] };\n  currentSurveyAudioSource: { stop: () => void } | null;\n  isGeneralSurveyComplete: boolean;\n  specificSurveyRelationIndex: number;\n}\n\ninterface SurveyStore {\n  setAllSurveyPages: (pages: PageModel[]) => void;\n  setAllSpecificPages: (pages: PageModel[]) => void;\n  setNumberOfSurveyPages: (general: number, specific: number) => void;\n  setSurveyAudioLoading: (loading: boolean) => void;\n  setSurveyAudioPlayerBuffers: (locale: string, buffers: AudioBuffer[]) => void;\n  surveyAudioPlayerBuffers: Record<string, AudioBuffer[]>;\n  currentSurveyAudioSource: { stop: () => void } | null;\n  isGeneralSurveyComplete: boolean;\n  specificSurveyRelationIndex: number;\n}\n\ninterface SurveyData {\n  pages: PageModel[];\n}\n\ninterface InitializeSurveyParams {\n  surveyInstance: SurveyModel;\n  userType: string;\n  specificSurveyData?: SurveyData;\n  userData: UserData;\n  surveyStore: SurveyStore;\n  locale: string | undefined | null;\n  audioLinkMap: AudioLinkMap;\n  generalSurveyData: SurveyData;\n}\n\ninterface GameStore {\n  // Define necessary methods/properties used, e.g.:\n  // requireHomeRefresh: () => void;\n}\n\ninterface SetupSurveyEventHandlersParams {\n  surveyInstance: SurveyModel;\n  userType: string;\n  roarfirekit: RoarfirekitType;\n  uid: string;\n  selectedAdminId: string | null;\n  surveyStore: SurveyStore;\n  router: Router;\n  toast: ToastServiceMethods;\n  queryClient: QueryClient;\n  userData: UserData;\n  gameStore: GameStore;\n}\n\nexport async function initializeSurvey({\n  surveyInstance,\n  userType,\n  specificSurveyData,\n  userData,\n  surveyStore,\n  locale,\n  audioLinkMap,\n  generalSurveyData,\n}: InitializeSurveyParams): Promise<void> {\n  restoreSurveyData({\n    surveyInstance,\n    uid: userData.id,\n    selectedAdmin: userData.selectedAdminId,\n    surveyResponsesData: userData.surveyResponsesData,\n    surveyStore: surveyStore as any,\n  });\n\n  const allGeneralPages = generalSurveyData.pages;\n  const allSpecificPages = specificSurveyData?.pages || [];\n  surveyStore.setAllSurveyPages(allGeneralPages);\n  surveyStore.setAllSpecificPages(allSpecificPages);\n\n  const numGeneralPages = allGeneralPages.length;\n  const numSpecificPages = allSpecificPages.length;\n  surveyStore.setNumberOfSurveyPages(numGeneralPages, numSpecificPages);\n\n  if (userType === 'student') {\n    await setupStudentAudio(surveyInstance, locale, audioLinkMap, surveyStore as any);\n  }\n}\n\nexport async function setupStudentAudio(\n  surveyInstance: SurveyModel,\n  locale: string | undefined | null,\n  audioLinkMap: AudioLinkMap,\n  surveyStore: SurveyStore,\n): Promise<void> {\n  const parsedLocale = getParsedLocale(locale);\n  await fetchBuffer({\n    parsedLocale,\n    setSurveyAudioLoading: surveyStore.setSurveyAudioLoading,\n    audioLinks: audioLinkMap,\n    surveyAudioBuffers: surveyStore.surveyAudioPlayerBuffers,\n    setSurveyAudioPlayerBuffers: surveyStore.setSurveyAudioPlayerBuffers as (\n      locale: string,\n      buffers: AudioBuffer[],\n    ) => void,\n  });\n\n  surveyInstance.onAfterRenderPage.add((sender: SurveyModel, options: { htmlElement: HTMLElement }) => {\n    const questionElements = options.htmlElement.querySelectorAll('div[id^=sq_]');\n    if (surveyStore.currentSurveyAudioSource) {\n      surveyStore.currentSurveyAudioSource.stop();\n    }\n    questionElements.forEach((el) => {\n      const htmlEl = el as HTMLElement;\n      const playAudioButton = document.getElementById('audio-button-' + htmlEl.dataset.name);\n      showAndPlaceAudioButton({\n        playAudioButton: playAudioButton as HTMLElement | null,\n        el: htmlEl,\n      });\n    });\n  });\n}\n\nexport function setupSurveyEventHandlers({\n  surveyInstance,\n  userType,\n  roarfirekit,\n  uid,\n  selectedAdminId,\n  surveyStore,\n  router,\n  toast,\n  queryClient,\n  userData,\n  gameStore,\n}: SetupSurveyEventHandlersParams): void {\n  let specificIds: (string | number)[] = [];\n  if (userType === 'parent') {\n    specificIds = userData.childIds || [];\n  } else if (userType === 'teacher') {\n    specificIds = userData.classes?.current || [];\n  }\n\n  surveyInstance.onValueChanged.add((sender: SurveyModel, options: { name: string; question: Question; value: any }) =>\n    saveSurveyData({\n      survey: sender,\n      uid,\n      questionName: options.name,\n      responseValue: options.value,\n      userType,\n      surveyStore: surveyStore as any,\n      specificIds: specificIds,\n    }),\n  );\n\n  surveyInstance.onCurrentPageChanged.add(\n    (\n      sender: SurveyModel,\n      options: {\n        oldCurrentPage: PageModel | null;\n        newCurrentPage: PageModel;\n        isNextPage: boolean;\n        isPrevPage: boolean;\n      },\n    ) => {\n      const previousPage = options.oldCurrentPage;\n\n      if (previousPage) {\n        const previousPageQuestions = previousPage.questions as Question[];\n        const prevDataStr = window.localStorage.getItem(`${LEVANTE_SURVEY_RESPONSES_KEY}-${uid}`);\n\n        if (prevDataStr) {\n          const parsedData: LocalStorageSurveyData = JSON.parse(prevDataStr);\n          const previousPageResponses: Record<string, { responseValue: string; responseTime: string }> = {\n            ...parsedData.responses,\n          };\n\n          previousPageQuestions.forEach((question) => {\n            if (parsedData.responses[question.name] !== undefined) {\n              previousPageResponses[question.name] = parsedData.responses[question.name];\n            }\n          });\n\n          const dataToSave = {\n            responses: previousPageResponses,\n            pageNo: previousPage.visibleIndex,\n            isComplete: false,\n            isGeneral: !surveyStore.isGeneralSurveyComplete,\n            specificId: surveyStore.isGeneralSurveyComplete ? specificIds[surveyStore.specificSurveyRelationIndex] : 0,\n            userType: userType,\n          };\n\n          try {\n            roarfirekit.saveSurveyResponses({\n              surveyData: dataToSave,\n              administrationId: selectedAdminId,\n            });\n          } catch (error: unknown) {\n            console.error(\n              'Error saving previous page responses: ',\n              error instanceof Error ? error.message : String(error),\n            );\n          }\n        }\n      }\n    },\n  );\n\n  surveyInstance.onComplete.add((sender: SurveyModel, options: CompleteEvent) =>\n    saveFinalSurveyData({\n      sender,\n      roarfirekit,\n      uid,\n      surveyStore: surveyStore as any,\n      router,\n      toast,\n      queryClient,\n      specificIds: specificIds,\n      selectedAdmin: selectedAdminId,\n      userType,\n      gameStore: gameStore as any,\n    }),\n  );\n}\n"],"names":["initializeSurvey","surveyInstance","userType","specificSurveyData","userData","surveyStore","locale","audioLinkMap","generalSurveyData","restoreSurveyData","allGeneralPages","allSpecificPages","numGeneralPages","numSpecificPages","setupStudentAudio","parsedLocale","getParsedLocale","fetchBuffer","sender","options","questionElements","el","htmlEl","playAudioButton","showAndPlaceAudioButton","setupSurveyEventHandlers","roarfirekit","uid","selectedAdminId","router","toast","queryClient","gameStore","specificIds","_a","saveSurveyData","previousPage","previousPageQuestions","prevDataStr","LEVANTE_SURVEY_RESPONSES_KEY","parsedData","previousPageResponses","question","dataToSave","error","saveFinalSurveyData"],"mappings":"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"}