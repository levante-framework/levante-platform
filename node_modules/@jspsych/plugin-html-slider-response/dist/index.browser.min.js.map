{"version":3,"file":"index.browser.min.js","sources":["../src/index.ts"],"sourcesContent":["import { JsPsych, JsPsychPlugin, ParameterType, TrialType } from \"jspsych\";\n\nconst info = <const>{\n  name: \"html-slider-response\",\n  parameters: {\n    /** The HTML string to be displayed */\n    stimulus: {\n      type: ParameterType.HTML_STRING,\n      pretty_name: \"Stimulus\",\n      default: undefined,\n    },\n    /** Sets the minimum value of the slider. */\n    min: {\n      type: ParameterType.INT,\n      pretty_name: \"Min slider\",\n      default: 0,\n    },\n    /** Sets the maximum value of the slider */\n    max: {\n      type: ParameterType.INT,\n      pretty_name: \"Max slider\",\n      default: 100,\n    },\n    /** Sets the starting value of the slider */\n    slider_start: {\n      type: ParameterType.INT,\n      pretty_name: \"Slider starting value\",\n      default: 50,\n    },\n    /** Sets the step of the slider */\n    step: {\n      type: ParameterType.INT,\n      pretty_name: \"Step\",\n      default: 1,\n    },\n    /** Array containing the labels for the slider. Labels will be displayed at equidistant locations along the slider. */\n    labels: {\n      type: ParameterType.HTML_STRING,\n      pretty_name: \"Labels\",\n      default: [],\n      array: true,\n    },\n    /** Width of the slider in pixels. */\n    slider_width: {\n      type: ParameterType.INT,\n      pretty_name: \"Slider width\",\n      default: null,\n    },\n    /** Label of the button to advance. */\n    button_label: {\n      type: ParameterType.STRING,\n      pretty_name: \"Button label\",\n      default: \"Continue\",\n      array: false,\n    },\n    /** If true, the participant will have to move the slider before continuing. */\n    require_movement: {\n      type: ParameterType.BOOL,\n      pretty_name: \"Require movement\",\n      default: false,\n    },\n    /** Any content here will be displayed below the slider. */\n    prompt: {\n      type: ParameterType.HTML_STRING,\n      pretty_name: \"Prompt\",\n      default: null,\n    },\n    /** How long to show the stimulus. */\n    stimulus_duration: {\n      type: ParameterType.INT,\n      pretty_name: \"Stimulus duration\",\n      default: null,\n    },\n    /** How long to show the trial. */\n    trial_duration: {\n      type: ParameterType.INT,\n      pretty_name: \"Trial duration\",\n      default: null,\n    },\n    /** If true, trial will end when user makes a response. */\n    response_ends_trial: {\n      type: ParameterType.BOOL,\n      pretty_name: \"Response ends trial\",\n      default: true,\n    },\n  },\n};\n\ntype Info = typeof info;\n\n/**\n * **html-slider-response**\n *\n * jsPsych plugin for showing an HTML stimulus and collecting a slider response\n *\n * @author Josh de Leeuw\n * @see {@link https://www.jspsych.org/plugins/jspsych-html-slider-response/ html-slider-response plugin documentation on jspsych.org}\n */\nclass HtmlSliderResponsePlugin implements JsPsychPlugin<Info> {\n  static info = info;\n\n  constructor(private jsPsych: JsPsych) {}\n\n  trial(display_element: HTMLElement, trial: TrialType<Info>) {\n    // half of the thumb width value from jspsych.css, used to adjust the label positions\n    var half_thumb_width = 7.5;\n\n    var html = '<div id=\"jspsych-html-slider-response-wrapper\" style=\"margin: 100px 0px;\">';\n    html += '<div id=\"jspsych-html-slider-response-stimulus\">' + trial.stimulus + \"</div>\";\n    html +=\n      '<div class=\"jspsych-html-slider-response-container\" style=\"position:relative; margin: 0 auto 3em auto; ';\n    if (trial.slider_width !== null) {\n      html += \"width:\" + trial.slider_width + \"px;\";\n    } else {\n      html += \"width:auto;\";\n    }\n    html += '\">';\n    html +=\n      '<input type=\"range\" class=\"jspsych-slider\" value=\"' +\n      trial.slider_start +\n      '\" min=\"' +\n      trial.min +\n      '\" max=\"' +\n      trial.max +\n      '\" step=\"' +\n      trial.step +\n      '\" id=\"jspsych-html-slider-response-response\"></input>';\n    html += \"<div>\";\n    for (var j = 0; j < trial.labels.length; j++) {\n      var label_width_perc = 100 / (trial.labels.length - 1);\n      var percent_of_range = j * (100 / (trial.labels.length - 1));\n      var percent_dist_from_center = ((percent_of_range - 50) / 50) * 100;\n      var offset = (percent_dist_from_center * half_thumb_width) / 100;\n      html +=\n        '<div style=\"border: 1px solid transparent; display: inline-block; position: absolute; ' +\n        \"left:calc(\" +\n        percent_of_range +\n        \"% - (\" +\n        label_width_perc +\n        \"% / 2) - \" +\n        offset +\n        \"px); text-align: center; width: \" +\n        label_width_perc +\n        '%;\">';\n      html += '<span style=\"text-align: center; font-size: 80%;\">' + trial.labels[j] + \"</span>\";\n      html += \"</div>\";\n    }\n    html += \"</div>\";\n    html += \"</div>\";\n    html += \"</div>\";\n\n    if (trial.prompt !== null) {\n      html += trial.prompt;\n    }\n\n    // add submit button\n    html +=\n      '<button id=\"jspsych-html-slider-response-next\" class=\"jspsych-btn\" ' +\n      (trial.require_movement ? \"disabled\" : \"\") +\n      \">\" +\n      trial.button_label +\n      \"</button>\";\n\n    display_element.innerHTML = html;\n\n    var response = {\n      rt: null,\n      response: null,\n    };\n\n    if (trial.require_movement) {\n      const enable_button = () => {\n        display_element.querySelector<HTMLInputElement>(\n          \"#jspsych-html-slider-response-next\"\n        ).disabled = false;\n      };\n\n      display_element\n        .querySelector(\"#jspsych-html-slider-response-response\")\n        .addEventListener(\"mousedown\", enable_button);\n\n      display_element\n        .querySelector(\"#jspsych-html-slider-response-response\")\n        .addEventListener(\"touchstart\", enable_button);\n\n      display_element\n        .querySelector(\"#jspsych-html-slider-response-response\")\n        .addEventListener(\"change\", enable_button);\n    }\n\n    const end_trial = () => {\n      this.jsPsych.pluginAPI.clearAllTimeouts();\n\n      // save data\n      var trialdata = {\n        rt: response.rt,\n        stimulus: trial.stimulus,\n        slider_start: trial.slider_start,\n        response: response.response,\n      };\n\n      display_element.innerHTML = \"\";\n\n      // next trial\n      this.jsPsych.finishTrial(trialdata);\n    };\n\n    display_element\n      .querySelector(\"#jspsych-html-slider-response-next\")\n      .addEventListener(\"click\", () => {\n        // measure response time\n        var endTime = performance.now();\n        response.rt = Math.round(endTime - startTime);\n        response.response = display_element.querySelector<HTMLInputElement>(\n          \"#jspsych-html-slider-response-response\"\n        ).valueAsNumber;\n\n        if (trial.response_ends_trial) {\n          end_trial();\n        } else {\n          display_element.querySelector<HTMLButtonElement>(\n            \"#jspsych-html-slider-response-next\"\n          ).disabled = true;\n        }\n      });\n\n    if (trial.stimulus_duration !== null) {\n      this.jsPsych.pluginAPI.setTimeout(() => {\n        display_element.querySelector<HTMLElement>(\n          \"#jspsych-html-slider-response-stimulus\"\n        ).style.visibility = \"hidden\";\n      }, trial.stimulus_duration);\n    }\n\n    // end trial if trial_duration is set\n    if (trial.trial_duration !== null) {\n      this.jsPsych.pluginAPI.setTimeout(end_trial, trial.trial_duration);\n    }\n\n    var startTime = performance.now();\n  }\n\n  simulate(\n    trial: TrialType<Info>,\n    simulation_mode,\n    simulation_options: any,\n    load_callback: () => void\n  ) {\n    if (simulation_mode == \"data-only\") {\n      load_callback();\n      this.simulate_data_only(trial, simulation_options);\n    }\n    if (simulation_mode == \"visual\") {\n      this.simulate_visual(trial, simulation_options, load_callback);\n    }\n  }\n\n  private create_simulation_data(trial: TrialType<Info>, simulation_options) {\n    const default_data = {\n      stimulus: trial.stimulus,\n      slider_start: trial.slider_start,\n      response: this.jsPsych.randomization.randomInt(trial.min, trial.max),\n      rt: this.jsPsych.randomization.sampleExGaussian(500, 50, 1 / 150, true),\n    };\n\n    const data = this.jsPsych.pluginAPI.mergeSimulationData(default_data, simulation_options);\n\n    this.jsPsych.pluginAPI.ensureSimulationDataConsistency(trial, data);\n\n    return data;\n  }\n\n  private simulate_data_only(trial: TrialType<Info>, simulation_options) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    this.jsPsych.finishTrial(data);\n  }\n\n  private simulate_visual(trial: TrialType<Info>, simulation_options, load_callback: () => void) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    const display_element = this.jsPsych.getDisplayElement();\n\n    this.trial(display_element, trial);\n    load_callback();\n\n    if (data.rt !== null) {\n      const el = display_element.querySelector<HTMLInputElement>(\"input[type='range']\");\n\n      setTimeout(() => {\n        this.jsPsych.pluginAPI.clickTarget(el);\n        el.valueAsNumber = data.response;\n      }, data.rt / 2);\n\n      this.jsPsych.pluginAPI.clickTarget(display_element.querySelector(\"button\"), data.rt);\n    }\n  }\n}\n\nexport default HtmlSliderResponsePlugin;\n"],"names":["info","name","parameters","stimulus","type","ParameterType","HTML_STRING","pretty_name","default","undefined","min","INT","max","slider_start","step","labels","array","slider_width","button_label","STRING","require_movement","BOOL","prompt","stimulus_duration","trial_duration","response_ends_trial","HtmlSliderResponsePlugin","jsPsych","_classCallCheck","this","key","value","display_element","trial","_this","html","j","length","label_width_perc","percent_of_range","innerHTML","response","rt","enable_button","querySelector","disabled","addEventListener","end_trial","pluginAPI","clearAllTimeouts","trialdata","finishTrial","endTime","performance","now","Math","round","startTime","valueAsNumber","setTimeout","style","visibility","simulation_mode","simulation_options","load_callback","simulate_data_only","simulate_visual","default_data","randomization","randomInt","sampleExGaussian","data","mergeSimulationData","ensureSimulationDataConsistency","create_simulation_data","_this2","getDisplayElement","el","clickTarget"],"mappings":"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"}