{"version":3,"file":"index.cjs","sources":["../src/index.ts"],"sourcesContent":["import { JsPsych, JsPsychPlugin, ParameterType, TrialType } from \"jspsych\";\n\nconst info = <const>{\n  name: \"html-multi-response\",\n  parameters: {\n    /** The HTML string to be displayed */\n    stimulus: {\n      type: ParameterType.HTML_STRING,\n      pretty_name: \"Stimulus\",\n      default: undefined,\n    },\n    /** Array containing the label(s) for the button(s). */\n    button_choices: {\n      type: ParameterType.STRING,\n      pretty_name: \"Button Choices\",\n      default: [],\n      array: true,\n    },\n    /**\n     * Array containing the key(s) the subject is allowed to press to respond to the stimulus.\n     */\n    keyboard_choices: {\n      type: ParameterType.KEYS,\n      pretty_name: \"Keyboard Choices\",\n      default: \"NO_KEYS\",\n    },\n    /** The HTML for creating button. Can create own style. Use the \"%choice%\" string to indicate where the label from the choices parameter should be inserted. */\n    button_html: {\n      type: ParameterType.HTML_STRING,\n      pretty_name: \"Button HTML\",\n      default: '<button class=\"jspsych-btn\">%choice%</button>',\n      array: true,\n    },\n    /** Any content here will be displayed under the button(s). */\n    prompt: {\n      type: ParameterType.HTML_STRING,\n      pretty_name: \"Prompt\",\n      default: null,\n    },\n    /** How long to show the stimulus. */\n    stimulus_duration: {\n      type: ParameterType.INT,\n      pretty_name: \"Stimulus duration\",\n      default: null,\n    },\n    /** How long to show the trial. */\n    trial_duration: {\n      type: ParameterType.INT,\n      pretty_name: \"Trial duration\",\n      default: null,\n    },\n    /** The vertical margin of the button. */\n    margin_vertical: {\n      type: ParameterType.STRING,\n      pretty_name: \"Margin vertical\",\n      default: \"0px\",\n    },\n    /** The horizontal margin of the button. */\n    margin_horizontal: {\n      type: ParameterType.STRING,\n      pretty_name: \"Margin horizontal\",\n      default: \"8px\",\n    },\n    /** If true, then trial will end when user responds. */\n    response_ends_trial: {\n      type: ParameterType.BOOL,\n      pretty_name: \"Response ends trial\",\n      default: true,\n    },\n  },\n};\n\ntype Info = typeof info;\n\n/**\n * html-multi-response\n * jsPsych plugin for displaying an html stimulus and getting a response\n * @author Adam Richie-Halford\n * @see {@link https://www.jspsych.org/plugins/jspsych-html-multi-response/ html-multi-response plugin documentation on jspsych.org}\n */\nclass HtmlMultiResponsePlugin implements JsPsychPlugin<Info> {\n  static info = info;\n\n  constructor(private jsPsych: JsPsych) {}\n\n  trial(display_element: HTMLElement, trial: TrialType<Info>) {\n    // display stimulus\n    var html = '<div id=\"jspsych-html-multi-response-stimulus\">' + trial.stimulus + \"</div>\";\n\n    //display buttons\n    var buttons = [];\n    if (Array.isArray(trial.button_html)) {\n      if (trial.button_html.length == trial.button_choices.length) {\n        buttons = trial.button_html;\n      } else {\n        console.error(\n          \"Error in html-multi-response plugin. The length of the button_html array does not equal the length of the button_choices array\"\n        );\n      }\n    } else {\n      for (var i = 0; i < trial.button_choices.length; i++) {\n        buttons.push(trial.button_html);\n      }\n    }\n    html += '<div id=\"jspsych-html-multi-response-btngroup\">';\n    for (var i = 0; i < trial.button_choices.length; i++) {\n      var str = buttons[i].replace(/%choice%/g, trial.button_choices[i]);\n      html +=\n        '<div class=\"jspsych-html-multi-response-button\" style=\"display: inline-block; margin:' +\n        trial.margin_vertical +\n        \" \" +\n        trial.margin_horizontal +\n        '\" id=\"jspsych-html-multi-response-button-' +\n        i +\n        '\" data-choice=\"' +\n        i +\n        '\">' +\n        str +\n        \"</div>\";\n    }\n    html += \"</div>\";\n\n    //show prompt if there is one\n    if (trial.prompt !== null) {\n      html += trial.prompt;\n    }\n    display_element.innerHTML = html;\n\n    // function to handle responses by the subject\n    var after_keyboard_response = function (info) {\n      // after a valid response, the stimulus will have the CSS class 'responded'\n      // which can be used to provide visual feedback that a response was recorded\n      display_element.querySelector(\"#jspsych-html-multi-response-stimulus\").className +=\n        \" responded\";\n\n      // only record the first response\n      if (response.key == null) {\n        response = {\n          source: \"keyboard\",\n          button: null,\n          ...info,\n        };\n      }\n\n      if (trial.response_ends_trial) {\n        end_trial();\n      }\n    };\n\n    // Add event listener for keys\n    if (trial.keyboard_choices != \"NO_KEYS\") {\n      var keyboardListener = this.jsPsych.pluginAPI.getKeyboardResponse({\n        callback_function: after_keyboard_response,\n        valid_responses: trial.keyboard_choices,\n        rt_method: \"performance\",\n        persist: false,\n        allow_held_key: false,\n      });\n    }\n\n    // start time\n    var start_time = performance.now();\n\n    // add event listeners to buttons\n    for (var i = 0; i < trial.button_choices.length; i++) {\n      display_element\n        .querySelector(\"#jspsych-html-multi-response-button-\" + i)\n        .addEventListener(\"click\", (e) => {\n          var btn_el = e.currentTarget as HTMLButtonElement;\n          var choice = btn_el.getAttribute(\"data-choice\"); // don't use dataset for jsdom compatibility\n          after_response(choice);\n        });\n    }\n\n    // store response\n    var response = {\n      rt: null,\n      button: null,\n      key: null,\n      source: null,\n    };\n\n    // function to end trial when it is time\n    const end_trial = () => {\n      // kill any remaining setTimeout handlers\n      this.jsPsych.pluginAPI.clearAllTimeouts();\n\n      // kill keyboard listeners\n      if (typeof keyboardListener !== \"undefined\") {\n        this.jsPsych.pluginAPI.cancelKeyboardResponse(keyboardListener);\n      }\n\n      // gather the data to store for the trial\n      var trial_data = {\n        rt: response.rt,\n        stimulus: trial.stimulus,\n        button_response: response.button,\n        keyboard_response: response.key,\n        response_source: response.source,\n      };\n\n      // clear the display\n      display_element.innerHTML = \"\";\n\n      // move on to the next trial\n      this.jsPsych.finishTrial(trial_data);\n    };\n\n    // function to handle responses by the subject\n    function after_response(choice) {\n      // measure rt\n      var end_time = performance.now();\n      var rt = Math.round(end_time - start_time);\n      response.button = parseInt(choice);\n      response.rt = rt;\n      response.source = \"button\";\n\n      // after a valid response, the stimulus will have the CSS class 'responded'\n      // which can be used to provide visual feedback that a response was recorded\n      display_element.querySelector(\"#jspsych-html-multi-response-stimulus\").className +=\n        \" responded\";\n\n      // disable all the buttons after a response\n      var btns = document.querySelectorAll(\".jspsych-html-multi-response-button button\");\n      for (var i = 0; i < btns.length; i++) {\n        //btns[i].removeEventListener('click');\n        btns[i].setAttribute(\"disabled\", \"disabled\");\n      }\n\n      if (trial.response_ends_trial) {\n        end_trial();\n      }\n    }\n\n    // hide image if timing is set\n    if (trial.stimulus_duration !== null) {\n      this.jsPsych.pluginAPI.setTimeout(() => {\n        display_element.querySelector<HTMLElement>(\n          \"#jspsych-html-multi-response-stimulus\"\n        ).style.visibility = \"hidden\";\n      }, trial.stimulus_duration);\n    }\n\n    // end trial if time limit is set\n    if (trial.trial_duration !== null) {\n      this.jsPsych.pluginAPI.setTimeout(end_trial, trial.trial_duration);\n    }\n  }\n\n  simulate(\n    trial: TrialType<Info>,\n    simulation_mode,\n    simulation_options: any,\n    load_callback: () => void\n  ) {\n    if (simulation_mode == \"data-only\") {\n      load_callback();\n      this.simulate_data_only(trial, simulation_options);\n    }\n    if (simulation_mode == \"visual\") {\n      this.simulate_visual(trial, simulation_options, load_callback);\n    }\n  }\n\n  private create_simulation_data(trial: TrialType<Info>, simulation_options) {\n    const keyboard_data = {\n      stimulus: trial.stimulus,\n      rt: this.jsPsych.randomization.sampleExGaussian(500, 50, 1 / 150, true),\n      keyboard_response: this.jsPsych.pluginAPI.getValidKey(trial.keyboard_choices),\n      button_response: null,\n      response_source: \"keyboard\",\n    };\n\n    const button_data = {\n      stimulus: trial.stimulus,\n      rt: this.jsPsych.randomization.sampleExGaussian(500, 50, 1 / 150, true),\n      button_response: this.jsPsych.randomization.randomInt(0, trial.button_choices.length - 1),\n      keyboard_response: null,\n      response_source: \"button\",\n    };\n\n    const default_data = Math.random() < 0.5 ? keyboard_data : button_data;\n\n    const data = this.jsPsych.pluginAPI.mergeSimulationData(default_data, simulation_options);\n\n    this.jsPsych.pluginAPI.ensureSimulationDataConsistency(trial, data);\n\n    return data;\n  }\n\n  private simulate_data_only(trial: TrialType<Info>, simulation_options) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    this.jsPsych.finishTrial(data);\n  }\n\n  private simulate_visual(trial: TrialType<Info>, simulation_options, load_callback: () => void) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    const display_element = this.jsPsych.getDisplayElement();\n\n    this.trial(display_element, trial);\n    load_callback();\n\n    if (data.rt !== null) {\n      if (data.button_response !== null) {\n        this.jsPsych.pluginAPI.clickTarget(\n          display_element.querySelector(`div[data-choice=\"${data.button_response}\"] button`),\n          data.rt\n        );\n      } else {\n        this.jsPsych.pluginAPI.pressKey(data.keyboard_response, data.rt);\n      }\n    }\n  }\n}\n\nexport default HtmlMultiResponsePlugin;\n"],"names":["ParameterType"],"mappings":"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"}