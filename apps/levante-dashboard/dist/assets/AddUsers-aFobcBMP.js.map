{"version":3,"file":"AddUsers-aFobcBMP.js","sources":["../../src/components/userInfo/AddUsersInfo.vue","../../src/pages/users/AddUsers.vue"],"sourcesContent":["<template>\n  <PvPanel header=\"Add users\" class=\"add-users-panel\">\n    <div class=\"info-message-container\">\n      <i class=\"pi pi-exclamation-circle\"></i>\n      <p>Groups must be created before adding users. You cannot add users otherwise.</p>\n    </div>\n\n    <div class=\"how-to-section\">\n      <h3>How to Add Users</h3>\n      <ol class=\"numbered-steps\">\n        <li>\n          <span class=\"step-number\">1</span>Download the template below or create your own CSV with the required columns\n        </li>\n        <li><span class=\"step-number\">2</span>Fill in the CSV with the user data</li>\n        <li><span class=\"step-number\">3</span>Upload the CSV file and click \"Start Adding Users\"</li>\n        <li>\n          <span class=\"step-number\">4</span>When finished, a file called \"registered_users.csv\" will be downloaded. If\n          it is not in your downloads folder, click the \"Download Users\" button.\n        </li>\n        <li><span class=\"step-number\">5</span>Click \"Continue to Link Users\" and get their login information.</li>\n      </ol>\n    </div>\n\n    <p>\n      The following fields define the columns for your CSV file when adding users. Please refer to the legend below for\n      specific requirements on each field.\n    </p>\n    <p>Caregivers and Teachers need to have the same Groups as the children they relate to.</p>\n    <ul>\n      <li><b>id</b><span class=\"field-marker\">*</span> - A unique identifier for the user in CSV file.</li>\n      <li><b>userType</b><span class=\"field-marker\">*</span> - The type of user: child, caregiver, teacher.</li>\n      <li>\n        <b>month</b><span class=\"field-marker\">*</span><span class=\"field-marker\">†</span> - The month a child user was\n        born (numeric; For Example, 5 for May).\n      </li>\n      <li>\n        <b>year</b><span class=\"field-marker\">*</span><span class=\"field-marker\">†</span> - The year a child user was\n        born (four-digit; For Example, 2017).\n      </li>\n      <li><b>caregiverId</b> - A unique identifier (id) for the child's caregiver.</li>\n      <li><b>teacherId</b> - A unique identifier (id) for the child's teacher.</li>\n      <li>\n        <b>site</b><span class=\"field-marker\">*</span> - The name of the site you created from the Add Groups page.\n      </li>\n      <li>\n        One of the following<span class=\"field-marker\">*</span>:\n        <ul class=\"nested-list\">\n          <li><b>cohort</b> - The name of the cohort.</li>\n          <li>\n            <b>school</b> - The name of the school.\n            <ul class=\"nested-list\">\n              <li><b>class</b> - The name of the class. Must have a school as well. (Optional)</li>\n            </ul>\n          </li>\n        </ul>\n      </li>\n    </ul>\n\n    <p class=\"mb-6 legend\">\n      <span class=\"field-marker\">*</span> Required for this Step<br />\n      <span class=\"field-marker\">†</span> Required only for child users. Leave blank for caregiver or teacher users.\n    </p>\n\n    <div class=\"download-button-container\">\n      <button class=\"download-csv-btn\" data-testid=\"download-template\" @click=\"downloadTemplate\">\n        <i class=\"pi pi-download\"></i>\n        Download CSV Template\n      </button>\n    </div>\n\n    <p>\n      Below is an example of what your CSV/spreadsheet should look like. Only the required columns will be processed.\n    </p>\n    <div class=\"csv-example-image-container\">\n      <img\n        id=\"add-users-example-image\"\n        :src=\"LEVANTE_BUCKET_URL + '/add_users_example.png'\"\n        alt=\"Add Users CSV Example \"\n        class=\"csv-example-image\"\n      />\n    </div>\n  </PvPanel>\n</template>\n\n<script setup>\nimport { LEVANTE_BUCKET_URL } from '@/constants/bucket';\nimport PvPanel from 'primevue/panel';\n\nconst generateTemplateFile = () => {\n  const headers = ['id', 'userType', 'month', 'year', 'caregiverId', 'teacherId', 'site', 'school', 'class', 'cohort'];\n  const csvContent = headers.join(',') + '\\n';\n  return new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n};\n\nconst downloadTemplate = () => {\n  const blob = generateTemplateFile();\n  const link = document.createElement('a');\n  const url = URL.createObjectURL(blob);\n  link.setAttribute('href', url);\n  link.setAttribute('download', 'add_users_template.csv');\n  link.style.visibility = 'hidden';\n  document.body.appendChild(link);\n  link.click();\n  document.body.removeChild(link);\n};\n</script>\n\n<style scoped>\n.info-message-container {\n  display: flex;\n  background-color: rgb(252, 252, 218);\n  border: 2px solid rgb(228, 206, 7);\n  border-radius: 0.5rem;\n  color: rgb(199, 180, 7);\n  margin-bottom: 1rem;\n\n  p {\n    font-weight: bold;\n    margin: 1rem 1rem 1rem 0;\n  }\n\n  i {\n    margin: 1rem;\n  }\n}\n\n.field-marker {\n  color: var(--bright-red);\n  font-weight: bold;\n  vertical-align: super;\n  font-size: 0.8em;\n  margin-left: 0.1em;\n}\n\n.legend {\n  line-height: 1.6;\n}\n\n.nested-list {\n  margin-top: 0.5em;\n  margin-bottom: 0.5em;\n  padding-left: 1.5em; /* Indent nested lists */\n}\n\n.required {\n  color: var(--bright-red);\n}\n\n.add-users-panel :deep(.p-panel-header) {\n  font-size: 2rem;\n}\n\n.download-button-container {\n  display: flex;\n  justify-content: center;\n  margin: 2rem 0;\n}\n\n.download-csv-btn {\n  background-color: var(--primary-color);\n  color: white;\n  border: none;\n  border-radius: 0.5rem;\n  padding: 1rem 2rem;\n  font-size: 1.1rem;\n  font-weight: bold;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n  transition:\n    background-color 0.2s,\n    transform 0.2s;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n\n.download-csv-btn:hover {\n  background-color: var(--primary-darker, #5b0c0f);\n  transform: translateY(-2px);\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);\n}\n\n.download-csv-btn i {\n  font-size: 1.2rem;\n}\n\n.how-to-section {\n  background-color: #f8f9fa;\n  border-radius: 0.5rem;\n  padding: 1.5rem;\n  margin: 2rem 0;\n\n  h3 {\n    margin-top: 0;\n    margin-bottom: 1rem;\n    color: var(--primary-color);\n    font-size: 1.2rem;\n    font-weight: bold;\n  }\n\n  .numbered-steps {\n    margin: 0;\n    padding: 0;\n    list-style: none;\n\n    li {\n      margin-bottom: 0.75rem;\n      line-height: 1.5;\n      display: flex;\n      align-items: flex-start;\n      gap: 0.75rem;\n    }\n\n    li:last-child {\n      margin-bottom: 0;\n    }\n\n    .step-number {\n      background-color: var(--primary-color);\n      color: white;\n      width: 24px;\n      height: 24px;\n      border-radius: 50%;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      font-weight: bold;\n      flex-shrink: 0;\n    }\n  }\n}\n\n.csv-example-image-container {\n  display: flex;\n  justify-content: center;\n  overflow-x: auto;\n  position: relative;\n  height: 123px;\n\n  .csv-example-image {\n    width: auto;\n    max-height: 108px;\n    display: block;\n    position: absolute;\n    left: 0;\n  }\n}\n</style>\n","<template>\n  <main class=\"container main\">\n    <section class=\"main-body\">\n      <!--Upload file section-->\n      <AddUsersInfo />\n\n      <PvDivider />\n\n      <div class=\"text-gray-500 mb-2 surface-100 border-round p-2\">\n        <PvFileUpload\n          name=\"massUploader[]\"\n          custom-upload\n          accept=\".csv\"\n          class=\"bg-primary mb-2 p-3 w-2 text-white border-none border-round h-3rem m-0 hover:bg-red-900\"\n          auto\n          :show-upload-button=\"false\"\n          :show-cancel-button=\"false\"\n          @uploader=\"onFileUpload($event)\"\n        >\n          <template #empty>\n            <div class=\"flex justify-center items-center text-gray-500\">\n              <p>Click choose or drag your CSV file here to upload.</p>\n            </div>\n          </template>\n        </PvFileUpload>\n      </div>\n\n      <div v-if=\"isFileUploaded && !errorMissingColumns && !errorUsers.length\">\n        <PvDataTable\n          ref=\"dataTable\"\n          :value=\"rawUserFile\"\n          show-gridlines\n          :row-hover=\"true\"\n          :resizable-columns=\"true\"\n          paginator\n          :always-show-paginator=\"false\"\n          :rows=\"10\"\n          class=\"datatable\"\n        >\n          <PvColumn v-for=\"col of allFields\" :key=\"col.field\" :field=\"col.field\">\n            <template #header>\n              <div class=\"col-header\">\n                <b>{{ col.header }}</b>\n              </div>\n            </template>\n            <template #body=\"{ data, field }\">\n              <span>{{ data[field] }}</span>\n            </template>\n          </PvColumn>\n        </PvDataTable>\n\n        <div class=\"submit-container\">\n          <div v-if=\"registeredUsers.length\" class=\"button-group\">\n            <PvButton\n              label=\"Continue to Link Users\"\n              class=\"continue-button\"\n              icon=\"pi pi-link\"\n              @click=\"router.push({ name: 'Link Users' })\"\n            />\n            <PvButton label=\"Download Users\" class=\"download-button\" icon=\"pi pi-download\" @click=\"downloadCSV\" />\n          </div>\n          <PvButton\n            v-else\n            :label=\"activeSubmit ? 'Adding Users' : 'Start Adding Users'\"\n            :icon=\"activeSubmit ? 'pi pi-spin pi-spinner' : ''\"\n            :disabled=\"activeSubmit\"\n            class=\"bg-primary mb-2 p-3 w-2 text-white border-none border-round h-3rem m-0 hover:bg-red-900\"\n            data-testid=\"start-adding-button\"\n            @click=\"submitUsers\"\n          />\n        </div>\n      </div>\n\n      <!-- Datatable of error children -->\n      <div v-if=\"showErrorTable\" class=\"error-container\">\n        <div class=\"error-header\">\n          <h3>Rows with Errors</h3>\n        </div>\n        <PvDataTable\n          ref=\"errorTable\"\n          :value=\"errorUsers\"\n          show-gridlines\n          export-filename=\"error-datatable-export\"\n          :row-hover=\"true\"\n          :resizable-columns=\"true\"\n          paginator\n          :always-show-paginator=\"false\"\n          :rows=\"10\"\n          class=\"datatable\"\n        >\n          <PvColumn v-for=\"col of errorUserColumns\" :key=\"col.field\" :field=\"col.field\">\n            <template #header>\n              {{ col.header }}\n            </template>\n            <template #body=\"{ data, field }\">\n              <span>{{ data[field] }}</span>\n            </template>\n          </PvColumn>\n        </PvDataTable>\n      </div>\n    </section>\n  </main>\n</template>\n\n<script setup>\nimport { ref, toRaw, watch, nextTick } from 'vue';\nimport { csvFileToJson, normalizeToLowercase } from '@/helpers';\nimport _cloneDeep from 'lodash/cloneDeep';\nimport _forEach from 'lodash/forEach';\nimport _capitalize from 'lodash/capitalize';\nimport _isEmpty from 'lodash/isEmpty';\nimport _startCase from 'lodash/startCase';\nimport _chunk from 'lodash/chunk';\nimport { useToast } from 'primevue/usetoast';\nimport AddUsersInfo from '@/components/userInfo/AddUsersInfo.vue';\nimport { useAuthStore } from '@/store/auth';\nimport { pluralizeFirestoreCollection } from '@/helpers';\nimport { fetchOrgByName } from '@/helpers/query/orgs';\nimport PvButton from 'primevue/button';\nimport PvColumn from 'primevue/column';\nimport PvDataTable from 'primevue/datatable';\nimport PvDivider from 'primevue/divider';\nimport PvFileUpload from 'primevue/fileupload';\nimport { useRouter } from 'vue-router';\nimport { TOAST_DEFAULT_LIFE_DURATION } from '@/constants/toasts';\nconst authStore = useAuthStore();\nconst toast = useToast();\nconst isFileUploaded = ref(false);\nconst rawUserFile = ref({});\nconst registeredUsers = ref([]);\n\n// Primary Table & Dropdown refs\nconst dataTable = ref();\n\n// One or the other of the following columns is required:\n// 'cohort', | 'site', 'school', 'class'\n\n// Month and Year are required only for 'child' or 'student' users\nconst allFields = [\n  {\n    field: 'userType',\n    header: 'User Type',\n    dataType: 'string',\n  },\n  {\n    field: 'month',\n    header: 'Month',\n    dataType: 'number',\n  },\n  {\n    field: 'year',\n    header: 'Year',\n    dataType: 'number',\n  },\n  {\n    field: 'cohort',\n    header: 'Cohort',\n    dataType: 'string',\n  },\n  {\n    field: 'site',\n    header: 'Site',\n    dataType: 'string',\n  },\n  {\n    field: 'school',\n    header: 'School',\n    dataType: 'string',\n  },\n  {\n    field: 'class',\n    header: 'Class',\n    dataType: 'string',\n  },\n];\n\n// Error Users Table refs\nconst errorTable = ref();\nconst errorUsers = ref([]);\nconst errorUserColumns = ref([]);\nconst errorMessage = ref('');\nconst showErrorTable = ref(false);\nconst errorMissingColumns = ref(false);\n\nconst activeSubmit = ref(false);\n\nconst router = useRouter();\n\nwatch(\n  errorUsers,\n  () => {\n    // Scroll to bottom of page after error table is displayed\n    // Using nextTick to ensure the error table is rendered otherwise the scroll\n    // happens before the table is rendered\n    nextTick(() => {\n      window.scrollTo(0, document.body.scrollHeight);\n    });\n  },\n  { deep: true },\n);\n\n// Functions supporting the uploader\nconst onFileUpload = async (event) => {\n  // Reset all error states and data\n  rawUserFile.value = {};\n  errorUsers.value = [];\n  errorUserColumns.value = [];\n  showErrorTable.value = false;\n  errorMessage.value = '';\n  errorTable.value = null;\n  errorMissingColumns.value = false;\n  isFileUploaded.value = false; // Reset the file uploaded state\n  registeredUsers.value = []; // Clear any previously registered users\n  activeSubmit.value = false; // Reset the submit flag\n\n  // Read the file\n  const file = event.files[0];\n\n  // Parse the file directly with csvFileToJson\n  const parsedData = await csvFileToJson(file);\n\n  // Check if there's any data\n  if (!parsedData || parsedData.length === 0) {\n    toast.add({\n      severity: 'error',\n      summary: 'Error: Empty File',\n      detail: 'The uploaded file contains no data',\n      life: TOAST_DEFAULT_LIFE_DURATION,\n    });\n    return;\n  }\n\n  // Store the parsed data\n  rawUserFile.value = parsedData;\n\n  // REGISTRATION\n  // Required: userType\n  // Conditional (child): Month, Year\n  // Conditional (Either): Cohort OR Site + School\n\n  // Get all column names from the first row, case-insensitive check for userType\n  const firstRow = toRaw(rawUserFile.value[0]);\n  const allColumns = Object.keys(firstRow).map((col) => col.toLowerCase());\n\n  // Check if userType column exists (case-insensitive)\n  const hasUserType = allColumns.includes('usertype');\n  if (!hasUserType) {\n    toast.add({\n      severity: 'error',\n      summary: 'Error: Missing Column',\n      detail: 'Missing required column(s): userType',\n      life: TOAST_DEFAULT_LIFE_DURATION,\n    });\n    errorMissingColumns.value = true;\n    return;\n  }\n\n  // Check conditional columns are present\n  const hasChild = rawUserFile.value.some((user) => {\n    const userTypeValue = Object.keys(user).find((key) => key.toLowerCase() === 'usertype');\n    return userTypeValue && user[userTypeValue].toLowerCase() === 'child';\n  });\n\n  if (hasChild) {\n    const hasMonth = allColumns.includes('month');\n    const hasYear = allColumns.includes('year');\n    if (!hasMonth || !hasYear) {\n      toast.add({\n        severity: 'error',\n        summary: 'Error: Missing Column',\n        detail: 'Missing required column(s): Month or Year',\n        life: TOAST_DEFAULT_LIFE_DURATION,\n      });\n      errorMissingColumns.value = true;\n      return;\n    }\n  }\n\n  // Conditional (Either): Cohort OR Site + School\n  const hasCohort = allColumns.includes('cohort');\n  const hasSite = allColumns.includes('site');\n  const hasSchool = allColumns.includes('school');\n  if (!hasCohort && (!hasSite || !hasSchool)) {\n    toast.add({\n      severity: 'error',\n      summary: 'Error: Missing Column',\n      detail: 'Missing required column(s): Cohort OR Site and School',\n      life: TOAST_DEFAULT_LIFE_DURATION,\n    });\n    return;\n  }\n\n  // Check required fields are not empty\n  const childRequiredInfo = ['usertype', 'month', 'year'];\n  const careGiverRequiredInfo = ['usertype'];\n\n  rawUserFile.value.forEach((user) => {\n    const missingFields = [];\n    const invalidFields = []; // Store fields with invalid format/value\n\n    // Get the actual userType field name (preserving original case)\n    const userTypeField = Object.keys(user).find((key) => key.toLowerCase() === 'usertype');\n    const userTypeValue = userTypeField ? user[userTypeField]?.toLowerCase() : null;\n\n    // --- Field Presence Checks ---\n    if (!userTypeField || !userTypeValue) {\n      missingFields.push('userType');\n    } else {\n      // --- Field Value/Format Validation ---\n      const validUserTypes = ['child', 'teacher', 'caregiver'];\n      if (!validUserTypes.includes(userTypeValue)) {\n        invalidFields.push(`userType must be one of: ${validUserTypes.join(', ')}`);\n      }\n\n      // --- Child Specific Checks ---\n      if (userTypeValue === 'child') {\n        // Check required fields for child\n        childRequiredInfo.forEach((requiredField) => {\n          const actualField = Object.keys(user).find((key) => key.toLowerCase() === requiredField);\n          if (!actualField || !user[actualField]) {\n            missingFields.push(requiredField === 'usertype' ? 'userType' : requiredField);\n          } else {\n            // Validate month and year format if present\n            if (requiredField === 'month') {\n              const monthField = Object.keys(user).find((key) => key.toLowerCase() === 'month');\n              const monthValue = monthField ? parseInt(user[monthField], 10) : NaN;\n              if (isNaN(monthValue) || monthValue < 1 || monthValue > 12) {\n                invalidFields.push('month must be a number between 1 and 12');\n              }\n            }\n            if (requiredField === 'year') {\n              const yearField = Object.keys(user).find((key) => key.toLowerCase() === 'year');\n              const yearValue = yearField ? user[yearField] : '';\n              if (!/^\\d{4}$/.test(yearValue)) {\n                // Check if it's exactly 4 digits\n                invalidFields.push('year must be a four-digit number');\n              }\n            }\n          }\n        });\n      } else if (userTypeValue === 'caregiver' || userTypeValue === 'teacher') {\n        // Check required fields for caregiver/teacher\n        careGiverRequiredInfo.forEach((requiredField) => {\n          const actualField = Object.keys(user).find((key) => key.toLowerCase() === requiredField);\n          if (!actualField || !user[actualField]) {\n            missingFields.push(requiredField === 'usertype' ? 'userType' : requiredField);\n          }\n        });\n      }\n    }\n\n    // --- Org Presence Checks (Cohort OR Site+School) ---\n    const cohortField = Object.keys(user).find((key) => key.toLowerCase() === 'cohort');\n    const siteField = Object.keys(user).find((key) => key.toLowerCase() === 'site');\n    const schoolField = Object.keys(user).find((key) => key.toLowerCase() === 'school');\n\n    // Parse and check if arrays are non-empty after splitting and trimming\n    const hasCohort =\n      cohortField &&\n      user[cohortField] &&\n      user[cohortField]\n        .split(',')\n        .map((s) => s.trim())\n        .filter((s) => s).length > 0;\n    const hasSite =\n      siteField &&\n      user[siteField] &&\n      user[siteField]\n        .split(',')\n        .map((s) => s.trim())\n        .filter((s) => s).length > 0;\n    const hasSchool =\n      schoolField &&\n      user[schoolField] &&\n      user[schoolField]\n        .split(',')\n        .map((s) => s.trim())\n        .filter((s) => s).length > 0;\n\n    if (!hasSite) {\n      missingFields.push('Site');\n    }\n\n    if (!hasCohort && !hasSchool) {\n      missingFields.push('Cohort OR School');\n    }\n\n    // --- Aggregate Errors and Add User to Error List if Needed ---\n    let errorMessages = [];\n    if (missingFields.length > 0) {\n      errorMessages.push(`Missing Field(s): ${missingFields.join(', ')}`);\n    }\n    if (invalidFields.length > 0) {\n      errorMessages.push(`Invalid Field(s): ${invalidFields.join('; ')}`);\n    }\n\n    if (errorMessages.length > 0) {\n      addErrorUser(user, errorMessages.join('. '));\n    }\n  });\n\n  // --- Post-Loop Error Handling & Success Notification ---\n  if (errorUsers.value.length) {\n    toast.add({\n      severity: 'error',\n      summary: 'Validation Errors. See below for details.', // Updated summary\n      life: TOAST_DEFAULT_LIFE_DURATION,\n    });\n  } else {\n    // Only set isFileUploaded to true if there are NO errors at all\n    isFileUploaded.value = true;\n    errorMissingColumns.value = false;\n    showErrorTable.value = false;\n    toast.add({\n      severity: 'success',\n      summary: 'Success',\n      detail: 'File Successfully Uploaded',\n      life: TOAST_DEFAULT_LIFE_DURATION,\n    });\n  }\n};\n\nfunction generateColumns(rawJson) {\n  let columns = [];\n  const columnValues = Object.keys(rawJson);\n  _forEach(columnValues, (col) => {\n    // Hide orgIds column\n    if (col === 'orgIds') return;\n\n    let dataType = typeof rawJson[col];\n    if (dataType === 'object') {\n      if (rawJson[col] instanceof Date) dataType = 'date';\n    }\n    columns.push({\n      field: col,\n      header: _startCase(col),\n      dataType: dataType,\n    });\n  });\n  return columns;\n}\n\nasync function submitUsers() {\n  // Check if there are any errors before proceeding\n  if (errorUsers.value.length > 0) {\n    toast.add({\n      severity: 'error',\n      summary: 'Cannot Submit',\n      detail: 'Please fix the errors in your CSV file before submitting',\n      life: 5000,\n    });\n    return;\n  }\n\n  // Reset error users\n  activeSubmit.value = true;\n  errorUsers.value = [];\n  errorUserColumns.value = [];\n  showErrorTable.value = false;\n  errorMessage.value = '';\n\n  // Get users to be registered (those with empty uid)\n  const usersToBeRegistered = _cloneDeep(toRaw(rawUserFile.value))\n    .map((user, index) => ({\n      user,\n      index,\n    }))\n    .filter(({ user }) => !user.uid || user.uid === '');\n  const usersWithErrors = [];\n\n  // If no users to register, show message and return\n  if (usersToBeRegistered.length === 0) {\n    toast.add({\n      severity: 'info',\n      summary: 'No New Users to Register',\n      detail: 'All users in the file have already been registered',\n      life: TOAST_DEFAULT_LIFE_DURATION,\n    });\n    activeSubmit.value = false;\n    return;\n  }\n\n  // Check orgs exist\n  for (const { user, index } of usersToBeRegistered) {\n    try {\n      // Find fields case-insensitively\n      const siteField = Object.keys(user).find((key) => key.toLowerCase() === 'site');\n      const schoolField = Object.keys(user).find((key) => key.toLowerCase() === 'school');\n      const classField = Object.keys(user).find((key) => key.toLowerCase() === 'class');\n      const cohortField = Object.keys(user).find((key) => key.toLowerCase() === 'cohort');\n\n      // Get values using the actual field names and parse as comma-separated arrays\n      const sites = siteField\n        ? user[siteField]\n            .split(',')\n            .map((s) => s.trim())\n            .filter((s) => s)\n        : [];\n      const schools = schoolField\n        ? user[schoolField]\n            .split(',')\n            .map((s) => s.trim())\n            .filter((s) => s)\n        : [];\n      const classes = classField\n        ? user[classField]\n            .split(',')\n            .map((s) => s.trim())\n            .filter((s) => s)\n        : [];\n      const cohorts = cohortField\n        ? user[cohortField]\n            .split(',')\n            .map((s) => s.trim())\n            .filter((s) => s)\n        : [];\n\n      // At least, one site is required for every user\n      if (sites.length <= 0) {\n        toast.add({\n          severity: 'error',\n          summary: 'Required field missing',\n          detail: 'At least, one site is required for every user.',\n          life: TOAST_DEFAULT_LIFE_DURATION,\n        });\n\n        activeSubmit.value = false;\n        return;\n      }\n\n      // At least, one school or cohort is required for every user\n      if (schools.length <= 0 && cohorts.length <= 0) {\n        toast.add({\n          severity: 'error',\n          summary: 'Required field missing',\n          detail: 'At least, one school or cohort is required for every user.',\n          life: TOAST_DEFAULT_LIFE_DURATION,\n        });\n\n        activeSubmit.value = false;\n        return;\n      }\n\n      const orgNameMap = {\n        site: sites,\n        school: schools,\n        class: classes,\n        cohort: cohorts,\n      };\n\n      // Pluralized because of a ROAR change to the createUsers function.\n      // Only groups are allowed to be an array however, we've only been using one group per user.\n      // TODO: Figure out if we want to allow multiple orgs\n      const orgInfo = {\n        sites: [],\n        schools: [],\n        classes: [],\n        cohorts: [],\n      };\n\n      // If orgType is a given column, check if the name is\n      //   associated with a valid id. If so, add the id to\n      //   the sendObject. If not, reject user\n      for (const [orgType, orgNames] of Object.entries(orgNameMap)) {\n        if (orgNames && orgNames.length > 0) {\n          try {\n            if (orgType === 'school') {\n              // Need a site for schools - try each school with each site\n              if (sites.length === 0) {\n                throw new Error('Schools specified but no site provided');\n              }\n              for (const schoolName of orgNames) {\n                let schoolFound = false;\n                for (const siteName of sites) {\n                  try {\n                    const siteId = await getOrgId('districts', siteName);\n                    const schoolId = await getOrgId(\n                      pluralizeFirestoreCollection(orgType),\n                      schoolName,\n                      ref(siteId),\n                      ref(undefined),\n                    );\n                    orgInfo.schools.push(schoolId);\n                    schoolFound = true;\n                    break; // Found valid parent, move to next school\n                  } catch (error) {\n                    // Try next site\n                    continue;\n                  }\n                }\n                if (!schoolFound) {\n                  throw new Error(`School '${schoolName}' not found in any of the specified sites`);\n                }\n              }\n            } else if (orgType === 'class') {\n              // Need site and school for classes - try each class with each site/school combination\n              if (sites.length === 0 || schools.length === 0) {\n                throw new Error('Classes specified but no site or school provided');\n              }\n              for (const className of orgNames) {\n                let classFound = false;\n                for (const siteName of sites) {\n                  for (const schoolName of schools) {\n                    try {\n                      const siteId = await getOrgId('districts', siteName);\n                      const schoolId = await getOrgId('schools', schoolName);\n                      const classId = await getOrgId(\n                        pluralizeFirestoreCollection(orgType),\n                        className,\n                        ref(siteId),\n                        ref(schoolId),\n                      );\n                      orgInfo.classes.push(classId);\n                      classFound = true;\n                      break; // Found valid parent, move to next class\n                    } catch (error) {\n                      // Try next site/school combination\n                      continue;\n                    }\n                  }\n                  if (classFound) break; // Break out of site loop if class was found\n                }\n                if (!classFound) {\n                  throw new Error(`Class '${className}' not found in any of the specified site/school combinations`);\n                }\n              }\n            } else if (orgType === 'cohort') {\n              for (const cohortName of orgNames) {\n                const cohortId = await getOrgId(\n                  pluralizeFirestoreCollection('groups'),\n                  cohortName,\n                  ref(undefined),\n                  ref(undefined),\n                );\n                orgInfo.cohorts.push(cohortId);\n              }\n            } else if (orgType === 'site') {\n              for (const siteName of orgNames) {\n                const siteId = await getOrgId(\n                  pluralizeFirestoreCollection('districts'),\n                  siteName,\n                  ref(undefined),\n                  ref(undefined),\n                );\n                orgInfo.sites.push(siteId);\n              }\n            }\n          } catch (error) {\n            // Add the user to the error list with the specific organization error\n            usersWithErrors.push({\n              user,\n              index,\n              error: `Invalid ${_capitalize(orgType)}: ${error.message}`,\n            });\n            break; // Break out of the orgType loop for this user\n          }\n        }\n      }\n\n      if (!_isEmpty(orgInfo)) {\n        // The backend expects districts and groups for site and cohort respectively\n        orgInfo.districts = orgInfo.sites;\n        delete orgInfo.sites;\n        orgInfo.groups = orgInfo.cohorts;\n        delete orgInfo.cohorts;\n        user.orgIds = orgInfo;\n      } else if (!usersWithErrors.some((err) => err.user === user)) {\n        // Only add this error if the user doesn't already have an error\n        usersWithErrors.push({\n          user,\n          index,\n          error: 'No valid organization information found',\n        });\n      }\n    } catch (error) {\n      usersWithErrors.push({\n        user,\n        index,\n        error: error.message,\n      });\n    }\n  }\n\n  // If there are any errors, display them and return\n  if (usersWithErrors.length > 0) {\n    // Generate columns from the first user if needed\n    if (_isEmpty(errorUserColumns.value)) {\n      errorUserColumns.value = generateColumns(usersWithErrors[0].user);\n      errorUserColumns.value.unshift({\n        dataType: 'string',\n        field: 'error',\n        header: 'Cause of Error',\n      });\n    }\n\n    // Add all users with errors to the error table\n    usersWithErrors.forEach(({ user, error }) => {\n      addErrorUser(user, error);\n    });\n\n    showErrorTable.value = true;\n    activeSubmit.value = false;\n    return;\n  }\n\n  // TODO: Figure out deadline-exceeded error with 700+ users. (Registration works fine, creates all documents but the client recieves the error)\n  const chunkedUsersToBeRegistered = _chunk(usersToBeRegistered, 700);\n\n  // Begin submit process\n  // Org must be created before users can be created\n  let processedUserCount = 0;\n  for (const users of chunkedUsersToBeRegistered) {\n    try {\n      // Ensure each user has the proper userType field name for the backend\n      const processedUsers = users.map(({ user }) => {\n        const processedUser = { ...user };\n\n        // Find the userType field (case-insensitive)\n        const userTypeField = Object.keys(user).find((key) => key.toLowerCase() === 'usertype');\n\n        // Ensure the key is exactly 'userType' and handle potential casing issues\n        if (userTypeField) {\n          const userTypeValue = user[userTypeField];\n          // Set the key to 'userType' regardless of original casing\n          processedUser.userType = userTypeValue;\n          // Remove the original field if the casing was different\n          if (userTypeField !== 'userType') {\n            delete processedUser[userTypeField];\n          }\n\n          // *** Add check to convert 'caregiver' value to 'parent' ***\n          if (typeof userTypeValue === 'string' && userTypeValue.toLowerCase() === 'caregiver') {\n            processedUser.userType = 'parent';\n          }\n        }\n\n        return processedUser;\n      });\n\n      // This is the most likely place for an error, due to\n      // permissions, etc. If so, drop to Catch block\n      const res = await authStore.createUsers(processedUsers);\n      const currentRegisteredUsers = res.data.data;\n\n      // Update only the newly registered users\n      currentRegisteredUsers.forEach((registeredUser, index) => {\n        const originalIndex = users[index].index;\n        if (originalIndex < rawUserFile.value.length) {\n          // Preserve all existing user data and update with new registration data\n          rawUserFile.value[originalIndex] = {\n            ...rawUserFile.value[originalIndex],\n            email: registeredUser.email,\n            password: registeredUser.password,\n            uid: registeredUser.uid,\n          };\n        }\n      });\n\n      registeredUsers.value.push(...currentRegisteredUsers);\n\n      // Update the count of processed users\n      processedUserCount += currentRegisteredUsers.length;\n      toast.add({\n        severity: 'success',\n        summary: 'User Creation Successful',\n        life: TOAST_DEFAULT_LIFE_DURATION,\n      });\n      convertUsersToCSV();\n    } catch (error) {\n      // TODO: Show users that failed to register\n      console.error(error);\n\n      toast.add({\n        severity: 'error',\n        summary: 'Error registering users: ' + error.message,\n        life: TOAST_DEFAULT_LIFE_DURATION,\n      });\n    }\n  }\n\n  /* We want to clear this flag whether we got an error or not */\n  activeSubmit.value = false;\n}\n\nconst csvBlob = ref(null);\nconst csvURL = ref(null);\n\nfunction convertUsersToCSV() {\n  // Get the first user to determine headers\n  const headerObj = toRaw(rawUserFile.value[0]);\n\n  // Convert Objects to CSV String\n  const csvHeader = Object.keys(headerObj).join(',') + '\\n';\n\n  // Get all users from rawUserFile (which now contains updated data for newly registered users)\n  const allUsers = toRaw(rawUserFile.value);\n\n  const csvRows = allUsers\n    .map((obj) =>\n      Object.values(obj)\n        .map((value) => {\n          if (value === null || value === undefined) return '';\n          return `\"${value.toString().replace(/\"/g, '\"\"')}\"`;\n        })\n        .join(','),\n    )\n    .join('\\n');\n\n  const csvString = csvHeader + csvRows;\n\n  // Create Blob from CSV String\n  csvBlob.value = new Blob([csvString], { type: 'text/csv;charset=utf-8;' });\n\n  // Create URL from Blob\n  csvURL.value = URL.createObjectURL(csvBlob.value);\n\n  // Initiate download\n  downloadCSV();\n}\n\nfunction downloadCSV() {\n  const filename = 'registered-users.csv';\n\n  if (csvURL.value) {\n    // Create Download Link\n    const link = document.createElement('a');\n    link.setAttribute('href', csvURL.value);\n    link.setAttribute('download', filename);\n    document.body.appendChild(link); // Required for Firefox\n\n    // Trigger the Download\n    link.click();\n\n    // Cleanup\n    document.body.removeChild(link);\n  }\n}\n\nfunction addErrorUser(user, error) {\n  // If there are no error users yet, generate the\n  //  columns before displaying the table.\n  if (_isEmpty(errorUserColumns.value)) {\n    errorUserColumns.value = generateColumns(user);\n    errorUserColumns.value.unshift({\n      dataType: 'string',\n      field: 'error',\n      header: 'Cause of Error',\n    });\n    showErrorTable.value = true;\n  }\n  // Concat the userObject with the error reason.\n  errorUsers.value.push({\n    ...user,\n    error,\n  });\n}\n\n// TODO: Refactor this to be a single call\nconst orgIds = {\n  districts: {},\n  schools: {},\n  classes: {},\n  groups: {},\n};\n\n/**\n * Retrieves the ID of an Group based on its type and name.\n * If the ID is not already cached, it fetches it from the server.\n *\n * @async\n * @function getOrgId\n * @param {string} orgType - The type of Group (e.g., 'districts', 'schools', 'classes', 'groups').\n * @param {string} orgName - The name of the Group.\n * @param {Object|undefined} parentDistrict - The parent district reference, if applicable.\n * @param {Object|undefined} parentSchool - The parent school reference, if applicable.\n * @returns {Promise<String>} A promise that resolves to a string representing the Group ID.\n * @throws {Error} Throws an error if no Group is found for the given type and name.\n *\n * @example\n * // Get the ID for a school\n * const schoolInfo = await getOrgId('schools', 'High School A', districtRef, undefined);\n *\n * @description\n * This function first checks if the Group ID is already cached in the `orgIds.value` object.\n * If not, it calls the `fetchOrgByName` function to retrieve the Group details from the server.\n * The fetched data is then cached for future use.\n * If no Group is found, it throws an error.\n */\nconst getOrgId = async (orgType, orgName, parentDistrict = ref(null), parentSchool = ref(null)) => {\n  const normalizedOrgName = normalizeToLowercase(orgName);\n\n  if (orgIds[orgType][normalizedOrgName]) return orgIds[orgType][normalizedOrgName];\n\n  // Array of objects. Ex: [{id: 'lut54353jkler'}]\n  const orgs = await fetchOrgByName(orgType, normalizedOrgName, parentDistrict, parentSchool);\n\n  if (orgs.length === 0) {\n    if (orgType === 'districts') {\n      throw new Error(`No Groups found for site '${orgName}'`);\n    } else if (orgType === 'groups') {\n      throw new Error(`No Groups found for cohort '${orgName}'`);\n    } else {\n      throw new Error(`No Groups found for ${orgType} '${orgName}'`);\n    }\n  }\n\n  orgIds[orgType][normalizedOrgName] = orgs[0].id;\n\n  return orgs[0].id;\n};\n</script>\n\n<style scoped>\n.extra-height {\n  min-height: 33vh;\n}\n\n.optional-fields {\n  margin-bottom: 2rem;\n}\n\n.error-box {\n  padding: 0.5rem;\n  margin-top: 0.5rem;\n  margin-bottom: 0.5rem;\n  background-color: var(--red-300);\n  border-radius: 5px;\n  border: 1px solid var(--red-600);\n  color: var(--red-600);\n  font-weight: bold;\n}\n\n.col-header {\n  display: flex;\n  flex-direction: column;\n}\n\n.submit-container {\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  margin-top: 2rem;\n  align-items: flex-start;\n}\n\n.button-group {\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  gap: 1rem;\n  width: auto;\n}\n\n.download-button {\n  background-color: var(--primary-color);\n  color: white;\n  border: none;\n  border-radius: 0.5rem;\n  padding: 0.75rem 1rem;\n  font-size: 0.8rem;\n  font-weight: 600;\n  height: 2.5rem;\n  width: auto;\n}\n\n.continue-button {\n  color: white;\n  border: none;\n  border-radius: 0.5rem;\n  padding: 0.75rem 1.5rem;\n  font-size: 1.1rem;\n  font-weight: 600;\n  height: 3.5rem;\n  width: auto;\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n}\n\n.error {\n  color: red;\n}\n\n.datatable {\n  border: 1px solid var(--surface-d);\n  border-radius: 5px;\n}\n\n.error-container {\n  margin-top: 1rem;\n}\n\n.error-header {\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  padding-bottom: 0.5rem;\n}\n\n.orgs-container {\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  margin-top: -1rem;\n  margin-bottom: 1rem;\n}\n\n.org-dropdown {\n  margin-right: 3rem;\n  margin-top: 2rem;\n}\n</style>\n"],"names":["generateTemplateFile","csvContent","downloadTemplate","blob","link","url","_createBlock","_unref","PvPanel","_createElementVNode","_cache","_hoisted_1","LEVANTE_BUCKET_URL","authStore","useAuthStore","toast","useToast","isFileUploaded","ref","rawUserFile","registeredUsers","dataTable","allFields","errorTable","errorUsers","errorUserColumns","errorMessage","showErrorTable","errorMissingColumns","activeSubmit","router","useRouter","watch","nextTick","onFileUpload","event","file","parsedData","csvFileToJson","TOAST_DEFAULT_LIFE_DURATION","firstRow","toRaw","allColumns","col","user","userTypeValue","key","hasMonth","hasYear","hasCohort","hasSite","hasSchool","childRequiredInfo","careGiverRequiredInfo","missingFields","invalidFields","userTypeField","_a","validUserTypes","requiredField","actualField","monthField","monthValue","yearField","yearValue","cohortField","siteField","schoolField","s","errorMessages","addErrorUser","generateColumns","rawJson","columns","columnValues","_forEach","dataType","_startCase","submitUsers","usersToBeRegistered","_cloneDeep","index","usersWithErrors","classField","sites","schools","classes","cohorts","orgNameMap","orgInfo","orgType","orgNames","schoolName","schoolFound","siteName","siteId","getOrgId","schoolId","pluralizeFirestoreCollection","className","classFound","classId","cohortName","cohortId","error","_capitalize","_isEmpty","err","chunkedUsersToBeRegistered","_chunk","processedUserCount","users","processedUsers","processedUser","currentRegisteredUsers","registeredUser","originalIndex","convertUsersToCSV","csvBlob","csvURL","headerObj","csvHeader","csvRows","obj","value","csvString","downloadCSV","filename","orgIds","orgName","parentDistrict","parentSchool","normalizedOrgName","normalizeToLowercase","orgs","fetchOrgByName","_openBlock","_createElementBlock","_hoisted_2","_createVNode","AddUsersInfo","PvDivider","_hoisted_3","PvFileUpload","$event","_hoisted_4","PvDataTable","_Fragment","_renderList","PvColumn","_hoisted_5","_toDisplayString","_withCtx","data","field","_hoisted_6","_hoisted_7","PvButton","_hoisted_8","_createTextVNode"],"mappings":"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"}