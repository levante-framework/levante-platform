{"version":3,"file":"useTasksQuery-DLa8TwAo.js","sources":["../../src/composables/queries/useTasksQuery.ts"],"sourcesContent":["import { type MaybeRefOrGetter } from 'vue';\nimport { toValue } from 'vue';\nimport { useQuery } from '@tanstack/vue-query';\nimport _isEmpty from 'lodash/isEmpty';\nimport { taskFetcher, fetchByTaskId } from '@/helpers/query/tasks';\nimport { TASKS_QUERY_KEY } from '@/constants/queryKeys';\n\n/**\n * Tasks query.\n *\n * @param {ref<Boolean>} [registeredTasksOnly=false] – Whether to fetch only registered tasks.\n * @param {ref<Array<String>>|undefined} [taskIds=undefined] – An optional array of task IDs to fetch.\n * @param {QueryOptions|undefined} queryOptions – Optional TanStack query options.\n * @returns {UseQueryResult} The TanStack query result.\n */\nconst useTasksQuery = (\n  registeredTasksOnly = false,\n  taskIds = undefined,\n  queryOptions?: UseQueryOptions,\n): UseQueryReturnType => {\n  const queryKey = toValue(registeredTasksOnly)\n    ? [TASKS_QUERY_KEY, 'registered']\n    : !_isEmpty(taskIds)\n    ? [TASKS_QUERY_KEY, taskIds]\n    : [TASKS_QUERY_KEY];\n\n  const queryFn = !_isEmpty(taskIds) ? () => fetchByTaskId(taskIds) : () => taskFetcher(registeredTasksOnly, true);\n\n  return useQuery({\n    queryKey,\n    queryFn,\n    ...queryOptions,\n  });\n};\n\nexport default useTasksQuery;\n"],"names":["useTasksQuery","registeredTasksOnly","taskIds","queryOptions","queryKey","toValue","TASKS_QUERY_KEY","_isEmpty","queryFn","taskFetcher","fetchByTaskId","useQuery"],"mappings":"4eAeA,MAAMA,EAAgB,CACpBC,EAAsB,GACtBC,EAAU,OACVC,IACuB,CACvB,MAAMC,EAAWC,EAAQJ,CAAmB,EACxC,CAACK,EAAiB,YAAY,EAC7BC,EAASL,CAAO,EAEjB,CAACI,CAAe,EADhB,CAACA,EAAiBJ,CAAO,EAGvBM,EAAWD,EAASL,CAAO,EAAmC,IAAMO,EAAYR,EAAqB,EAAI,EAA1E,IAAMS,EAAcR,CAAO,EAEhE,OAAOS,EAAS,CACd,SAAAP,EACA,QAAAI,EACA,GAAGL,CAAA,CACJ,CACH"}