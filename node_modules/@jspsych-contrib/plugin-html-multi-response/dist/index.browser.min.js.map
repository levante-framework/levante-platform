{"version":3,"file":"index.browser.min.js","sources":["../src/index.ts"],"sourcesContent":["import { JsPsych, JsPsychPlugin, ParameterType, TrialType } from \"jspsych\";\n\nconst info = <const>{\n  name: \"html-multi-response\",\n  parameters: {\n    /** The HTML string to be displayed */\n    stimulus: {\n      type: ParameterType.HTML_STRING,\n      pretty_name: \"Stimulus\",\n      default: undefined,\n    },\n    /** Array containing the label(s) for the button(s). */\n    button_choices: {\n      type: ParameterType.STRING,\n      pretty_name: \"Button Choices\",\n      default: [],\n      array: true,\n    },\n    /**\n     * Array containing the key(s) the subject is allowed to press to respond to the stimulus.\n     */\n    keyboard_choices: {\n      type: ParameterType.KEYS,\n      pretty_name: \"Keyboard Choices\",\n      default: \"NO_KEYS\",\n    },\n    /** The HTML for creating button. Can create own style. Use the \"%choice%\" string to indicate where the label from the choices parameter should be inserted. */\n    button_html: {\n      type: ParameterType.HTML_STRING,\n      pretty_name: \"Button HTML\",\n      default: '<button class=\"jspsych-btn\">%choice%</button>',\n      array: true,\n    },\n    /** Any content here will be displayed under the button(s). */\n    prompt: {\n      type: ParameterType.HTML_STRING,\n      pretty_name: \"Prompt\",\n      default: null,\n    },\n    /** How long to show the stimulus. */\n    stimulus_duration: {\n      type: ParameterType.INT,\n      pretty_name: \"Stimulus duration\",\n      default: null,\n    },\n    /** How long to show the trial. */\n    trial_duration: {\n      type: ParameterType.INT,\n      pretty_name: \"Trial duration\",\n      default: null,\n    },\n    /** The vertical margin of the button. */\n    margin_vertical: {\n      type: ParameterType.STRING,\n      pretty_name: \"Margin vertical\",\n      default: \"0px\",\n    },\n    /** The horizontal margin of the button. */\n    margin_horizontal: {\n      type: ParameterType.STRING,\n      pretty_name: \"Margin horizontal\",\n      default: \"8px\",\n    },\n    /** If true, then trial will end when user responds. */\n    response_ends_trial: {\n      type: ParameterType.BOOL,\n      pretty_name: \"Response ends trial\",\n      default: true,\n    },\n  },\n};\n\ntype Info = typeof info;\n\n/**\n * html-multi-response\n * jsPsych plugin for displaying an html stimulus and getting a response\n * @author Adam Richie-Halford\n * @see {@link https://www.jspsych.org/plugins/jspsych-html-multi-response/ html-multi-response plugin documentation on jspsych.org}\n */\nclass HtmlMultiResponsePlugin implements JsPsychPlugin<Info> {\n  static info = info;\n\n  constructor(private jsPsych: JsPsych) {}\n\n  trial(display_element: HTMLElement, trial: TrialType<Info>) {\n    // display stimulus\n    var html = '<div id=\"jspsych-html-multi-response-stimulus\">' + trial.stimulus + \"</div>\";\n\n    //display buttons\n    var buttons = [];\n    if (Array.isArray(trial.button_html)) {\n      if (trial.button_html.length == trial.button_choices.length) {\n        buttons = trial.button_html;\n      } else {\n        console.error(\n          \"Error in html-multi-response plugin. The length of the button_html array does not equal the length of the button_choices array\"\n        );\n      }\n    } else {\n      for (var i = 0; i < trial.button_choices.length; i++) {\n        buttons.push(trial.button_html);\n      }\n    }\n    html += '<div id=\"jspsych-html-multi-response-btngroup\">';\n    for (var i = 0; i < trial.button_choices.length; i++) {\n      var str = buttons[i].replace(/%choice%/g, trial.button_choices[i]);\n      html +=\n        '<div class=\"jspsych-html-multi-response-button\" style=\"display: inline-block; margin:' +\n        trial.margin_vertical +\n        \" \" +\n        trial.margin_horizontal +\n        '\" id=\"jspsych-html-multi-response-button-' +\n        i +\n        '\" data-choice=\"' +\n        i +\n        '\">' +\n        str +\n        \"</div>\";\n    }\n    html += \"</div>\";\n\n    //show prompt if there is one\n    if (trial.prompt !== null) {\n      html += trial.prompt;\n    }\n    display_element.innerHTML = html;\n\n    // function to handle responses by the subject\n    var after_keyboard_response = function (info) {\n      // after a valid response, the stimulus will have the CSS class 'responded'\n      // which can be used to provide visual feedback that a response was recorded\n      display_element.querySelector(\"#jspsych-html-multi-response-stimulus\").className +=\n        \" responded\";\n\n      // only record the first response\n      if (response.key == null) {\n        response = {\n          source: \"keyboard\",\n          button: null,\n          ...info,\n        };\n      }\n\n      if (trial.response_ends_trial) {\n        end_trial();\n      }\n    };\n\n    // Add event listener for keys\n    if (trial.keyboard_choices != \"NO_KEYS\") {\n      var keyboardListener = this.jsPsych.pluginAPI.getKeyboardResponse({\n        callback_function: after_keyboard_response,\n        valid_responses: trial.keyboard_choices,\n        rt_method: \"performance\",\n        persist: false,\n        allow_held_key: false,\n      });\n    }\n\n    // start time\n    var start_time = performance.now();\n\n    // add event listeners to buttons\n    for (var i = 0; i < trial.button_choices.length; i++) {\n      display_element\n        .querySelector(\"#jspsych-html-multi-response-button-\" + i)\n        .addEventListener(\"click\", (e) => {\n          var btn_el = e.currentTarget as HTMLButtonElement;\n          var choice = btn_el.getAttribute(\"data-choice\"); // don't use dataset for jsdom compatibility\n          after_response(choice);\n        });\n    }\n\n    // store response\n    var response = {\n      rt: null,\n      button: null,\n      key: null,\n      source: null,\n    };\n\n    // function to end trial when it is time\n    const end_trial = () => {\n      // kill any remaining setTimeout handlers\n      this.jsPsych.pluginAPI.clearAllTimeouts();\n\n      // kill keyboard listeners\n      if (typeof keyboardListener !== \"undefined\") {\n        this.jsPsych.pluginAPI.cancelKeyboardResponse(keyboardListener);\n      }\n\n      // gather the data to store for the trial\n      var trial_data = {\n        rt: response.rt,\n        stimulus: trial.stimulus,\n        button_response: response.button,\n        keyboard_response: response.key,\n        response_source: response.source,\n      };\n\n      // clear the display\n      display_element.innerHTML = \"\";\n\n      // move on to the next trial\n      this.jsPsych.finishTrial(trial_data);\n    };\n\n    // function to handle responses by the subject\n    function after_response(choice) {\n      // measure rt\n      var end_time = performance.now();\n      var rt = Math.round(end_time - start_time);\n      response.button = parseInt(choice);\n      response.rt = rt;\n      response.source = \"button\";\n\n      // after a valid response, the stimulus will have the CSS class 'responded'\n      // which can be used to provide visual feedback that a response was recorded\n      display_element.querySelector(\"#jspsych-html-multi-response-stimulus\").className +=\n        \" responded\";\n\n      // disable all the buttons after a response\n      var btns = document.querySelectorAll(\".jspsych-html-multi-response-button button\");\n      for (var i = 0; i < btns.length; i++) {\n        //btns[i].removeEventListener('click');\n        btns[i].setAttribute(\"disabled\", \"disabled\");\n      }\n\n      if (trial.response_ends_trial) {\n        end_trial();\n      }\n    }\n\n    // hide image if timing is set\n    if (trial.stimulus_duration !== null) {\n      this.jsPsych.pluginAPI.setTimeout(() => {\n        display_element.querySelector<HTMLElement>(\n          \"#jspsych-html-multi-response-stimulus\"\n        ).style.visibility = \"hidden\";\n      }, trial.stimulus_duration);\n    }\n\n    // end trial if time limit is set\n    if (trial.trial_duration !== null) {\n      this.jsPsych.pluginAPI.setTimeout(end_trial, trial.trial_duration);\n    }\n  }\n\n  simulate(\n    trial: TrialType<Info>,\n    simulation_mode,\n    simulation_options: any,\n    load_callback: () => void\n  ) {\n    if (simulation_mode == \"data-only\") {\n      load_callback();\n      this.simulate_data_only(trial, simulation_options);\n    }\n    if (simulation_mode == \"visual\") {\n      this.simulate_visual(trial, simulation_options, load_callback);\n    }\n  }\n\n  private create_simulation_data(trial: TrialType<Info>, simulation_options) {\n    const keyboard_data = {\n      stimulus: trial.stimulus,\n      rt: this.jsPsych.randomization.sampleExGaussian(500, 50, 1 / 150, true),\n      keyboard_response: this.jsPsych.pluginAPI.getValidKey(trial.keyboard_choices),\n      button_response: null,\n      response_source: \"keyboard\",\n    };\n\n    const button_data = {\n      stimulus: trial.stimulus,\n      rt: this.jsPsych.randomization.sampleExGaussian(500, 50, 1 / 150, true),\n      button_response: this.jsPsych.randomization.randomInt(0, trial.button_choices.length - 1),\n      keyboard_response: null,\n      response_source: \"button\",\n    };\n\n    const default_data = Math.random() < 0.5 ? keyboard_data : button_data;\n\n    const data = this.jsPsych.pluginAPI.mergeSimulationData(default_data, simulation_options);\n\n    this.jsPsych.pluginAPI.ensureSimulationDataConsistency(trial, data);\n\n    return data;\n  }\n\n  private simulate_data_only(trial: TrialType<Info>, simulation_options) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    this.jsPsych.finishTrial(data);\n  }\n\n  private simulate_visual(trial: TrialType<Info>, simulation_options, load_callback: () => void) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    const display_element = this.jsPsych.getDisplayElement();\n\n    this.trial(display_element, trial);\n    load_callback();\n\n    if (data.rt !== null) {\n      if (data.button_response !== null) {\n        this.jsPsych.pluginAPI.clickTarget(\n          display_element.querySelector(`div[data-choice=\"${data.button_response}\"] button`),\n          data.rt\n        );\n      } else {\n        this.jsPsych.pluginAPI.pressKey(data.keyboard_response, data.rt);\n      }\n    }\n  }\n}\n\nexport default HtmlMultiResponsePlugin;\n"],"names":["info","name","parameters","stimulus","type","ParameterType","HTML_STRING","pretty_name","default","undefined","button_choices","STRING","array","keyboard_choices","KEYS","button_html","prompt","stimulus_duration","INT","trial_duration","margin_vertical","margin_horizontal","response_ends_trial","BOOL","HtmlMultiResponsePlugin","jsPsych","_classCallCheck","this","display_element","trial","_this","html","buttons","Array","isArray","length","console","error","i","push","str","replace","innerHTML","keyboardListener","pluginAPI","getKeyboardResponse","callback_function","querySelector","className","response","key","Object","assign","source","button","end_trial","valid_responses","rt_method","persist","allow_held_key","start_time","performance","now","addEventListener","e","after_response","currentTarget","getAttribute","rt","clearAllTimeouts","cancelKeyboardResponse","trial_data","button_response","keyboard_response","response_source","finishTrial","choice","end_time","Math","round","parseInt","btns","document","querySelectorAll","setAttribute","setTimeout","style","visibility","value","simulation_mode","simulation_options","load_callback","simulate_data_only","simulate_visual","keyboard_data","randomization","sampleExGaussian","getValidKey","button_data","randomInt","default_data","random","data","mergeSimulationData","ensureSimulationDataConsistency","create_simulation_data","getDisplayElement","clickTarget","concat","pressKey"],"mappings":"4NAEA,IAAMA,EAAc,CAClBC,KAAM,sBACNC,WAAY,CAEVC,SAAU,CACRC,KAAMC,EAAaA,cAACC,YACpBC,YAAa,WACbC,aAASC,GAGXC,eAAgB,CACdN,KAAMC,EAAaA,cAACM,OACpBJ,YAAa,iBACbC,QAAS,GACTI,OAAO,GAKTC,iBAAkB,CAChBT,KAAMC,EAAaA,cAACS,KACpBP,YAAa,mBACbC,QAAS,WAGXO,YAAa,CACXX,KAAMC,EAAaA,cAACC,YACpBC,YAAa,cACbC,QAAS,gDACTI,OAAO,GAGTI,OAAQ,CACNZ,KAAMC,EAAaA,cAACC,YACpBC,YAAa,SACbC,QAAS,MAGXS,kBAAmB,CACjBb,KAAMC,EAAaA,cAACa,IACpBX,YAAa,oBACbC,QAAS,MAGXW,eAAgB,CACdf,KAAMC,EAAaA,cAACa,IACpBX,YAAa,iBACbC,QAAS,MAGXY,gBAAiB,CACfhB,KAAMC,EAAaA,cAACM,OACpBJ,YAAa,kBACbC,QAAS,OAGXa,kBAAmB,CACjBjB,KAAMC,EAAaA,cAACM,OACpBJ,YAAa,oBACbC,QAAS,OAGXc,oBAAqB,CACnBlB,KAAMC,EAAaA,cAACkB,KACpBhB,YAAa,sBACbC,SAAS,KAaTgB,aAGJ,SAAAA,EAAoBC,gGAAgBC,CAAAC,KAAAH,GAAhBG,KAAOF,QAAPA,CAAoB,4CAExC,SAAMG,EAA8BC,GAAsB,IAAAC,EAAAH,KAEpDI,EAAO,kDAAoDF,EAAM1B,SAAW,SAG5E6B,EAAU,GACd,GAAIC,MAAMC,QAAQL,EAAMd,aAClBc,EAAMd,YAAYoB,QAAUN,EAAMnB,eAAeyB,OACnDH,EAAUH,EAAMd,YAEhBqB,QAAQC,MACN,uIAIJ,IAAK,IAAIC,EAAI,EAAGA,EAAIT,EAAMnB,eAAeyB,OAAQG,IAC/CN,EAAQO,KAAKV,EAAMd,aAIvB,IADAgB,GAAQ,kDACCO,EAAI,EAAGA,EAAIT,EAAMnB,eAAeyB,OAAQG,IAAK,CACpD,IAAIE,EAAMR,EAAQM,GAAGG,QAAQ,YAAaZ,EAAMnB,eAAe4B,IAC/DP,GACE,wFACAF,EAAMT,gBACN,IACAS,EAAMR,kBACN,4CACAiB,EACA,kBACAA,EACA,KACAE,EACA,QACH,CA+BD,GA9BAT,GAAQ,SAGa,OAAjBF,EAAMb,SACRe,GAAQF,EAAMb,QAEhBY,EAAgBc,UAAYX,EAwBE,WAA1BF,EAAMhB,iBACR,IAAI8B,EAAmBhB,KAAKF,QAAQmB,UAAUC,oBAAoB,CAChEC,kBAvB0B,SAAU9C,GAGtC4B,EAAgBmB,cAAc,yCAAyCC,WACrE,aAGkB,MAAhBC,EAASC,MACXD,EAAQE,OAAAC,OAAA,CACNC,OAAQ,WACRC,OAAQ,MACLtD,IAIH6B,EAAMP,qBACRiC,GAEH,EAMGC,gBAAiB3B,EAAMhB,iBACvB4C,UAAW,cACXC,SAAS,EACTC,gBAAgB,IAKpB,IAAIC,EAAaC,YAAYC,MAG7B,IAASxB,EAAI,EAAGA,EAAIT,EAAMnB,eAAeyB,OAAQG,IAC/CV,EACGmB,cAAc,uCAAyCT,GACvDyB,iBAAiB,SAAS,SAACC,GAG1BC,EAFaD,EAAEE,cACKC,aAAa,mBAMvC,IAAIlB,EAAW,CACbmB,GAAI,KACJd,OAAQ,KACRJ,IAAK,KACLG,OAAQ,MAIJE,EAAY,WAEhBzB,EAAKL,QAAQmB,UAAUyB,wBAGS,IAArB1B,GACTb,EAAKL,QAAQmB,UAAU0B,uBAAuB3B,GAIhD,IAAI4B,EAAa,CACfH,GAAInB,EAASmB,GACbjE,SAAU0B,EAAM1B,SAChBqE,gBAAiBvB,EAASK,OAC1BmB,kBAAmBxB,EAASC,IAC5BwB,gBAAiBzB,EAASI,QAI5BzB,EAAgBc,UAAY,GAG5BZ,EAAKL,QAAQkD,YAAYJ,EAC1B,EAGD,SAASN,EAAeW,GAEtB,IAAIC,EAAWhB,YAAYC,MACvBM,EAAKU,KAAKC,MAAMF,EAAWjB,GAC/BX,EAASK,OAAS0B,SAASJ,GAC3B3B,EAASmB,GAAKA,EACdnB,EAASI,OAAS,SAIlBzB,EAAgBmB,cAAc,yCAAyCC,WACrE,aAIF,IADA,IAAIiC,EAAOC,SAASC,iBAAiB,8CAC5B7C,EAAI,EAAGA,EAAI2C,EAAK9C,OAAQG,IAE/B2C,EAAK3C,GAAG8C,aAAa,WAAY,YAG/BvD,EAAMP,qBACRiC,GAjJoD,CAsJxB,OAA5B1B,EAAMZ,mBACRU,KAAKF,QAAQmB,UAAUyC,YAAW,WAChCzD,EAAgBmB,cACd,yCACAuC,MAAMC,WAAa,WACpB1D,EAAMZ,mBAIkB,OAAzBY,EAAMV,gBACRQ,KAAKF,QAAQmB,UAAUyC,WAAW9B,EAAW1B,EAAMV,eAEtD,mBAEDqE,MAAA,SACE3D,EACA4D,EACAC,EACAC,GAEuB,aAAnBF,IACFE,IACAhE,KAAKiE,mBAAmB/D,EAAO6D,IAEV,UAAnBD,GACF9D,KAAKkE,gBAAgBhE,EAAO6D,EAAoBC,EAEnD,uCAEO,SAAuB9D,EAAwB6D,GACrD,IAAMI,EAAgB,CACpB3F,SAAU0B,EAAM1B,SAChBiE,GAAIzC,KAAKF,QAAQsE,cAAcC,iBAAiB,IAAK,GAAI,EAAI,KAAK,GAClEvB,kBAAmB9C,KAAKF,QAAQmB,UAAUqD,YAAYpE,EAAMhB,kBAC5D2D,gBAAiB,KACjBE,gBAAiB,YAGbwB,EAAc,CAClB/F,SAAU0B,EAAM1B,SAChBiE,GAAIzC,KAAKF,QAAQsE,cAAcC,iBAAiB,IAAK,GAAI,EAAI,KAAK,GAClExB,gBAAiB7C,KAAKF,QAAQsE,cAAcI,UAAU,EAAGtE,EAAMnB,eAAeyB,OAAS,GACvFsC,kBAAmB,KACnBC,gBAAiB,UAGb0B,EAAetB,KAAKuB,SAAW,GAAMP,EAAgBI,EAErDI,EAAO3E,KAAKF,QAAQmB,UAAU2D,oBAAoBH,EAAcV,GAItE,OAFA/D,KAAKF,QAAQmB,UAAU4D,gCAAgC3E,EAAOyE,GAEvDA,CACR,mCAEO,SAAmBzE,EAAwB6D,GACjD,IAAMY,EAAO3E,KAAK8E,uBAAuB5E,EAAO6D,GAEhD/D,KAAKF,QAAQkD,YAAY2B,EAC1B,0BAEOd,MAAA,SAAgB3D,EAAwB6D,EAAoBC,GAClE,IAAMW,EAAO3E,KAAK8E,uBAAuB5E,EAAO6D,GAE1C9D,EAAkBD,KAAKF,QAAQiF,oBAErC/E,KAAKE,MAAMD,EAAiBC,GAC5B8D,IAEgB,OAAZW,EAAKlC,KACsB,OAAzBkC,EAAK9B,gBACP7C,KAAKF,QAAQmB,UAAU+D,YACrB/E,EAAgBmB,cAAhB,oBAAA6D,OAAkDN,EAAK9B,8BACvD8B,EAAKlC,IAGPzC,KAAKF,QAAQmB,UAAUiE,SAASP,EAAK7B,kBAAmB6B,EAAKlC,IAGlE,iGAzOM5C,EAAIxB,KAAGA"}