{"version":3,"file":"ProgressReport-DkkXbFCv.js","sources":["../../src/composables/queries/useAdministrationsStatsQuery.ts","../../src/composables/queries/useOrgQuery.ts","../../src/composables/queries/useAdministrationAssignmentsQuery.ts","../../src/helpers/getDynamicRouterPath.ts","../../src/pages/ProgressReport.vue"],"sourcesContent":["import { type MaybeRefOrGetter } from 'vue';\nimport { toValue } from 'vue';\nimport { useQuery } from '@tanstack/vue-query';\nimport { computeQueryOverrides } from '@/helpers/computeQueryOverrides';\nimport { hasArrayEntries } from '@/helpers/hasArrayEntries';\nimport { fetchDocsById } from '@/helpers/query/utils';\nimport { ADMINISTRATIONS_STATS_QUERY_KEY } from '@/constants/queryKeys';\nimport { FIRESTORE_COLLECTIONS } from '@/constants/firebase';\n\n/**\n * Administrations stats query.\n *\n * @param {ref<Array<String>>} administrationIds – A Vue ref containing an array of administration IDs to fetch.\n * @param {QueryOptions|undefined} queryOptions – Optional TanStack query options.\n * @returns {UseQueryResult} The TanStack query result.\n */\nconst useAdministrationsStatsQuery = (administrationIds, queryOptions?: UseQueryOptions): UseQueryReturnType => {\n  // Ensure all necessary data is available before enabling the query.\n  const conditions = [() => hasArrayEntries(administrationIds)];\n  const { isQueryEnabled, options } = computeQueryOverrides(conditions, queryOptions);\n\n  return useQuery({\n    queryKey: [ADMINISTRATIONS_STATS_QUERY_KEY, administrationIds],\n    queryFn: () =>\n      fetchDocsById(\n        toValue(administrationIds)?.map((administrationId) => {\n          return {\n            collection: FIRESTORE_COLLECTIONS.ADMINISTRATIONS,\n            docId: `${administrationId}/stats/total`,\n          };\n        }),\n      ),\n    enabled: isQueryEnabled,\n    ...options,\n  });\n};\n\nexport default useAdministrationsStatsQuery;\n","import { computed } from 'vue';\nimport useDistrictsQuery from '@/composables/queries/useDistrictsQuery';\nimport useSchoolsQuery from '@/composables/queries/useSchoolsQuery';\nimport useClassesQuery from '@/composables/queries/useClassesQuery';\nimport useGroupsQuery from '@/composables/queries/useGroupsQuery';\nimport { SINGULAR_ORG_TYPES } from '@/constants/orgTypes';\n\n/**\n * Org Query\n *\n * Query composable for fetching org data based on a dynamic org type.\n *\n * @param {string} orgType – The org type to query.\n * @param {string} orgIds – The array of org IDs to fetch.\n * @param {QueryOptions|undefined} queryOptions – Optional TanStack query options.\n * @returns {UseQueryResult} The TanStack query result.\n */\nexport default function useOrgQuery(orgType, orgIds, queryOptions = undefined) {\n  queryOptions = { enabled: true, ...queryOptions };\n\n  const orgQuery = computed(() => {\n    switch (orgType) {\n      case SINGULAR_ORG_TYPES.DISTRICTS:\n        return useDistrictsQuery(orgIds, queryOptions);\n      case SINGULAR_ORG_TYPES.SCHOOLS:\n        return useSchoolsQuery(orgIds, queryOptions);\n      case SINGULAR_ORG_TYPES.CLASSES:\n        return useClassesQuery(orgIds, queryOptions);\n      case SINGULAR_ORG_TYPES.GROUPS:\n        return useGroupsQuery(orgIds, queryOptions);\n      default:\n        throw new Error(`Unsupported org type: ${orgType}`);\n    }\n  });\n\n  return orgQuery.value;\n}\n","import { type MaybeRefOrGetter } from 'vue';\nimport { toValue } from 'vue';\nimport { useQuery } from '@tanstack/vue-query';\nimport { storeToRefs } from 'pinia';\nimport { useAuthStore } from '@/store/auth';\nimport { computeQueryOverrides } from '@/helpers/computeQueryOverrides';\nimport { assignmentFetchAll } from '@/helpers/query/assignments';\nimport { ADMINISTRATION_ASSIGNMENTS_QUERY_KEY } from '@/constants/queryKeys';\n\n/**\n * Administration assignments query.\n *\n * @param {String} administrationId – The administration ID.\n * @param {String} orgType – The organisation type.\n * @param {String} orgId – The organisation ID.\n * @param {QueryOptions|undefined} queryOptions – Optional TanStack query options.\n * @returns {UseQueryResult} The TanStack query result.\n */\nconst useAdministrationAssignmentsQuery = (\n  administrationId,\n  orgType,\n  orgId,\n  queryOptions?: UseQueryOptions,\n): UseQueryReturnType => {\n  const authStore = useAuthStore();\n  const { roarUid } = storeToRefs(authStore);\n\n  const queryConditions = [\n    () => !!toValue(administrationId),\n    () => !!toValue(orgType),\n    () => !!toValue(orgId),\n    () => !!toValue(roarUid),\n  ];\n  const { isQueryEnabled, options } = computeQueryOverrides(queryConditions, queryOptions);\n\n  return useQuery({\n    queryKey: [ADMINISTRATION_ASSIGNMENTS_QUERY_KEY, administrationId, `${orgType}-${orgId}`],\n    queryFn: () => assignmentFetchAll(administrationId, orgType, orgId, true),\n    enabled: isQueryEnabled,\n    ...options,\n  });\n};\n\nexport default useAdministrationAssignmentsQuery;\n","/**\n * Dynamic Router Path\n *\n * Use to generate a router path from a route and a mapping of dynamic parameters.\n *\n * @param {string} route – The APP_ROUTES route to convert.\n * @param {Record<string, string | number>} mapping – The mapping of dynamic parameters to their corresponding values.\n * @returns {string} The converted route path.\n */\nexport const getDynamicRouterPath = (route: string, mapping: Record<string, string | number>): string => {\n  if (typeof route !== 'string') {\n    throw new Error('Route must be a string');\n  }\n\n  if (!mapping || typeof mapping !== 'object') {\n    throw new Error('Mapping must be an object');\n  }\n\n  // Split the route into segments\n  const segments = route.split('/');\n\n  // Filter out empty segments\n  const filteredSegments = segments.filter((segment: string) => segment !== '');\n\n  // Replace dynamic parameters with their corresponding values\n  const routePath = filteredSegments\n    .map((segment: string) => {\n      if (segment.startsWith(':')) {\n        const paramName = segment.slice(1);\n        // Ensure mapping value is converted to string for the path\n        const value = mapping[paramName];\n        return value !== undefined ? String(value) : `:${paramName}`;\n      }\n      return segment;\n    })\n    .join('/');\n\n  return `/${routePath}`;\n};\n","<template>\n  <main class=\"container main\">\n    <section class=\"main-body\">\n      <div v-if=\"isLoading\" class=\"loading-wrapper\">\n        <LevanteSpinner fullscreen />\n        <div class=\"uppercase text-sm text-gray-600 font-light\">Loading Progress Datatable</div>\n      </div>\n\n      <template v-else>\n        <div class=\"flex justify-content-between align-items-center\">\n          <div class=\"flex flex-column align-items-start mb-4 gap-2\">\n            <div>\n              <div class=\"uppercase font-light text-gray-500 text-md\">{{ displayOrgType }} Progress Report</div>\n              <div class=\"report-title uppercase\">\n                {{ orgData?.name }}\n              </div>\n            </div>\n            <div>\n              <div class=\"uppercase font-light text-gray-500 text-md\">Assignment</div>\n              <div class=\"administration-name uppercase\">\n                {{ displayName }}\n              </div>\n            </div>\n            <div>\n              <div class=\"uppercase font-light text-gray-500 text-md\">Created by</div>\n              <div class=\"administration-creator\">\n                {{ creator?.displayName }}\n              </div>\n            </div>\n          </div>\n          <div v-if=\"!isLevante\" class=\"flex flex-row align-items-center gap-4\">\n            <div class=\"uppercase text-sm text-gray-600\">VIEW</div>\n            <PvSelectButton\n              v-model=\"reportView\"\n              v-tooltip.top=\"'View different report'\"\n              :options=\"reportViews\"\n              option-disabled=\"constant\"\n              :allow-empty=\"false\"\n              option-label=\"name\"\n              class=\"flex my-2 select-button\"\n              @change=\"handleViewChange\"\n            >\n            </PvSelectButton>\n          </div>\n        </div>\n\n        <div v-if=\"assignmentData?.length\">\n          <div\n            v-if=\"!isEmpty(adminStats)\"\n            class=\"flex flex-column align-items-around flex-wrap gap-3 rounded bg-gray-100 p-2 details-card\"\n          >\n            <div class=\"flex flex-column gap-1 mx-5 mb-5\">\n              <div class=\"text-sm uppercase text-gray-500\">Progress by Task</div>\n              <div\n                v-for=\"{ taskId } of administrationData.assessments\"\n                :key=\"taskId\"\n                class=\"flex justify-content-between align-items-center\"\n              >\n                <div class=\"text-lg font-bold text-gray-600 w-full\">\n                  {{ tasksDictionary[taskId]?.name || taskId }}\n                </div>\n                <PvChart\n                  type=\"bar\"\n                  :data=\"setBarChartData(adminStats[taskId])\"\n                  :options=\"setBarChartOptions(adminStats[taskId])\"\n                  class=\"h-2rem lg:w-full\"\n                />\n              </div>\n            </div>\n            <div class=\"flex flex-column mx-5\">\n              <div class=\"text-sm uppercase text-gray-500\">Total Progress</div>\n              <div class=\"flex justify-content-between align-items-center\">\n                <div class=\"text-xl font-bold text-gray-600 w-full\">\n                  Total\n                  <span class=\"font-light text-sm\"> (Assigned to {{ adminStats.assignment.assigned }} users) </span>\n                </div>\n                <PvChart\n                  type=\"bar\"\n                  :data=\"setBarChartData(adminStats.assignment)\"\n                  :options=\"setBarChartOptions(adminStats.assignment)\"\n                  class=\"h-3rem lg:w-full\"\n                />\n              </div>\n            </div>\n            <div class=\"flex flex-column align-items-center mx-5\">\n              <div class=\"flex flex-wrap justify-content-around align-items-center px-2 py-1 rounded\">\n                <div class=\"legend-entry\">\n                  <div class=\"circle\" style=\"background-color: var(--bright-green)\" />\n                  <div>\n                    <div>Completed</div>\n                  </div>\n                </div>\n                <div class=\"legend-entry\">\n                  <div class=\"circle\" style=\"background-color: var(--yellow-100)\" />\n                  <div>\n                    <div>Started</div>\n                  </div>\n                </div>\n                <div class=\"legend-entry\">\n                  <div class=\"circle\" style=\"background-color: var(--surface-d)\" />\n                  <div>\n                    <div>Not Started</div>\n                  </div>\n                </div>\n              </div>\n              <div v-if=\"!isLevante\" class=\"font-light uppercase text-xs text-gray-500 my-1\">Legend</div>\n            </div>\n          </div>\n          <RoarDataTable\n            v-if=\"progressReportColumns?.length ?? 0 > 0\"\n            :data=\"filteredTableData\"\n            :columns=\"progressReportColumns\"\n            :total-records=\"filteredTableData?.length\"\n            :loading=\"isLoadingAssignments || isFetchingAssignments\"\n            :page-limit=\"pageLimit\"\n            data-cy=\"roar-data-table\"\n            :allow-filtering=\"!isLevante\"\n            :reset-filters=\"resetFilters\"\n            :allow-export=\"!isLevante\"\n            :allow-column-selection=\"!isLevante\"\n            :lazy-pre-sorting=\"orderBy\"\n            :show-options-control=\"false\"\n            @export-selected=\"exportSelected\"\n            @export-all=\"exportAll\"\n          >\n            <template #filterbar>\n              <div v-if=\"!isLevante\">\n                <div v-if=\"districtSchoolsData\" class=\"flex flex-row gap-2\">\n                  <PvFloatLabel>\n                    <PvMultiSelect\n                      id=\"ms-school-filter\"\n                      v-model=\"filterSchools\"\n                      style=\"width: 20rem; max-width: 25rem\"\n                      :options=\"districtSchoolsData\"\n                      option-label=\"name\"\n                      option-value=\"name\"\n                      :show-toggle-all=\"false\"\n                      selected-items-label=\"{0} schools selected\"\n                      data-cy=\"filter-by-school\"\n                    />\n                    <label for=\"ms-school-filter\">Filter by School</label>\n                  </PvFloatLabel>\n                </div>\n                <div class=\"flex flex-row gap-2\">\n                  <PvFloatLabel>\n                    <PvMultiSelect\n                      id=\"ms-grade-filter\"\n                      v-model=\"filterGrades\"\n                      style=\"width: 20rem; max-width: 25rem\"\n                      :options=\"gradeOptions\"\n                      option-label=\"label\"\n                      option-value=\"value\"\n                      :show-toggle-all=\"false\"\n                      selected-items-label=\"{0} grades selected\"\n                      data-cy=\"filter-by-grade\"\n                    />\n                    <label for=\"ms-school-filter\">Filter by Grade</label>\n                  </PvFloatLabel>\n                </div>\n              </div>\n            </template>\n          </RoarDataTable>\n        </div>\n      </template>\n    </section>\n  </main>\n</template>\n\n<script setup>\nimport { computed, ref, onMounted, watch } from 'vue';\nimport { storeToRefs } from 'pinia';\nimport { useRouter } from 'vue-router';\nimport _get from 'lodash/get';\nimport _kebabCase from 'lodash/kebabCase';\nimport _map from 'lodash/map';\nimport PvChart from 'primevue/chart';\nimport PvMultiSelect from 'primevue/multiselect';\nimport PvSelectButton from 'primevue/selectbutton';\nimport { useAuthStore } from '@/store/auth';\nimport useUserType from '@/composables/useUserType';\nimport useUserClaimsQuery from '@/composables/queries/useUserClaimsQuery';\nimport useAdministrationsQuery from '@/composables/queries/useAdministrationsQuery';\nimport useAdministrationsStatsQuery from '@/composables/queries/useAdministrationsStatsQuery';\nimport useOrgQuery from '@/composables/queries/useOrgQuery';\nimport useDistrictSchoolsQuery from '@/composables/queries/useDistrictSchoolsQuery';\nimport useAdministrationAssignmentsQuery from '@/composables/queries/useAdministrationAssignmentsQuery';\nimport useTasksDictionaryQuery from '@/composables/queries/useTasksDictionaryQuery';\nimport useUserDataQuery from '@/composables/queries/useUserDataQuery';\nimport { getDynamicRouterPath } from '@/helpers/getDynamicRouterPath';\nimport { exportCsv } from '@/helpers/query/utils';\nimport { taskDisplayNames, gradeOptions } from '@/helpers/reports';\nimport { getTitle } from '@/helpers/query/administrations';\nimport { setBarChartData, setBarChartOptions } from '@/helpers/plotting';\nimport { isLevante } from '@/helpers';\nimport { APP_ROUTES } from '@/constants/routes';\nimport { SINGULAR_ORG_TYPES } from '@/constants/orgTypes';\nimport RoarDataTable from '@/components/RoarDataTable.vue';\nimport { isEmpty } from 'lodash';\nimport PvFloatLabel from 'primevue/floatlabel';\nimport LevanteSpinner from '@/components/LevanteSpinner.vue';\n// import ProgressChartLegend from '@/components/reports/ProgressChartLegend.vue'; // File does not exist\n// import ProgressChart from '@/components/reports/ProgressChart.vue'; // File does not exist\n\nconst router = useRouter();\nconst authStore = useAuthStore();\n\nconst { roarfirekit } = storeToRefs(authStore);\n\nconst props = defineProps({\n  administrationId: {\n    type: String,\n    required: true,\n  },\n  orgType: {\n    type: String,\n    required: true,\n  },\n  orgId: {\n    type: String,\n    required: true,\n  },\n});\n\nconst initialized = ref(false);\n\nconst displayOrgType = computed(() => {\n  if (props.orgType === 'district') {\n    return 'Site';\n  } else if (props.orgType === 'group') {\n    return 'Cohort';\n  }\n  return props.orgType;\n});\n\nconst isLoading = computed(() => isLoadingAssignments.value || isLoadingTasksDictionary.value);\n\nconst reportView = ref({ name: 'Progress Report', constant: true });\nconst reportViews = [\n  { name: 'Progress Report', constant: true },\n  { name: 'Score Report', constant: false },\n];\n\nconst displayName = computed(() => {\n  if (administrationData.value) {\n    return getTitle(administrationData.value, isSuperAdmin.value);\n  }\n  return '';\n});\n\nconst handleViewChange = () => {\n  const { administrationId, orgType, orgId } = props;\n  router.push({\n    path: getDynamicRouterPath(APP_ROUTES.SCORE_REPORT, {\n      administrationId,\n      orgType,\n      orgId,\n    }),\n  });\n};\n\nconst orderBy = ref([\n  {\n    order: '1',\n    field: 'user.grade',\n  },\n  {\n    order: '1',\n    field: 'user.lastName',\n  },\n]);\n\n// If this is a district report, make the schools column first sorted.\nif (props.orgType === 'district') {\n  orderBy.value.unshift({\n    order: '1',\n    field: 'user.schoolName',\n  });\n}\n\nconst filterSchools = ref([]);\nconst filterGrades = ref([]);\nconst pageLimit = ref(10);\n\nconst { data: tasksDictionary, isLoading: isLoadingTasksDictionary } = useTasksDictionaryQuery({\n  enabled: initialized,\n});\n\nconst { data: userClaims } = useUserClaimsQuery({\n  enabled: initialized,\n});\n\nconst { isSuperAdmin } = useUserType(userClaims);\n\nconst { data: administrationData } = useAdministrationsQuery([props.administrationId], {\n  enabled: initialized,\n  select: (data) => data[0],\n});\n\nconst createdBy = computed(() => administrationData?.value?.createdBy);\n\nconst { data: creator } = useUserDataQuery(createdBy, {\n  enabled: computed(() => !!createdBy.value),\n});\n\nconst { data: adminStats } = useAdministrationsStatsQuery([props.administrationId], {\n  enabled: initialized,\n  select: (data) => data[0],\n});\n\nconst { data: districtSchoolsData } = useDistrictSchoolsQuery(props.orgId, {\n  enabled: props.orgType === SINGULAR_ORG_TYPES.DISTRICTS && initialized,\n});\n\nconst { data: orgData } = useOrgQuery(props.orgType, [props.orgId], {\n  enabled: initialized,\n  select: (data) => data[0],\n});\n\nconst {\n  isLoading: isLoadingAssignments,\n  isFetching: isFetchingAssignments,\n  data: assignmentData,\n} = useAdministrationAssignmentsQuery(props.administrationId, props.orgType, props.orgId, {\n  enabled: initialized,\n});\n\nconst schoolNameDictionary = computed(() => {\n  if (districtSchoolsData.value) {\n    return districtSchoolsData.value.reduce((acc, school) => {\n      acc[school.id] = school.name;\n      return acc;\n    }, {});\n  } else {\n    return {};\n  }\n});\n\nconst computedProgressData = computed(() => {\n  if (!assignmentData.value) return [];\n  // assignmentTableData is an array of objects, each representing a row in the table\n  const assignmentTableDataAcc = [];\n\n  for (const { assignment, user, survey } of assignmentData.value) {\n    // compute schoolName\n    let schoolName = '';\n    const schoolId = user?.schools?.current[0];\n    if (schoolId) {\n      schoolName = schoolNameDictionary.value[schoolId];\n    }\n\n    const currRow = {\n      user: {\n        username: user?.username || assignment?.userData?.username || '',\n        userType: user.userType,\n        userId: user.userId,\n        firstName: user?.name?.first || '',\n        lastName: user?.name?.last || '',\n        grade: user.studentData?.grade,\n        assessmentPid: user.assessmentPid,\n        schoolName: schoolName,\n      },\n      // compute and add progress data in next step\n    };\n\n    const currRowProgress = {};\n\n    for (const assessment of assignment.assessments) {\n      // General Logic to grab support level, scores, etc\n      let progressFilterTags = '';\n      const taskId = assessment.taskId;\n\n      if (assessment?.optional) {\n        currRowProgress[taskId] = {\n          value: 'optional',\n          icon: 'pi pi-question',\n          severity: 'info',\n        };\n        progressFilterTags += ' Optional ';\n      } else if (assessment?.completedOn !== undefined) {\n        currRowProgress[taskId] = {\n          value: 'completed',\n          icon: 'pi pi-check-circle',\n          severity: 'success',\n        };\n        progressFilterTags += ' Completed ';\n      } else if (assessment?.startedOn !== undefined) {\n        currRowProgress[taskId] = {\n          value: 'started',\n          icon: 'pi pi-clock',\n          severity: 'warn',\n        };\n        progressFilterTags += ' Started ';\n      } else {\n        currRowProgress[taskId] = {\n          value: 'not started',\n          icon: 'pi pi-minus-circle',\n          severity: 'warning',\n        };\n        progressFilterTags += ' Not Started ';\n      }\n      currRowProgress[taskId].tags = progressFilterTags;\n    }\n\n    // update progress for current row with computed object\n    currRow.progress = currRowProgress;\n    // push currRow to assignmentTableDataAcc\n    assignmentTableDataAcc.push(currRow);\n  }\n\n  return assignmentTableDataAcc;\n});\n\nconst resetFilters = () => {\n  filterSchools.value = [];\n  filterGrades.value = [];\n};\n\nconst exportSelected = (selectedRows) => {\n  const computedExportData = _map(selectedRows, ({ user, progress }) => {\n    let tableRow = {\n      Email: _get(user, 'email'),\n      First: _get(user, 'firstName'),\n      Last: _get(user, 'lastName'),\n      Grade: _get(user, 'grade'),\n    };\n    if (authStore.isUserSuperAdmin) {\n      tableRow['PID'] = _get(user, 'assessmentPid');\n    }\n    if (props.orgType === 'district') {\n      tableRow['School'] = _get(user, 'schoolName');\n    }\n    for (const taskId in progress) {\n      tableRow[tasksDictionary.value[taskId]?.publicName ?? taskId] = progress[taskId].value;\n    }\n    return tableRow;\n  });\n  exportCsv(computedExportData, 'roar-progress-selected.csv');\n  return;\n};\n\nconst exportAll = async () => {\n  const computedExportData = _map(computedProgressData.value, ({ user, progress }) => {\n    let tableRow = {\n      Email: _get(user, 'email'),\n      First: _get(user, 'firstName'),\n      Last: _get(user, 'lastName'),\n      Grade: _get(user, 'grade'),\n    };\n    if (authStore.isUserSuperAdmin) {\n      tableRow['PID'] = _get(user, 'assessmentPid');\n    }\n    if (props.orgType === 'district') {\n      tableRow['School'] = _get(user, 'schoolName');\n    }\n    for (const taskId in progress) {\n      tableRow[tasksDictionary.value[taskId]?.publicName ?? taskId] = progress[taskId].value;\n    }\n    return tableRow;\n  });\n  exportCsv(\n    computedExportData,\n    `roar-progress-${_kebabCase(getTitle(administrationData.value, isSuperAdmin.value))}-${_kebabCase(\n      orgData.value.name,\n    )}.csv`,\n  );\n  return;\n};\n\nconst progressReportColumns = computed(() => {\n  if (isLoadingTasksDictionary.value || assignmentData.value === undefined) return [];\n\n  const tableColumns = [];\n  const columnDefinitions = [{ field: 'user.email', header: 'Email', pinned: true }];\n\n  columnDefinitions.forEach(({ field, header, pinned }) => {\n    const path = field.split('.');\n    if (assignmentData.value.find((assignment) => _get(assignment, path))) {\n      tableColumns.push({\n        field,\n        header,\n        dataType: 'text',\n        sort: true,\n        filter: true,\n        ...(pinned && { pinned: true }),\n      });\n    }\n  });\n\n  tableColumns.push({\n    field: 'user.username',\n    header: 'Username',\n    dataType: 'text',\n    sort: true,\n    filter: true,\n  });\n\n  if (props.orgType === 'district') {\n    const schoolsMap = districtSchoolsData.value?.reduce((acc, school) => {\n      acc[school.id] = school.name;\n      return acc;\n    }, {});\n    tableColumns.push({\n      field: 'user.schoolName',\n      header: 'School',\n      dataType: 'text',\n      sort: true,\n      filter: false,\n      schoolsMap: schoolsMap,\n    });\n  }\n\n  const allTaskIds = administrationData.value.assessments?.map((assessment) => assessment.taskId);\n  const sortedTasks = allTaskIds?.sort((p1, p2) => {\n    if (Object.keys(taskDisplayNames).includes(p1) && Object.keys(taskDisplayNames).includes(p2)) {\n      return taskDisplayNames[p1].order - taskDisplayNames[p2].order;\n    } else {\n      return -1;\n    }\n  });\n\n  const priorityTasks = ['swr', 'sre', 'pa'];\n  const orderedTasks = [];\n\n  for (const task of priorityTasks) {\n    if (sortedTasks.includes(task)) {\n      orderedTasks.push(task);\n    }\n  }\n\n  for (const task of sortedTasks) {\n    if (!priorityTasks.includes(task)) {\n      orderedTasks.push(task);\n    }\n  }\n\n  for (const taskId of orderedTasks) {\n    tableColumns.push({\n      field: `progress.${taskId}.value`,\n      filterField: `progress.${taskId}.tags`,\n      header: tasksDictionary.value[taskId]?.name ?? taskId,\n      dataType: 'progress',\n      tag: true,\n      severityField: `progress.${taskId}.severity`,\n      iconField: `progress.${taskId}.icon`,\n      sort: true,\n    });\n  }\n  return tableColumns;\n});\n\nconst filteredTableData = ref(computedProgressData.value);\n\nwatch(computedProgressData, (newValue) => {\n  // Update filteredTableData when computedProgressData changes\n  filteredTableData.value = newValue;\n});\n\nwatch([filterSchools, filterGrades], ([newSchools, newGrades]) => {\n  if (newSchools.length > 0 || newGrades.length > 0) {\n    //set scoresTableData to filtered data if filter is added\n    let filteredData = computedProgressData.value;\n    if (newSchools.length > 0) {\n      filteredData = filteredData.filter((item) => {\n        return newSchools.includes(item.user.schoolName);\n      });\n    }\n    if (newGrades.length > 0) {\n      filteredData = filteredData.filter((item) => {\n        return newGrades.includes(item.user.grade);\n      });\n    }\n    filteredTableData.value = filteredData;\n  } else {\n    filteredTableData.value = computedProgressData.value;\n  }\n});\n\nlet unsubscribe;\nconst refreshing = ref(false);\nconst refresh = () => {\n  refreshing.value = true;\n  if (unsubscribe) unsubscribe();\n\n  refreshing.value = false;\n  initialized.value = true;\n};\n\nunsubscribe = authStore.$subscribe(async (mutation, state) => {\n  if (state.roarfirekit.restConfig) refresh();\n});\n\nonMounted(async () => {\n  if (roarfirekit.value.restConfig) refresh();\n});\n</script>\n\n<style lang=\"scss\">\n.loading-container {\n  text-align: center;\n}\n\n.loading-wrapper {\n  margin: 1rem 0rem;\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  align-items: center;\n  justify-content: center;\n}\n\n.report-title {\n  font-size: 2.5rem;\n  font-weight: bold;\n  margin-top: 0;\n  @media (max-width: 768px) {\n    font-size: 1.8rem;\n  }\n}\n\n.no-scores-container {\n  display: flex;\n  flex-direction: column;\n  padding: 2rem;\n\n  h3 {\n    font-weight: bold;\n  }\n\n  span {\n    display: flex;\n    align-items: center;\n  }\n}\n\n.administration-name {\n  font-size: 1.8rem;\n  font-weight: light;\n}\n\n.administration-creator {\n  font-size: 1.2rem;\n  font-weight: light;\n}\n\n.report-subheader {\n  font-size: 1.3rem;\n  font-weight: light;\n  margin-top: 0;\n}\n\n.legend-entry {\n  font-size: 0.9rem;\n  font-weight: light;\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n}\n\n.circle {\n  border-color: white;\n  display: inline-block;\n  border-radius: 50%;\n  border-width: 5px;\n  height: 25px;\n  width: 25px;\n  vertical-align: middle;\n  margin-right: 10px;\n}\n\n.select-button .p-button:last-of-type:not(:only-of-type) {\n  border-top-left-radius: 0;\n  border-bottom-left-radius: 0;\n  border-top-right-radius: 8px;\n  border-bottom-right-radius: 8px;\n}\n\n.select-button .p-button:first-of-type:not(:only-of-type) {\n  border-top-left-radius: 8px;\n  border-bottom-left-radius: 8px;\n  border-top-right-radius: 0;\n  border-bottom-right-radius: 0;\n}\n.details-card {\n  max-width: 100%;\n}\n</style>\n"],"names":["useAdministrationsStatsQuery","administrationIds","queryOptions","conditions","hasArrayEntries","isQueryEnabled","options","computeQueryOverrides","useQuery","ADMINISTRATIONS_STATS_QUERY_KEY","fetchDocsById","_a","toValue","administrationId","FIRESTORE_COLLECTIONS","useOrgQuery","orgType","orgIds","computed","SINGULAR_ORG_TYPES","useDistrictsQuery","useSchoolsQuery","useClassesQuery","useGroupsQuery","useAdministrationAssignmentsQuery","orgId","authStore","useAuthStore","roarUid","storeToRefs","queryConditions","ADMINISTRATION_ASSIGNMENTS_QUERY_KEY","assignmentFetchAll","getDynamicRouterPath","route","mapping","segment","paramName","value","router","useRouter","roarfirekit","props","__props","initialized","ref","displayOrgType","isLoading","isLoadingAssignments","isLoadingTasksDictionary","reportView","reportViews","displayName","administrationData","getTitle","isSuperAdmin","handleViewChange","APP_ROUTES","orderBy","filterSchools","filterGrades","pageLimit","tasksDictionary","useTasksDictionaryQuery","userClaims","useUserClaimsQuery","useUserType","useAdministrationsQuery","data","createdBy","creator","useUserDataQuery","adminStats","districtSchoolsData","useDistrictSchoolsQuery","orgData","isFetchingAssignments","assignmentData","schoolNameDictionary","acc","school","computedProgressData","assignmentTableDataAcc","assignment","user","survey","schoolName","schoolId","currRow","_b","_c","_d","_e","currRowProgress","assessment","progressFilterTags","taskId","resetFilters","exportSelected","selectedRows","computedExportData","_map","progress","tableRow","_get","exportCsv","exportAll","_kebabCase","progressReportColumns","tableColumns","field","header","pinned","path","schoolsMap","allTaskIds","sortedTasks","p1","p2","taskDisplayNames","priorityTasks","orderedTasks","task","filteredTableData","watch","newValue","newSchools","newGrades","filteredData","item","unsubscribe","refreshing","refresh","mutation","state","onMounted","_openBlock","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_hoisted_3","_createVNode","LevanteSpinner","_cache","_Fragment","_hoisted_4","_hoisted_5","_hoisted_6","_toDisplayString","_hoisted_7","_unref","_hoisted_8","_hoisted_9","isLevante","_hoisted_10","PvSelectButton","$event","_hoisted_11","isEmpty","_hoisted_12","_hoisted_13","_renderList","_hoisted_14","PvChart","setBarChartData","setBarChartOptions","_hoisted_15","_hoisted_16","_hoisted_17","_hoisted_18","_hoisted_19","_hoisted_20","_createBlock","RoarDataTable","_hoisted_21","_hoisted_22","PvFloatLabel","PvMultiSelect","_hoisted_23","gradeOptions"],"mappings":"mpEAgBA,MAAMA,GAA+B,CAACC,EAAmBC,IAAuD,CAE9G,MAAMC,EAAa,CAAC,IAAMC,GAAgBH,CAAiB,CAAC,EACtD,CAAE,eAAAI,EAAgB,QAAAC,CAAA,EAAYC,GAAsBJ,EAAYD,CAAY,EAElF,OAAOM,GAAS,CACd,SAAU,CAACC,GAAiCR,CAAiB,EAC7D,QAAS,IAAA,OACP,OAAAS,IACEC,EAAAC,EAAQX,CAAiB,IAAzB,YAAAU,EAA4B,IAAKE,IACxB,CACL,WAAYC,GAAsB,gBAClC,MAAO,GAAGD,CAAgB,cAAA,GAE7B,GAEL,QAASR,EACT,GAAGC,CAAA,CACJ,CACH,EClBA,SAAwBS,GAAYC,EAASC,EAAQf,EAAe,OAAW,CAC7E,OAAAA,EAAe,CAAE,QAAS,GAAM,GAAGA,CAAA,EAElBgB,EAAS,IAAM,CAC9B,OAAQF,EAAA,CACN,KAAKG,EAAmB,UACtB,OAAOC,GAAkBH,EAAQf,CAAY,EAC/C,KAAKiB,EAAmB,QACtB,OAAOE,GAAgBJ,EAAQf,CAAY,EAC7C,KAAKiB,EAAmB,QACtB,OAAOG,GAAgBL,EAAQf,CAAY,EAC7C,KAAKiB,EAAmB,OACtB,OAAOI,GAAeN,EAAQf,CAAY,EAC5C,QACE,MAAM,IAAI,MAAM,yBAAyBc,CAAO,EAAE,CAAA,CAExD,CAAC,EAEe,KAClB,CClBA,MAAMQ,GAAoC,CACxCX,EACAG,EACAS,EACAvB,IACuB,CACvB,MAAMwB,EAAYC,GAAA,EACZ,CAAE,QAAAC,CAAA,EAAYC,GAAYH,CAAS,EAEnCI,EAAkB,CACtB,IAAM,CAAC,CAAClB,EAAQC,CAAgB,EAChC,IAAM,CAAC,CAACD,EAAQI,CAAO,EACvB,IAAM,CAAC,CAACJ,EAAQa,CAAK,EACrB,IAAM,CAAC,CAACb,EAAQgB,CAAO,CAAA,EAEnB,CAAE,eAAAvB,EAAgB,QAAAC,CAAA,EAAYC,GAAsBuB,EAAiB5B,CAAY,EAEvF,OAAOM,GAAS,CACd,SAAU,CAACuB,GAAsClB,EAAkB,GAAGG,CAAO,IAAIS,CAAK,EAAE,EACxF,QAAS,IAAMO,GAAmBnB,EAAkBG,EAASS,EAAO,EAAI,EACxE,QAASpB,EACT,GAAGC,CAAA,CACJ,CACH,EChCa2B,GAAuB,CAACC,EAAeC,IAAqD,CACvG,GAAI,OAAOD,GAAU,SACnB,MAAM,IAAI,MAAM,wBAAwB,EAG1C,GAAI,CAACC,GAAW,OAAOA,GAAY,SACjC,MAAM,IAAI,MAAM,2BAA2B,EAsB7C,MAAO,IAlBUD,EAAM,MAAM,GAAG,EAGE,OAAQE,GAAoBA,IAAY,EAAE,EAIzE,IAAKA,GAAoB,CACxB,GAAIA,EAAQ,WAAW,GAAG,EAAG,CAC3B,MAAMC,EAAYD,EAAQ,MAAM,CAAC,EAE3BE,EAAQH,EAAQE,CAAS,EAC/B,OAAOC,IAAU,OAAY,OAAOA,CAAK,EAAI,IAAID,CAAS,EAC5D,CACA,OAAOD,CACT,CAAC,EACA,KAAK,GAAG,CAES,EACtB,wqCCqKA,MAAMG,EAASC,GAAS,EAClBd,EAAYC,GAAY,EAExB,CAAE,YAAAc,CAAW,EAAKZ,GAAYH,CAAS,EAEvCgB,EAAQC,EAeRC,EAAcC,EAAI,EAAK,EAEvBC,EAAiB5B,EAAS,IAC1BwB,EAAM,UAAY,WACb,OACEA,EAAM,UAAY,QACpB,SAEFA,EAAM,OACd,EAEKK,EAAY7B,EAAS,IAAM8B,GAAqB,OAASC,EAAyB,KAAK,EAEvFC,EAAaL,EAAI,CAAE,KAAM,kBAAmB,SAAU,GAAM,EAC5DM,GAAc,CAClB,CAAE,KAAM,kBAAmB,SAAU,EAAI,EACzC,CAAE,KAAM,eAAgB,SAAU,EAAK,CACzC,EAEMC,GAAclC,EAAS,IACvBmC,EAAmB,MACdC,GAASD,EAAmB,MAAOE,EAAa,KAAK,EAEvD,EACR,EAEKC,GAAmB,IAAM,CAC7B,KAAM,CAAE,iBAAA3C,EAAkB,QAAAG,EAAS,MAAAS,CAAK,EAAKiB,EAC7CH,EAAO,KAAK,CACV,KAAMN,GAAqBwB,GAAW,aAAc,CAClD,iBAAA5C,EACA,QAAAG,EACA,MAAAS,CACN,CAAK,CACL,CAAG,CACH,EAEMiC,EAAUb,EAAI,CAClB,CACE,MAAO,IACP,MAAO,YACX,EACE,CACE,MAAO,IACP,MAAO,eACX,CACA,CAAC,EAGGH,EAAM,UAAY,YACpBgB,EAAQ,MAAM,QAAQ,CACpB,MAAO,IACP,MAAO,iBACX,CAAG,EAGH,MAAMC,EAAgBd,EAAI,EAAE,EACtBe,EAAef,EAAI,EAAE,EACrBgB,GAAYhB,EAAI,EAAE,EAElB,CAAE,KAAMiB,EAAiB,UAAWb,CAAwB,EAAKc,GAAwB,CAC7F,QAASnB,CACX,CAAC,EAEK,CAAE,KAAMoB,EAAU,EAAKC,GAAmB,CAC9C,QAASrB,CACX,CAAC,EAEK,CAAE,aAAAW,CAAY,EAAKW,GAAYF,EAAU,EAEzC,CAAE,KAAMX,CAAkB,EAAKc,GAAwB,CAACzB,EAAM,gBAAgB,EAAG,CACrF,QAASE,EACT,OAASwB,GAASA,EAAK,CAAC,CAC1B,CAAC,EAEKC,EAAYnD,EAAS,IAAA,OAAM,OAAAP,EAAA0C,GAAA,YAAAA,EAAoB,QAApB,YAAA1C,EAA2B,UAAS,EAE/D,CAAE,KAAM2D,IAAYC,GAAiBF,EAAW,CACpD,QAASnD,EAAS,IAAM,CAAC,CAACmD,EAAU,KAAK,CAC3C,CAAC,EAEK,CAAE,KAAMG,CAAU,EAAKxE,GAA6B,CAAC0C,EAAM,gBAAgB,EAAG,CAClF,QAASE,EACT,OAASwB,GAASA,EAAK,CAAC,CAC1B,CAAC,EAEK,CAAE,KAAMK,CAAmB,EAAKC,GAAwBhC,EAAM,MAAO,CACzE,QAASA,EAAM,UAAYvB,EAAmB,WAAayB,CAC7D,CAAC,EAEK,CAAE,KAAM+B,EAAO,EAAK5D,GAAY2B,EAAM,QAAS,CAACA,EAAM,KAAK,EAAG,CAClE,QAASE,EACT,OAASwB,GAASA,EAAK,CAAC,CAC1B,CAAC,EAEK,CACJ,UAAWpB,GACX,WAAY4B,GACZ,KAAMC,CACR,EAAIrD,GAAkCkB,EAAM,iBAAkBA,EAAM,QAASA,EAAM,MAAO,CACxF,QAASE,CACX,CAAC,EAEKkC,GAAuB5D,EAAS,IAChCuD,EAAoB,MACfA,EAAoB,MAAM,OAAO,CAACM,EAAKC,KAC5CD,EAAIC,EAAO,EAAE,EAAIA,EAAO,KACjBD,GACN,CAAA,CAAE,EAEE,CAAA,CAEV,EAEKE,EAAuB/D,EAAS,IAAM,eAC1C,GAAI,CAAC2D,EAAe,MAAO,MAAO,CAAA,EAElC,MAAMK,EAAyB,CAAA,EAE/B,SAAW,CAAE,WAAAC,EAAY,KAAAC,EAAM,OAAAC,CAAM,IAAMR,EAAe,MAAO,CAE/D,IAAIS,EAAa,GACjB,MAAMC,GAAW5E,EAAAyE,GAAA,YAAAA,EAAM,UAAN,YAAAzE,EAAe,QAAQ,GACpC4E,IACFD,EAAaR,GAAqB,MAAMS,CAAQ,GAGlD,MAAMC,EAAU,CACd,KAAM,CACJ,UAAUJ,GAAA,YAAAA,EAAM,aAAYK,EAAAN,GAAA,YAAAA,EAAY,WAAZ,YAAAM,EAAsB,WAAY,GAC9D,SAAUL,EAAK,SACf,OAAQA,EAAK,OACb,YAAWM,EAAAN,GAAA,YAAAA,EAAM,OAAN,YAAAM,EAAY,QAAS,GAChC,WAAUC,EAAAP,GAAA,YAAAA,EAAM,OAAN,YAAAO,EAAY,OAAQ,GAC9B,OAAOC,EAAAR,EAAK,cAAL,YAAAQ,EAAkB,MACzB,cAAeR,EAAK,cACpB,WAAYE,CACpB,CAEA,EAEUO,EAAkB,CAAA,EAExB,UAAWC,KAAcX,EAAW,YAAa,CAE/C,IAAIY,EAAqB,GACzB,MAAMC,EAASF,EAAW,OAEtBA,GAAA,MAAAA,EAAY,UACdD,EAAgBG,CAAM,EAAI,CACxB,MAAO,WACP,KAAM,iBACN,SAAU,MACpB,EACQD,GAAsB,eACbD,GAAA,YAAAA,EAAY,eAAgB,QACrCD,EAAgBG,CAAM,EAAI,CACxB,MAAO,YACP,KAAM,qBACN,SAAU,SACpB,EACQD,GAAsB,gBACbD,GAAA,YAAAA,EAAY,aAAc,QACnCD,EAAgBG,CAAM,EAAI,CACxB,MAAO,UACP,KAAM,cACN,SAAU,MACpB,EACQD,GAAsB,cAEtBF,EAAgBG,CAAM,EAAI,CACxB,MAAO,cACP,KAAM,qBACN,SAAU,SACpB,EACQD,GAAsB,iBAExBF,EAAgBG,CAAM,EAAE,KAAOD,CACjC,CAGAP,EAAQ,SAAWK,EAEnBX,EAAuB,KAAKM,CAAO,CACrC,CAEA,OAAON,CACT,CAAC,EAEKe,GAAe,IAAM,CACzBtC,EAAc,MAAQ,CAAA,EACtBC,EAAa,MAAQ,CAAA,CACvB,EAEMsC,GAAkBC,GAAiB,CACvC,MAAMC,EAAqBC,GAAKF,EAAc,CAAC,CAAE,KAAAf,EAAM,SAAAkB,KAAe,OACpE,IAAIC,EAAW,CACb,MAAOC,EAAKpB,EAAM,OAAO,EACzB,MAAOoB,EAAKpB,EAAM,WAAW,EAC7B,KAAMoB,EAAKpB,EAAM,UAAU,EAC3B,MAAOoB,EAAKpB,EAAM,OAAO,CAC/B,EACQ1D,EAAU,mBACZ6E,EAAS,IAASC,EAAKpB,EAAM,eAAe,GAE1C1C,EAAM,UAAY,aACpB6D,EAAS,OAAYC,EAAKpB,EAAM,YAAY,GAE9C,UAAWY,KAAUM,EACnBC,IAAS5F,EAAAmD,EAAgB,MAAMkC,CAAM,IAA5B,YAAArF,EAA+B,aAAcqF,CAAM,EAAIM,EAASN,CAAM,EAAE,MAEnF,OAAOO,CACT,CAAC,EACDE,GAAUL,EAAoB,4BAA4B,CAE5D,EAEMM,GAAY,SAAY,CAC5B,MAAMN,EAAqBC,GAAKpB,EAAqB,MAAO,CAAC,CAAE,KAAAG,EAAM,SAAAkB,KAAe,OAClF,IAAIC,EAAW,CACb,MAAOC,EAAKpB,EAAM,OAAO,EACzB,MAAOoB,EAAKpB,EAAM,WAAW,EAC7B,KAAMoB,EAAKpB,EAAM,UAAU,EAC3B,MAAOoB,EAAKpB,EAAM,OAAO,CAC/B,EACQ1D,EAAU,mBACZ6E,EAAS,IAASC,EAAKpB,EAAM,eAAe,GAE1C1C,EAAM,UAAY,aACpB6D,EAAS,OAAYC,EAAKpB,EAAM,YAAY,GAE9C,UAAWY,KAAUM,EACnBC,IAAS5F,EAAAmD,EAAgB,MAAMkC,CAAM,IAA5B,YAAArF,EAA+B,aAAcqF,CAAM,EAAIM,EAASN,CAAM,EAAE,MAEnF,OAAOO,CACT,CAAC,EACDE,GACEL,EACA,iBAAiBO,GAAWrD,GAASD,EAAmB,MAAOE,EAAa,KAAK,CAAC,CAAC,IAAIoD,GACrFhC,GAAQ,MAAM,IACpB,CAAK,MACL,CAEA,EAEMiC,GAAwB1F,EAAS,IAAM,WAC3C,GAAI+B,EAAyB,OAAS4B,EAAe,QAAU,OAAW,MAAO,CAAA,EAEjF,MAAMgC,EAAe,CAAA,EAyBrB,GAxB0B,CAAC,CAAE,MAAO,aAAc,OAAQ,QAAS,OAAQ,GAAM,EAE/D,QAAQ,CAAC,CAAE,MAAAC,EAAO,OAAAC,EAAQ,OAAAC,CAAM,IAAO,CACvD,MAAMC,EAAOH,EAAM,MAAM,GAAG,EACxBjC,EAAe,MAAM,KAAMM,GAAeqB,EAAKrB,EAAY8B,CAAI,CAAC,GAClEJ,EAAa,KAAK,CAChB,MAAAC,EACA,OAAAC,EACA,SAAU,OACV,KAAM,GACN,OAAQ,GACR,GAAIC,GAAU,CAAE,OAAQ,GAChC,CAAO,CAEL,CAAC,EAEDH,EAAa,KAAK,CAChB,MAAO,gBACP,OAAQ,WACR,SAAU,OACV,KAAM,GACN,OAAQ,EACZ,CAAG,EAEGnE,EAAM,UAAY,WAAY,CAChC,MAAMwE,GAAavG,EAAA8D,EAAoB,QAApB,YAAA9D,EAA2B,OAAO,CAACoE,EAAKC,KACzDD,EAAIC,EAAO,EAAE,EAAIA,EAAO,KACjBD,GACN,CAAA,GACH8B,EAAa,KAAK,CAChB,MAAO,kBACP,OAAQ,SACR,SAAU,OACV,KAAM,GACN,OAAQ,GACR,WAAYK,CAClB,CAAK,CACH,CAEA,MAAMC,GAAa1B,EAAApC,EAAmB,MAAM,cAAzB,YAAAoC,EAAsC,IAAKK,GAAeA,EAAW,QAClFsB,EAAcD,GAAA,YAAAA,EAAY,KAAK,CAACE,EAAIC,IACpC,OAAO,KAAKC,CAAgB,EAAE,SAASF,CAAE,GAAK,OAAO,KAAKE,CAAgB,EAAE,SAASD,CAAE,EAClFC,EAAiBF,CAAE,EAAE,MAAQE,EAAiBD,CAAE,EAAE,MAElD,IAILE,EAAgB,CAAC,MAAO,MAAO,IAAI,EACnCC,EAAe,CAAA,EAErB,UAAWC,KAAQF,EACbJ,EAAY,SAASM,CAAI,GAC3BD,EAAa,KAAKC,CAAI,EAI1B,UAAWA,KAAQN,EACZI,EAAc,SAASE,CAAI,GAC9BD,EAAa,KAAKC,CAAI,EAI1B,UAAW1B,KAAUyB,EACnBZ,EAAa,KAAK,CAChB,MAAO,YAAYb,CAAM,SACzB,YAAa,YAAYA,CAAM,QAC/B,SAAQN,EAAA5B,EAAgB,MAAMkC,CAAM,IAA5B,YAAAN,EAA+B,OAAQM,EAC/C,SAAU,WACV,IAAK,GACL,cAAe,YAAYA,CAAM,YACjC,UAAW,YAAYA,CAAM,QAC7B,KAAM,EACZ,CAAK,EAEH,OAAOa,CACT,CAAC,EAEKc,EAAoB9E,EAAIoC,EAAqB,KAAK,EAExD2C,GAAM3C,EAAuB4C,GAAa,CAExCF,EAAkB,MAAQE,CAC5B,CAAC,EAEDD,GAAM,CAACjE,EAAeC,CAAY,EAAG,CAAC,CAACkE,EAAYC,CAAS,IAAM,CAChE,GAAID,EAAW,OAAS,GAAKC,EAAU,OAAS,EAAG,CAEjD,IAAIC,EAAe/C,EAAqB,MACpC6C,EAAW,OAAS,IACtBE,EAAeA,EAAa,OAAQC,GAC3BH,EAAW,SAASG,EAAK,KAAK,UAAU,CAChD,GAECF,EAAU,OAAS,IACrBC,EAAeA,EAAa,OAAQC,GAC3BF,EAAU,SAASE,EAAK,KAAK,KAAK,CAC1C,GAEHN,EAAkB,MAAQK,CAC5B,MACEL,EAAkB,MAAQ1C,EAAqB,KAEnD,CAAC,EAED,IAAIiD,EACJ,MAAMC,GAAatF,EAAI,EAAK,EACtBuF,GAAU,IAAM,CACpBD,GAAW,MAAQ,GACfD,GAAaA,EAAW,EAE5BC,GAAW,MAAQ,GACnBvF,EAAY,MAAQ,EACtB,EAEA,OAAAsF,EAAcxG,EAAU,WAAW,MAAO2G,EAAUC,IAAU,CACxDA,EAAM,YAAY,YAAYF,GAAO,CAC3C,CAAC,EAEDG,GAAU,SAAY,CAChB9F,EAAY,MAAM,YAAY2F,GAAO,CAC3C,CAAC,8CAhlBC,OAAAI,EAAA,EAAAC,EAoKO,OApKPC,GAoKO,CAnKLC,EAkKU,UAlKVC,GAkKU,CAjKG7F,EAAA,OAAXyF,IAAAC,EAGM,MAHNI,GAGM,CAFJC,EAA6BC,GAAA,CAAb,WAAA,EAAU,CAAA,EAC1BC,EAAA,CAAA,IAAAA,EAAA,CAAA,EAAAL,EAAwF,MAAA,CAAnF,MAAM,8CAA6C,6BAA0B,EAAA,WAGpFF,EA2JWQ,GAAA,CAAA,IAAA,CAAA,EAAA,CA1JTN,EAmCM,MAnCNO,GAmCM,CAlCJP,EAmBM,MAnBNQ,GAmBM,CAlBJR,EAKM,MAAA,KAAA,CAJJA,EAAkG,MAAlGS,GAAkGC,EAAvCvG,EAAA,KAAc,EAAG,mBAAgB,CAAA,EAC5F6F,EAEM,MAFNW,GAEMD,GADDE,EAAAA,EAAA5E,EAAA,IAAA4E,YAAAA,EAAS,IAAI,EAAA,CAAA,IAGpBZ,EAKM,MAAA,KAAA,CAJJK,EAAA,CAAA,IAAAA,EAAA,CAAA,EAAAL,EAAwE,MAAA,CAAnE,MAAM,4CAA4C,EAAC,aAAU,EAAA,GAClEA,EAEM,MAFNa,GAEMH,EADDjG,GAAA,KAAW,EAAA,CAAA,IAGlBuF,EAKM,MAAA,KAAA,CAJJK,EAAA,CAAA,IAAAA,EAAA,CAAA,EAAAL,EAAwE,MAAA,CAAnE,MAAM,4CAA4C,EAAC,aAAU,EAAA,GAClEA,EAEM,MAFNc,GAEMJ,GADDE,EAAAA,EAAAjF,EAAA,IAAAiF,YAAAA,EAAS,WAAW,EAAA,CAAA,MAIjBA,EAAAG,CAAA,YAAZlB,IAAAC,EAaM,MAbNkB,GAaM,CAZJX,EAAA,CAAA,IAAAA,EAAA,CAAA,EAAAL,EAAuD,MAAA,CAAlD,MAAM,iCAAiC,EAAC,OAAI,EAAA,MACjDG,EAUiBS,EAAAK,EAAA,EAAA,YATN1G,EAAA,2CAAAA,EAAU,MAAA2G,GAElB,QAAS1G,GACV,kBAAgB,WACf,cAAa,GACd,eAAa,OACb,MAAM,0BACL,SAAQK,+BANM,+BAAL,CAAA,IAAV,EAAuC,WAYlC+F,EAAAA,EAAA1E,CAAA,IAAA0E,MAAAA,EAAgB,YAA3Bd,EAoHM,MAAAqB,GAAA,CAlHKP,EAAAQ,GAAAA,OAAA,EAAQR,EAAA/E,CAAA,CAAU,YAD3BgE,IAAAC,EA4DM,MA5DNuB,GA4DM,CAxDJrB,EAiBM,MAjBNsB,GAiBM,CAhBJjB,EAAA,CAAA,IAAAA,EAAA,CAAA,EAAAL,EAAmE,MAAA,CAA9D,MAAM,iCAAiC,EAAC,mBAAgB,EAAA,IAC7DH,EAAA,EAAA,EAAAC,EAcMQ,GAAA,KAAAiB,GAbiBX,EAAAlG,CAAA,EAAmB,cAA/B,OAAA2C,CAAM,IAAA,kBADjByC,EAcM,MAAA,CAZH,IAAKzC,EACN,MAAM,oDAEN2C,EAEM,MAFNwB,GAEMd,IADDE,EAAAA,EAAAzF,CAAA,EAAgBkC,CAAM,IAAtBuD,YAAAA,EAAyB,OAAQvD,CAAM,EAAA,CAAA,EAE5C8C,EAKES,EAAAa,EAAA,EAAA,CAJA,KAAK,MACJ,KAAMb,EAAAc,EAAA,EAAgBd,EAAA/E,CAAA,EAAWwB,CAAM,CAAA,EACvC,QAASuD,EAAAe,EAAA,EAAmBf,EAAA/E,CAAA,EAAWwB,CAAM,CAAA,EAC9C,MAAM,2DAIZ2C,EAcM,MAdN4B,GAcM,CAbJvB,EAAA,CAAA,IAAAA,EAAA,CAAA,EAAAL,EAAiE,MAAA,CAA5D,MAAM,iCAAiC,EAAC,iBAAc,EAAA,GAC3DA,EAWM,MAXN6B,GAWM,CAVJ7B,EAGM,MAHN8B,GAGM,gBAH8C,UAElD,EAAA,GAAA9B,EAAkG,OAAlG+B,GAAiC,iBAAcrB,EAAGE,EAAA/E,CAAA,EAAW,WAAW,QAAQ,EAAG,WAAQ,CAAA,IAE7FsE,EAKES,EAAAa,EAAA,EAAA,CAJA,KAAK,MACJ,KAAMb,EAAAc,EAAA,EAAgBd,EAAA/E,CAAA,EAAW,UAAU,EAC3C,QAAS+E,EAAAe,EAAA,EAAmBf,EAAA/E,CAAA,EAAW,UAAU,EAClD,MAAM,mDAIZmE,EAsBM,MAtBNgC,GAsBM,ugBADQpB,EAAAG,CAAA,gBAAZjB,EAA2F,MAA3FmC,GAA+E,QAAM,UAIjFjF,EAAAiB,GAAA,QAAA,YAAAjB,EAAuB,SAAM,QADrCkF,GAqDgBC,GAAA,OAnDb,KAAMnD,EAAA,MACN,QAASf,GAAA,MACT,iBAAehB,EAAA+B,EAAA,QAAA,YAAA/B,EAAmB,OAClC,QAAS2D,EAAAvG,EAAA,GAAwBuG,EAAA3E,EAAA,EACjC,aAAYf,GAAA,MACb,UAAQ,kBACP,mBAAkB0F,EAAAG,CAAA,EAClB,gBAAezD,GACf,gBAAesD,EAAAG,CAAA,EACf,0BAAyBH,EAAAG,CAAA,EACzB,mBAAkBhG,EAAA,MAClB,uBAAsB,GACtB,iBAAiBwC,GACjB,YAAYQ,KAEF,YACT,IAiCM,CAjCM6C,EAAAG,CAAA,gBAAZjB,EAiCM,MAAAsC,GAAA,CAhCOxB,EAAA9E,CAAA,GAAX+D,IAAAC,EAeM,MAfNuC,GAeM,CAdJlC,EAaeS,EAAA0B,EAAA,EAAA,KAAA,WAZb,IAUE,CAVFnC,EAUES,EAAA2B,EAAA,EAAA,CATA,GAAG,8BACMvH,EAAA,2CAAAA,EAAa,MAAAkG,GACtB,MAAA,CAAA,MAAA,QAAA,YAAA,OAAA,EACC,QAASN,EAAA9E,CAAA,EACV,eAAa,OACb,eAAa,OACZ,kBAAiB,GAClB,uBAAqB,uBACrB,UAAQ,qDAEVuE,EAAA,EAAA,IAAAA,EAAA,EAAA,EAAAL,EAAsD,QAAA,CAA/C,IAAI,kBAAkB,EAAC,mBAAgB,EAAA,+BAGlDA,EAeM,MAfNwC,GAeM,CAdJrC,EAaeS,EAAA0B,EAAA,EAAA,KAAA,WAZb,IAUE,CAVFnC,EAUES,EAAA2B,EAAA,EAAA,CATA,GAAG,6BACMtH,EAAA,2CAAAA,EAAY,MAAAiG,GACrB,MAAA,CAAA,MAAA,QAAA,YAAA,OAAA,EACC,QAASN,EAAA6B,EAAA,EACV,eAAa,QACb,eAAa,QACZ,kBAAiB,GAClB,uBAAqB,sBACrB,UAAQ,oDAEVpC,EAAA,EAAA,IAAAA,EAAA,EAAA,EAAAL,EAAqD,QAAA,CAA9C,IAAI,kBAAkB,EAAC,kBAAe,EAAA"}