{"version":3,"file":"index.browser.min.js","sources":["../src/index.ts"],"sourcesContent":["import { JsPsych, JsPsychPlugin, ParameterType, TrialType } from \"jspsych\";\n\nconst info = <const>{\n  name: \"audio-keyboard-response\",\n  parameters: {\n    /** The audio file to be played. */\n    stimulus: {\n      type: ParameterType.AUDIO,\n      pretty_name: \"Stimulus\",\n      default: undefined,\n    },\n    /** Array containing the key(s) the subject is allowed to press to respond to the stimulus. */\n    choices: {\n      type: ParameterType.KEYS,\n      pretty_name: \"Choices\",\n      default: \"ALL_KEYS\",\n    },\n    /** Any content here will be displayed below the stimulus. */\n    prompt: {\n      type: ParameterType.HTML_STRING,\n      pretty_name: \"Prompt\",\n      default: null,\n    },\n    /** The maximum duration to wait for a response. */\n    trial_duration: {\n      type: ParameterType.INT,\n      pretty_name: \"Trial duration\",\n      default: null,\n    },\n    /** If true, the trial will end when user makes a response. */\n    response_ends_trial: {\n      type: ParameterType.BOOL,\n      pretty_name: \"Response ends trial\",\n      default: true,\n    },\n    /** If true, then the trial will end as soon as the audio file finishes playing. */\n    trial_ends_after_audio: {\n      type: ParameterType.BOOL,\n      pretty_name: \"Trial ends after audio\",\n      default: false,\n    },\n    /** If true, then responses are allowed while the audio is playing. If false, then the audio must finish playing before a response is accepted. */\n    response_allowed_while_playing: {\n      type: ParameterType.BOOL,\n      pretty_name: \"Response allowed while playing\",\n      default: true,\n    },\n  },\n};\n\ntype Info = typeof info;\n\n/**\n * **audio-keyboard-response**\n *\n * jsPsych plugin for playing an audio file and getting a keyboard response\n *\n * @author Josh de Leeuw\n * @see {@link https://www.jspsych.org/plugins/jspsych-audio-keyboard-response/ audio-keyboard-response plugin documentation on jspsych.org}\n */\nclass AudioKeyboardResponsePlugin implements JsPsychPlugin<Info> {\n  static info = info;\n  private audio;\n\n  constructor(private jsPsych: JsPsych) {}\n\n  trial(display_element: HTMLElement, trial: TrialType<Info>, on_load: () => void) {\n    // hold the .resolve() function from the Promise that ends the trial\n    let trial_complete;\n\n    // setup stimulus\n    var context = this.jsPsych.pluginAPI.audioContext();\n\n    // store response\n    var response = {\n      rt: null,\n      key: null,\n    };\n\n    // record webaudio context start time\n    var startTime;\n\n    // load audio file\n    this.jsPsych.pluginAPI\n      .getAudioBuffer(trial.stimulus)\n      .then((buffer) => {\n        if (context !== null) {\n          this.audio = context.createBufferSource();\n          this.audio.buffer = buffer;\n          this.audio.connect(context.destination);\n        } else {\n          this.audio = buffer;\n          this.audio.currentTime = 0;\n        }\n        setupTrial();\n      })\n      .catch((err) => {\n        console.error(\n          `Failed to load audio file \"${trial.stimulus}\". Try checking the file path. We recommend using the preload plugin to load audio files.`\n        );\n        console.error(err);\n      });\n\n    const setupTrial = () => {\n      // set up end event if trial needs it\n      if (trial.trial_ends_after_audio) {\n        this.audio.addEventListener(\"ended\", end_trial);\n      }\n\n      // show prompt if there is one\n      if (trial.prompt !== null) {\n        display_element.innerHTML = trial.prompt;\n      }\n\n      // start audio\n      if (context !== null) {\n        startTime = context.currentTime;\n        this.audio.start(startTime);\n      } else {\n        this.audio.play();\n      }\n\n      // start keyboard listener when trial starts or sound ends\n      if (trial.response_allowed_while_playing) {\n        setup_keyboard_listener();\n      } else if (!trial.trial_ends_after_audio) {\n        this.audio.addEventListener(\"ended\", setup_keyboard_listener);\n      }\n\n      // end trial if time limit is set\n      if (trial.trial_duration !== null) {\n        this.jsPsych.pluginAPI.setTimeout(() => {\n          end_trial();\n        }, trial.trial_duration);\n      }\n\n      on_load();\n    };\n\n    // function to end trial when it is time\n    const end_trial = () => {\n      // kill any remaining setTimeout handlers\n      this.jsPsych.pluginAPI.clearAllTimeouts();\n\n      // stop the audio file if it is playing\n      // remove end event listeners if they exist\n      if (context !== null) {\n        this.audio.stop();\n      } else {\n        this.audio.pause();\n      }\n\n      this.audio.removeEventListener(\"ended\", end_trial);\n      this.audio.removeEventListener(\"ended\", setup_keyboard_listener);\n\n      // kill keyboard listeners\n      this.jsPsych.pluginAPI.cancelAllKeyboardResponses();\n\n      // gather the data to store for the trial\n      var trial_data = {\n        rt: response.rt,\n        stimulus: trial.stimulus,\n        response: response.key,\n      };\n\n      // clear the display\n      display_element.innerHTML = \"\";\n\n      // move on to the next trial\n      this.jsPsych.finishTrial(trial_data);\n\n      trial_complete();\n    };\n\n    // function to handle responses by the subject\n    function after_response(info) {\n      // only record the first response\n      if (response.key == null) {\n        response = info;\n      }\n\n      if (trial.response_ends_trial) {\n        end_trial();\n      }\n    }\n\n    const setup_keyboard_listener = () => {\n      // start the response listener\n      if (context !== null) {\n        this.jsPsych.pluginAPI.getKeyboardResponse({\n          callback_function: after_response,\n          valid_responses: trial.choices,\n          rt_method: \"audio\",\n          persist: false,\n          allow_held_key: false,\n          audio_context: context,\n          audio_context_start_time: startTime,\n        });\n      } else {\n        this.jsPsych.pluginAPI.getKeyboardResponse({\n          callback_function: after_response,\n          valid_responses: trial.choices,\n          rt_method: \"performance\",\n          persist: false,\n          allow_held_key: false,\n        });\n      }\n    };\n\n    return new Promise((resolve) => {\n      trial_complete = resolve;\n    });\n  }\n\n  simulate(\n    trial: TrialType<Info>,\n    simulation_mode,\n    simulation_options: any,\n    load_callback: () => void\n  ) {\n    if (simulation_mode == \"data-only\") {\n      load_callback();\n      this.simulate_data_only(trial, simulation_options);\n    }\n    if (simulation_mode == \"visual\") {\n      this.simulate_visual(trial, simulation_options, load_callback);\n    }\n  }\n\n  private simulate_data_only(trial: TrialType<Info>, simulation_options) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    this.jsPsych.finishTrial(data);\n  }\n\n  private simulate_visual(trial: TrialType<Info>, simulation_options, load_callback: () => void) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    const display_element = this.jsPsych.getDisplayElement();\n\n    const respond = () => {\n      if (data.rt !== null) {\n        this.jsPsych.pluginAPI.pressKey(data.response, data.rt);\n      }\n    };\n\n    this.trial(display_element, trial, () => {\n      load_callback();\n      if (!trial.response_allowed_while_playing) {\n        this.audio.addEventListener(\"ended\", respond);\n      } else {\n        respond();\n      }\n    });\n  }\n\n  private create_simulation_data(trial: TrialType<Info>, simulation_options) {\n    const default_data = {\n      stimulus: trial.stimulus,\n      rt: this.jsPsych.randomization.sampleExGaussian(500, 50, 1 / 150, true),\n      response: this.jsPsych.pluginAPI.getValidKey(trial.choices),\n    };\n\n    const data = this.jsPsych.pluginAPI.mergeSimulationData(default_data, simulation_options);\n\n    this.jsPsych.pluginAPI.ensureSimulationDataConsistency(trial, data);\n\n    return data;\n  }\n}\n\nexport default AudioKeyboardResponsePlugin;\n"],"names":["info","name","parameters","stimulus","type","ParameterType","AUDIO","pretty_name","default","undefined","choices","KEYS","prompt","HTML_STRING","trial_duration","INT","response_ends_trial","BOOL","trial_ends_after_audio","response_allowed_while_playing","AudioKeyboardResponsePlugin","jsPsych","_classCallCheck","this","key","value","display_element","trial","on_load","trial_complete","startTime","_this","context","pluginAPI","audioContext","response","rt","getAudioBuffer","then","buffer","audio","createBufferSource","connect","destination","currentTime","setupTrial","err","console","error","concat","addEventListener","end_trial","innerHTML","start","play","setup_keyboard_listener","setTimeout","clearAllTimeouts","stop","pause","removeEventListener","cancelAllKeyboardResponses","trial_data","finishTrial","after_response","getKeyboardResponse","callback_function","valid_responses","rt_method","persist","allow_held_key","audio_context","audio_context_start_time","Promise","resolve","simulation_mode","simulation_options","load_callback","simulate_data_only","simulate_visual","data","create_simulation_data","_this2","getDisplayElement","respond","pressKey","default_data","randomization","sampleExGaussian","getValidKey","mergeSimulationData","ensureSimulationDataConsistency"],"mappings":"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"}