{"version":3,"file":"index.js","sources":["../../../src/index.ts"],"sourcesContent":["import { convertIntegrationFnToClass, defineIntegration } from '@sentry/core';\nimport type { Event, Integration, IntegrationClass, IntegrationFn, StackFrame } from '@sentry/types';\n\nimport { patchWebAssembly } from './patchWebAssembly';\nimport { getImage, getImages } from './registry';\n\nconst INTEGRATION_NAME = 'Wasm';\n\nconst _wasmIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      patchWebAssembly();\n    },\n    processEvent(event: Event): Event {\n      let haveWasm = false;\n\n      if (event.exception && event.exception.values) {\n        event.exception.values.forEach(exception => {\n          if (exception.stacktrace && exception.stacktrace.frames) {\n            haveWasm = haveWasm || patchFrames(exception.stacktrace.frames);\n          }\n        });\n      }\n\n      if (haveWasm) {\n        event.debug_meta = event.debug_meta || {};\n        event.debug_meta.images = [...(event.debug_meta.images || []), ...getImages()];\n      }\n\n      return event;\n    },\n  };\n}) satisfies IntegrationFn;\n\nexport const wasmIntegration = defineIntegration(_wasmIntegration);\n\n/**\n * Process WASM stack traces to support server-side symbolication.\n *\n * This also hooks the WebAssembly loading browser API so that module\n * registrations are intercepted.\n *\n * @deprecated Use `wasmIntegration` export instead\n *\n * import { wasmIntegration } from '@sentry/wasm';\n *\n * ```\n * Sentry.init({ integrations: [wasmIntegration()] });\n * ```\n */\n// eslint-disable-next-line deprecation/deprecation\nexport const Wasm = convertIntegrationFnToClass(INTEGRATION_NAME, wasmIntegration) as IntegrationClass<\n  Integration & { processEvent: (event: Event) => Event }\n>;\n\n/**\n * Patches a list of stackframes with wasm data needed for server-side symbolication\n * if applicable. Returns true if any frames were patched.\n */\nfunction patchFrames(frames: Array<StackFrame>): boolean {\n  let haveWasm = false;\n  frames.forEach(frame => {\n    if (!frame.filename) {\n      return;\n    }\n    const match = frame.filename.match(/^(.*?):wasm-function\\[\\d+\\]:(0x[a-fA-F0-9]+)$/);\n    if (match !== null) {\n      const index = getImage(match[1]);\n      if (index >= 0) {\n        frame.instruction_addr = match[2];\n        frame.addr_mode = `rel:${index}`;\n        frame.filename = match[1];\n        frame.platform = 'native';\n        haveWasm = true;\n      }\n    }\n  });\n  return haveWasm;\n}\n"],"names":["patchWebAssembly","getImages","defineIntegration","convertIntegrationFnToClass","getImage"],"mappings":";;;;;;AAMA,MAAM,gBAAA,GAAmB,MAAM,CAAA;AAC/B;AACA,MAAM,gBAAiB,IAAG,MAAM;AAChC,EAAE,OAAO;AACT,IAAI,IAAI,EAAE,gBAAgB;AAC1B,IAAI,SAAS,GAAG;AAChB,MAAMA,iCAAgB,EAAE,CAAA;AACxB,KAAK;AACL,IAAI,YAAY,CAAC,KAAK,EAAgB;AACtC,MAAM,IAAI,QAAS,GAAE,KAAK,CAAA;AAC1B;AACA,MAAM,IAAI,KAAK,CAAC,SAAA,IAAa,KAAK,CAAC,SAAS,CAAC,MAAM,EAAE;AACrD,QAAQ,KAAK,CAAC,SAAS,CAAC,MAAM,CAAC,OAAO,CAAC,SAAA,IAAa;AACpD,UAAU,IAAI,SAAS,CAAC,UAAA,IAAc,SAAS,CAAC,UAAU,CAAC,MAAM,EAAE;AACnE,YAAY,QAAA,GAAW,QAAA,IAAY,WAAW,CAAC,SAAS,CAAC,UAAU,CAAC,MAAM,CAAC,CAAA;AAC3E,WAAU;AACV,SAAS,CAAC,CAAA;AACV,OAAM;AACN;AACA,MAAM,IAAI,QAAQ,EAAE;AACpB,QAAQ,KAAK,CAAC,UAAW,GAAE,KAAK,CAAC,UAAA,IAAc,EAAE,CAAA;AACjD,QAAQ,KAAK,CAAC,UAAU,CAAC,SAAS,CAAC,IAAI,KAAK,CAAC,UAAU,CAAC,MAAA,IAAU,EAAE,CAAC,EAAE,GAAGC,kBAAS,EAAE,CAAC,CAAA;AACtF,OAAM;AACN;AACA,MAAM,OAAO,KAAK,CAAA;AAClB,KAAK;AACL,GAAG,CAAA;AACH,CAAC,CAAE,EAAA;AACH;MACa,eAAgB,GAAEC,sBAAiB,CAAC,gBAAgB,EAAC;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAM,OAAOC,gCAA2B,CAAC,gBAAgB,EAAE,eAAe,CAAE;;CAEnF;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,WAAW,CAAC,MAAM,EAA8B;AACzD,EAAE,IAAI,QAAS,GAAE,KAAK,CAAA;AACtB,EAAE,MAAM,CAAC,OAAO,CAAC,SAAS;AAC1B,IAAI,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE;AACzB,MAAM,OAAM;AACZ,KAAI;AACJ,IAAI,MAAM,KAAM,GAAE,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,+CAA+C,CAAC,CAAA;AACvF,IAAI,IAAI,KAAM,KAAI,IAAI,EAAE;AACxB,MAAM,MAAM,QAAQC,iBAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAA;AACtC,MAAM,IAAI,KAAM,IAAG,CAAC,EAAE;AACtB,QAAQ,KAAK,CAAC,gBAAA,GAAmB,KAAK,CAAC,CAAC,CAAC,CAAA;AACzC,QAAQ,KAAK,CAAC,SAAU,GAAE,CAAC,IAAI,EAAE,KAAK,CAAC,CAAA,CAAA;AACA,QAAA,KAAA,CAAA,QAAA,GAAA,KAAA,CAAA,CAAA,CAAA,CAAA;AACA,QAAA,KAAA,CAAA,QAAA,GAAA,QAAA,CAAA;AACA,QAAA,QAAA,GAAA,IAAA,CAAA;AACA,OAAA;AACA,KAAA;AACA,GAAA,CAAA,CAAA;AACA,EAAA,OAAA,QAAA,CAAA;AACA;;;;;"}