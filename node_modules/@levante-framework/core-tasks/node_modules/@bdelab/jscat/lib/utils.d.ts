import { Stimulus, Zeta } from './type';
/**
 * calculates the probability that someone with a given ability level theta will answer correctly an item. Uses the 4 parameters logistic model
 * @param theta - ability estimate
 * @param zeta - item params
 * @returns {number} the probability
 */
export declare const itemResponseFunction: (theta: number, zeta: Zeta) => number;
/**
 * a 3PL Fisher information function
 * @param theta - ability estimate
 * @param zeta - item params
 * @returns {number} - the expected value of the observed information
 */
export declare const fisherInformation: (theta: number, zeta: Zeta) => number;
/**
 * return a Gaussian distribution within a given range
 * @param mean
 * @param stdDev
 * @param min
 * @param max
 * @param stepSize - the quantization (step size) of the internal table, default = 0.1
 * @returns {Array<[number, number]>} - a normal distribution
 */
export declare const normal: (mean?: number, stdDev?: number, min?: number, max?: number, stepSize?: number) => number[][];
/**
 * find the item in a given array that has the difficulty closest to the target value
 *
 * @remarks
 * The input array of stimuli must be sorted by difficulty.
 *
 * @param arr Array<Stimulus> - an array of stimuli sorted by difficulty
 * @param target number - ability estimate
 * @returns {number} the index of arr
 */
export declare const findClosest: (arr: Array<Stimulus>, target: number) => number;
