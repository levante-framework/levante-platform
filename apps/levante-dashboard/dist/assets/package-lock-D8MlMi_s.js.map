{"version":3,"file":"package-lock-D8MlMi_s.js","sources":["../../src/composables/queries/useUserChildDataQuery.ts","../../src/composables/mutations/useCompleteAssessmentMutation.ts"],"sourcesContent":["import { type MaybeRefOrGetter } from 'vue';\nimport { useQuery, type UseQueryReturnType, type UseQueryOptions } from '@tanstack/vue-query';\nimport { storeToRefs } from 'pinia';\nimport { useAuthStore } from '@/store/auth';\nimport { computeQueryOverrides } from '@/helpers/computeQueryOverrides';\nimport { fetchDocById } from '@/helpers/query/utils';\nimport { USER_CHILD_DATA_QUERY_KEY } from '@/constants/queryKeys';\nimport { FIRESTORE_COLLECTIONS } from '@/constants/firebase';\n\n/**\n * User child data query.\n *\n * @TODO: Evaluate wether this query can be replaced by the existing useUserDataQuery composable.\n *\n * @param {QueryOptions|undefined} queryOptions â€“ Optional TanStack query options.\n * @returns {UseQueryResult} The TanStack query result.\n */\nconst useUserChildDataQuery = (queryOptions?: UseQueryOptions): UseQueryReturnType => {\n  const authStore = useAuthStore();\n  const { roarUid } = storeToRefs(authStore);\n\n  // Ensure all necessary data is loaded before enabling the query.\n  const queryConditions = [() => !!roarUid.value];\n  const { isQueryEnabled, options } = computeQueryOverrides(queryConditions, queryOptions);\n\n  return useQuery({\n    queryKey: [USER_CHILD_DATA_QUERY_KEY, roarUid],\n    queryFn: () => fetchDocById(FIRESTORE_COLLECTIONS.USERS, roarUid, ['studentData', 'birthMonth', 'birthYear']),\n    enabled: isQueryEnabled,\n    ...options,\n  });\n};\n\nexport default useUserChildDataQuery;\n","import { useMutation, useQueryClient } from '@tanstack/vue-query';\nimport type { UseMutationReturnType } from '@tanstack/vue-query';\nimport { useAuthStore } from '@/store/auth';\nimport { COMPLETE_ASSESSMENT_MUTATION_KEY } from '@/constants/mutationKeys';\nimport { USER_ASSIGNMENTS_QUERY_KEY } from '@/constants/queryKeys';\n\ninterface CompleteAssessmentParams {\n  adminId: string;\n  taskId: string;\n}\n\n/**\n * Complete Assessment mutation.\n *\n * Mutation to mark a task as complete in the user's assignments subcollection and automatically invalidate the corresponding queries.\n *\n * @returns The mutation object returned by `useMutation`.\n */\nconst useCompleteAssessmentMutation = (): UseMutationReturnType<void, Error, CompleteAssessmentParams, unknown> => {\n  const authStore = useAuthStore();\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationKey: COMPLETE_ASSESSMENT_MUTATION_KEY,\n    mutationFn: async ({ adminId, taskId }: CompleteAssessmentParams): Promise<void> => {\n      // Check if roarfirekit is initialized before attempting to use it.\n      if (!authStore.isFirekitInit || !authStore.roarfirekit) {\n        throw new Error('Roarfirekit is not initialized. Cannot complete assessment.');\n      }\n      await authStore.roarfirekit.completeAssessment(adminId, taskId);\n    },\n    onSuccess: (_, variables: CompleteAssessmentParams): void => {\n      console.log(\n        `Assessment completion mutation successful for adminId: ${variables.adminId}, taskId: ${variables.taskId}`,\n      );\n      // Invalidate user assignments query which has the task status info.\n      // Cannot do optimistic updates per Max's comment in useUpsertAdministrationMutation.js :(\n      queryClient.invalidateQueries({ queryKey: [USER_ASSIGNMENTS_QUERY_KEY] });\n    },\n    onError: (error: Error, variables: CompleteAssessmentParams): void => {\n      console.error(\n        `Error completing assessment for adminId: ${variables.adminId}, taskId: ${variables.taskId}:`,\n        error,\n      );\n    },\n    retry: 3,\n  });\n};\n\nexport default useCompleteAssessmentMutation;\n"],"names":["useUserChildDataQuery","queryOptions","authStore","useAuthStore","roarUid","storeToRefs","queryConditions","isQueryEnabled","options","computeQueryOverrides","useQuery","USER_CHILD_DATA_QUERY_KEY","fetchDocById","FIRESTORE_COLLECTIONS","useCompleteAssessmentMutation","queryClient","useQueryClient","useMutation","COMPLETE_ASSESSMENT_MUTATION_KEY","adminId","taskId","_","variables","USER_ASSIGNMENTS_QUERY_KEY","error"],"mappings":"+eAiBA,MAAMA,EAAyBC,GAAuD,CACpF,MAAMC,EAAYC,EAAA,EACZ,CAAE,QAAAC,CAAA,EAAYC,EAAYH,CAAS,EAGnCI,EAAkB,CAAC,IAAM,CAAC,CAACF,EAAQ,KAAK,EACxC,CAAE,eAAAG,EAAgB,QAAAC,CAAA,EAAYC,EAAsBH,EAAiBL,CAAY,EAEvF,OAAOS,EAAS,CACd,SAAU,CAACC,EAA2BP,CAAO,EAC7C,QAAS,IAAMQ,EAAaC,EAAsB,MAAOT,EAAS,CAAC,cAAe,aAAc,WAAW,CAAC,EAC5G,QAASG,EACT,GAAGC,CAAA,CACJ,CACH,ECbMM,EAAgC,IAA6E,CACjH,MAAMZ,EAAYC,EAAA,EACZY,EAAcC,EAAA,EAEpB,OAAOC,EAAY,CACjB,YAAaC,EACb,WAAY,MAAO,CAAE,QAAAC,EAAS,OAAAC,KAAsD,CAElF,GAAI,CAAClB,EAAU,eAAiB,CAACA,EAAU,YACzC,MAAM,IAAI,MAAM,6DAA6D,EAE/E,MAAMA,EAAU,YAAY,mBAAmBiB,EAASC,CAAM,CAChE,EACA,UAAW,CAACC,EAAGC,IAA8C,CAC3D,QAAQ,IACN,0DAA0DA,EAAU,OAAO,aAAaA,EAAU,MAAM,EAAA,EAI1GP,EAAY,kBAAkB,CAAE,SAAU,CAACQ,CAA0B,EAAG,CAC1E,EACA,QAAS,CAACC,EAAcF,IAA8C,CACpE,QAAQ,MACN,4CAA4CA,EAAU,OAAO,aAAaA,EAAU,MAAM,IAC1FE,CAAA,CAEJ,EACA,MAAO,CAAA,CACR,CACH"}