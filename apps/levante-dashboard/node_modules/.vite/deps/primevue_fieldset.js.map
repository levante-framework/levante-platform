{
  "version": 3,
  "sources": ["../../../../../node_modules/src/fieldset/style/FieldsetStyle.js", "../../../../../node_modules/src/fieldset/BaseFieldset.vue", "../../../../../node_modules/src/fieldset/Fieldset.vue", "../../../../../node_modules/src/fieldset/Fieldset.vue?vue&type=template&id=9234344e&lang.js"],
  "sourcesContent": ["import { style } from '@primeuix/styles/fieldset';\nimport BaseStyle from '@primevue/core/base/style';\n\nconst classes = {\n    root: ({ props }) => [\n        'p-fieldset p-component',\n        {\n            'p-fieldset-toggleable': props.toggleable\n        }\n    ],\n    legend: 'p-fieldset-legend',\n    legendLabel: 'p-fieldset-legend-label',\n    toggleButton: 'p-fieldset-toggle-button',\n    toggleIcon: 'p-fieldset-toggle-icon',\n    contentContainer: 'p-fieldset-content-container',\n    content: 'p-fieldset-content'\n};\n\nexport default BaseStyle.extend({\n    name: 'fieldset',\n    style,\n    classes\n});\n", "<script>\nimport BaseComponent from '@primevue/core/basecomponent';\nimport FieldsetStyle from 'primevue/fieldset/style';\n\nexport default {\n    name: 'BaseFieldset',\n    extends: BaseComponent,\n    props: {\n        legend: String,\n        toggleable: Boolean,\n        collapsed: Boolean,\n        toggleButtonProps: {\n            type: null,\n            default: null\n        }\n    },\n    style: FieldsetStyle,\n    provide() {\n        return {\n            $pcFieldset: this,\n            $parentInstance: this\n        };\n    }\n};\n</script>\n", "<template>\n    <fieldset :class=\"cx('root')\" :data-p=\"dataP\" v-bind=\"ptmi('root')\">\n        <legend :class=\"cx('legend')\" :data-p=\"dataP\" v-bind=\"ptm('legend')\">\n            <slot name=\"legend\" :toggleCallback=\"toggle\">\n                <span v-if=\"!toggleable\" :id=\"$id + '_header'\" :class=\"cx('legendLabel')\" v-bind=\"ptm('legendLabel')\">{{ legend }}</span>\n                <button\n                    v-if=\"toggleable\"\n                    :id=\"$id + '_header'\"\n                    v-ripple\n                    type=\"button\"\n                    :aria-controls=\"$id + '_content'\"\n                    :aria-expanded=\"!d_collapsed\"\n                    :aria-label=\"buttonAriaLabel\"\n                    :class=\"cx('toggleButton')\"\n                    @click=\"toggle\"\n                    @keydown=\"onKeyDown\"\n                    v-bind=\"{ ...toggleButtonProps, ...ptm('toggleButton') }\"\n                >\n                    <!--TODO: togglericon deprecated since v4.0-->\n                    <slot :name=\"$slots.toggleicon ? 'toggleicon' : 'togglericon'\" :collapsed=\"d_collapsed\" :class=\"cx('toggleIcon')\">\n                        <component :is=\"d_collapsed ? 'PlusIcon' : 'MinusIcon'\" :class=\"cx('toggleIcon')\" v-bind=\"ptm('toggleIcon')\" />\n                    </slot>\n                    <span :class=\"cx('legendLabel')\" v-bind=\"ptm('legendLabel')\">{{ legend }}</span>\n                </button>\n            </slot>\n        </legend>\n        <transition name=\"p-toggleable-content\" v-bind=\"ptm('transition')\">\n            <div v-show=\"!d_collapsed\" :id=\"$id + '_content'\" :class=\"cx('contentContainer')\" role=\"region\" :aria-labelledby=\"$id + '_header'\" v-bind=\"ptm('contentContainer')\">\n                <div :class=\"cx('content')\" v-bind=\"ptm('content')\">\n                    <slot></slot>\n                </div>\n            </div>\n        </transition>\n    </fieldset>\n</template>\n\n<script>\nimport { cn } from '@primeuix/utils';\nimport MinusIcon from '@primevue/icons/minus';\nimport PlusIcon from '@primevue/icons/plus';\nimport Ripple from 'primevue/ripple';\nimport BaseFieldset from './BaseFieldset.vue';\n\nexport default {\n    name: 'Fieldset',\n    extends: BaseFieldset,\n    inheritAttrs: false,\n    emits: ['update:collapsed', 'toggle'],\n    data() {\n        return {\n            d_collapsed: this.collapsed\n        };\n    },\n    watch: {\n        collapsed(newValue) {\n            this.d_collapsed = newValue;\n        }\n    },\n    methods: {\n        toggle(event) {\n            this.d_collapsed = !this.d_collapsed;\n            this.$emit('update:collapsed', this.d_collapsed);\n            this.$emit('toggle', {\n                originalEvent: event,\n                value: this.d_collapsed\n            });\n        },\n        onKeyDown(event) {\n            if (event.code === 'Enter' || event.code === 'NumpadEnter' || event.code === 'Space') {\n                this.toggle(event);\n                event.preventDefault();\n            }\n        }\n    },\n    computed: {\n        buttonAriaLabel() {\n            return this.toggleButtonProps && this.toggleButtonProps.ariaLabel ? this.toggleButtonProps.ariaLabel : this.legend;\n        },\n        dataP() {\n            return cn({\n                toggleable: this.toggleable\n            });\n        }\n    },\n    directives: {\n        ripple: Ripple\n    },\n    components: {\n        PlusIcon,\n        MinusIcon\n    }\n};\n</script>\n", "<template>\n    <fieldset :class=\"cx('root')\" :data-p=\"dataP\" v-bind=\"ptmi('root')\">\n        <legend :class=\"cx('legend')\" :data-p=\"dataP\" v-bind=\"ptm('legend')\">\n            <slot name=\"legend\" :toggleCallback=\"toggle\">\n                <span v-if=\"!toggleable\" :id=\"$id + '_header'\" :class=\"cx('legendLabel')\" v-bind=\"ptm('legendLabel')\">{{ legend }}</span>\n                <button\n                    v-if=\"toggleable\"\n                    :id=\"$id + '_header'\"\n                    v-ripple\n                    type=\"button\"\n                    :aria-controls=\"$id + '_content'\"\n                    :aria-expanded=\"!d_collapsed\"\n                    :aria-label=\"buttonAriaLabel\"\n                    :class=\"cx('toggleButton')\"\n                    @click=\"toggle\"\n                    @keydown=\"onKeyDown\"\n                    v-bind=\"{ ...toggleButtonProps, ...ptm('toggleButton') }\"\n                >\n                    <!--TODO: togglericon deprecated since v4.0-->\n                    <slot :name=\"$slots.toggleicon ? 'toggleicon' : 'togglericon'\" :collapsed=\"d_collapsed\" :class=\"cx('toggleIcon')\">\n                        <component :is=\"d_collapsed ? 'PlusIcon' : 'MinusIcon'\" :class=\"cx('toggleIcon')\" v-bind=\"ptm('toggleIcon')\" />\n                    </slot>\n                    <span :class=\"cx('legendLabel')\" v-bind=\"ptm('legendLabel')\">{{ legend }}</span>\n                </button>\n            </slot>\n        </legend>\n        <transition name=\"p-toggleable-content\" v-bind=\"ptm('transition')\">\n            <div v-show=\"!d_collapsed\" :id=\"$id + '_content'\" :class=\"cx('contentContainer')\" role=\"region\" :aria-labelledby=\"$id + '_header'\" v-bind=\"ptm('contentContainer')\">\n                <div :class=\"cx('content')\" v-bind=\"ptm('content')\">\n                    <slot></slot>\n                </div>\n            </div>\n        </transition>\n    </fieldset>\n</template>\n\n<script>\nimport { cn } from '@primeuix/utils';\nimport MinusIcon from '@primevue/icons/minus';\nimport PlusIcon from '@primevue/icons/plus';\nimport Ripple from 'primevue/ripple';\nimport BaseFieldset from './BaseFieldset.vue';\n\nexport default {\n    name: 'Fieldset',\n    extends: BaseFieldset,\n    inheritAttrs: false,\n    emits: ['update:collapsed', 'toggle'],\n    data() {\n        return {\n            d_collapsed: this.collapsed\n        };\n    },\n    watch: {\n        collapsed(newValue) {\n            this.d_collapsed = newValue;\n        }\n    },\n    methods: {\n        toggle(event) {\n            this.d_collapsed = !this.d_collapsed;\n            this.$emit('update:collapsed', this.d_collapsed);\n            this.$emit('toggle', {\n                originalEvent: event,\n                value: this.d_collapsed\n            });\n        },\n        onKeyDown(event) {\n            if (event.code === 'Enter' || event.code === 'NumpadEnter' || event.code === 'Space') {\n                this.toggle(event);\n                event.preventDefault();\n            }\n        }\n    },\n    computed: {\n        buttonAriaLabel() {\n            return this.toggleButtonProps && this.toggleButtonProps.ariaLabel ? this.toggleButtonProps.ariaLabel : this.legend;\n        },\n        dataP() {\n            return cn({\n                toggleable: this.toggleable\n            });\n        }\n    },\n    directives: {\n        ripple: Ripple\n    },\n    components: {\n        PlusIcon,\n        MinusIcon\n    }\n};\n</script>\n"],
  "mappings": "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",
  "names": ["classes", "root", "_ref", "props", "toggleable", "legend", "legendLabel", "toggleButton", "toggleIcon", "contentContainer", "content", "BaseStyle", "extend", "name", "style", "name", "BaseComponent", "props", "legend", "String", "toggleable", "Boolean", "collapsed", "toggleButtonProps", "type", "style", "FieldsetStyle", "provide", "$pcFieldset", "$parentInstance", "script", "BaseFieldset", "inheritAttrs", "emits", "data", "d_collapsed", "watch", "newValue", "methods", "toggle", "event", "$emit", "originalEvent", "value", "onKeyDown", "code", "preventDefault", "computed", "buttonAriaLabel", "ariaLabel", "dataP", "cn", "directives", "ripple", "Ripple", "components", "PlusIcon", "MinusIcon", "_openBlock", "_createElementBlock", "_mergeProps", "_ctx", "cx", "$options", "ptmi", "_createElementVNode", "ptm", "_renderSlot", "$slots", "toggleCallback", "id", "$id", "_hoisted_3", "_withDirectives", "$data", "onClick", "apply", "arguments", "onKeydown", "_objectSpread", "toggleicon", "_createBlock", "_resolveDynamicComponent", "_createVNode", "_Transition", "role"]
}
