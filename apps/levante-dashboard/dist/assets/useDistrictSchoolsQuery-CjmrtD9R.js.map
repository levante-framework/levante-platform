{"version":3,"file":"useDistrictSchoolsQuery-CjmrtD9R.js","sources":["../../../../node_modules/lodash/kebabCase.js","../../src/composables/queries/useDistrictSchoolsQuery.ts"],"sourcesContent":["var createCompounder = require('./_createCompounder');\n\n/**\n * Converts `string` to\n * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to convert.\n * @returns {string} Returns the kebab cased string.\n * @example\n *\n * _.kebabCase('Foo Bar');\n * // => 'foo-bar'\n *\n * _.kebabCase('fooBar');\n * // => 'foo-bar'\n *\n * _.kebabCase('__FOO_BAR__');\n * // => 'foo-bar'\n */\nvar kebabCase = createCompounder(function(result, word, index) {\n  return result + (index ? '-' : '') + word.toLowerCase();\n});\n\nmodule.exports = kebabCase;\n","import { computed, toValue } from 'vue';\nimport { useQuery } from '@tanstack/vue-query';\nimport _isEmpty from 'lodash/isEmpty';\nimport { orgFetcher } from '@/helpers/query/orgs';\nimport { computeQueryOverrides } from '@/helpers/computeQueryOverrides';\nimport useUserType from '@/composables/useUserType';\nimport useUserClaimsQuery from '@/composables/queries/useUserClaimsQuery';\nimport { DISTRICT_SCHOOLS_QUERY_KEY } from '@/constants/queryKeys';\nimport { FIRESTORE_COLLECTIONS } from '@/constants/firebase';\n\n/**\n * District Schools query.\n *\n * Query designed to fetch the schools of a given district.\n *\n * @param {Ref<String>} districtId – A Vue ref containing the ID of the district to fetch schools for.\n * @param {QueryOptions|undefined} queryOptions – Optional TanStack query options.\n * @returns {UseQueryResult} The TanStack query result.\n */\nconst useDistrictSchoolsQuery = (districtId, queryOptions?: UseQueryOptions): UseQueryReturnType => {\n  // Fetch the user claims.\n  const { data: userClaims } = useUserClaimsQuery({\n    enabled: queryOptions?.enabled ?? true,\n  });\n\n  // Get admin status and administation orgs.\n  const { isSuperAdmin } = useUserType(userClaims);\n  const administrationOrgs = computed(() => userClaims.value?.claims?.adminOrgs);\n\n  // Ensure all necessary data is loaded before enabling the query.\n  const claimsLoaded = computed(() => !_isEmpty(userClaims?.value?.claims));\n  const queryConditions = [() => !!toValue(districtId), () => claimsLoaded.value];\n  const { isQueryEnabled, options } = computeQueryOverrides(queryConditions, queryOptions);\n\n  // Fields to select for the query.\n  const select = ['name', 'id', 'tags', 'currentActivationCode', 'lowGrade'];\n\n  return useQuery({\n    queryKey: [DISTRICT_SCHOOLS_QUERY_KEY, districtId],\n    queryFn: () => orgFetcher(FIRESTORE_COLLECTIONS.SCHOOLS, districtId, isSuperAdmin, administrationOrgs, select),\n    enabled: isQueryEnabled,\n    ...options,\n  });\n};\n\nexport default useDistrictSchoolsQuery;\n"],"names":["createCompounder","require$$0","kebabCase","result","word","index","kebabCase_1","useDistrictSchoolsQuery","districtId","queryOptions","userClaims","useUserClaimsQuery","isSuperAdmin","useUserType","administrationOrgs","computed","_b","_a","claimsLoaded","_isEmpty","queryConditions","toValue","isQueryEnabled","options","computeQueryOverrides","select","useQuery","DISTRICT_SCHOOLS_QUERY_KEY","orgFetcher","FIRESTORE_COLLECTIONS"],"mappings":"qmBAAA,IAAIA,EAAmBC,EAuBnBC,EAAYF,EAAiB,SAASG,EAAQC,EAAMC,EAAO,CAC7D,OAAOF,GAAUE,EAAQ,IAAM,IAAMD,EAAK,YAAW,CACvD,CAAC,EAEDE,EAAiBJ,eCRXK,EAA0B,CAACC,EAAYC,IAAuD,CAElG,KAAM,CAAE,KAAMC,CAAA,EAAeC,EAAmB,CAC9C,SAASF,GAAA,YAAAA,EAAc,UAAW,EAAA,CACnC,EAGK,CAAE,aAAAG,CAAA,EAAiBC,EAAYH,CAAU,EACzCI,EAAqBC,EAAS,IAAA,SAAM,OAAAC,GAAAC,EAAAP,EAAW,QAAX,YAAAO,EAAkB,SAAlB,YAAAD,EAA0B,UAAS,EAGvEE,EAAeH,EAAS,IAAA,OAAM,OAACI,GAASF,EAAAP,GAAA,YAAAA,EAAY,QAAZ,YAAAO,EAAmB,MAAM,EAAC,EAClEG,EAAkB,CAAC,IAAM,CAAC,CAACC,EAAQb,CAAU,EAAG,IAAMU,EAAa,KAAK,EACxE,CAAE,eAAAI,EAAgB,QAAAC,CAAA,EAAYC,EAAsBJ,EAAiBX,CAAY,EAGjFgB,EAAS,CAAC,OAAQ,KAAM,OAAQ,wBAAyB,UAAU,EAEzE,OAAOC,EAAS,CACd,SAAU,CAACC,EAA4BnB,CAAU,EACjD,QAAS,IAAMoB,EAAWC,EAAsB,QAASrB,EAAYI,EAAcE,EAAoBW,CAAM,EAC7G,QAASH,EACT,GAAGC,CAAA,CACJ,CACH","x_google_ignoreList":[0]}