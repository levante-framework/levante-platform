{
  "version": 3,
  "sources": ["../../../../../node_modules/src/tablist/style/TabListStyle.js", "../../../../../node_modules/src/tablist/BaseTabList.vue", "../../../../../node_modules/src/tablist/TabList.vue", "../../../../../node_modules/src/tablist/TabList.vue?vue&type=template&id=052d2bbf&lang.js"],
  "sourcesContent": ["import BaseStyle from '@primevue/core/base/style';\n\nconst classes = {\n    root: 'p-tablist',\n    content: 'p-tablist-content p-tablist-viewport',\n    tabList: 'p-tablist-tab-list',\n    activeBar: 'p-tablist-active-bar',\n    prevButton: 'p-tablist-prev-button p-tablist-nav-button',\n    nextButton: 'p-tablist-next-button p-tablist-nav-button'\n};\n\nexport default BaseStyle.extend({\n    name: 'tablist',\n    classes\n});\n", "<script>\nimport BaseComponent from '@primevue/core/basecomponent';\nimport TabListStyle from 'primevue/tablist/style';\n\nexport default {\n    name: 'BaseTabList',\n    extends: BaseComponent,\n    props: {},\n    style: TabListStyle,\n    provide() {\n        return {\n            $pcTabList: this,\n            $parentInstance: this\n        };\n    }\n};\n</script>\n", "<template>\n    <div ref=\"list\" :class=\"cx('root')\" :data-p=\"dataP\" v-bind=\"ptmi('root')\">\n        <button\n            v-if=\"showNavigators && isPrevButtonEnabled\"\n            ref=\"prevButton\"\n            type=\"button\"\n            v-ripple\n            :class=\"cx('prevButton')\"\n            :aria-label=\"prevButtonAriaLabel\"\n            :tabindex=\"$pcTabs.tabindex\"\n            @click=\"onPrevButtonClick\"\n            v-bind=\"ptm('prevButton')\"\n            data-pc-group-section=\"navigator\"\n        >\n            <component :is=\"templates.previcon || 'ChevronLeftIcon'\" aria-hidden=\"true\" v-bind=\"ptm('prevIcon')\" />\n        </button>\n        <div ref=\"content\" :class=\"cx('content')\" @scroll=\"onScroll\" :data-p=\"dataP\" v-bind=\"ptm('content')\">\n            <div ref=\"tabs\" :class=\"cx('tabList')\" role=\"tablist\" :aria-orientation=\"$pcTabs.orientation || 'horizontal'\" v-bind=\"ptm('tabList')\">\n                <slot></slot>\n                <span ref=\"inkbar\" :class=\"cx('activeBar')\" role=\"presentation\" aria-hidden=\"true\" v-bind=\"ptm('activeBar')\"></span>\n            </div>\n        </div>\n        <button\n            v-if=\"showNavigators && isNextButtonEnabled\"\n            ref=\"nextButton\"\n            type=\"button\"\n            v-ripple\n            :class=\"cx('nextButton')\"\n            :aria-label=\"nextButtonAriaLabel\"\n            :tabindex=\"$pcTabs.tabindex\"\n            @click=\"onNextButtonClick\"\n            v-bind=\"ptm('nextButton')\"\n            data-pc-group-section=\"navigator\"\n        >\n            <component :is=\"templates.nexticon || 'ChevronRightIcon'\" aria-hidden=\"true\" v-bind=\"ptm('nextIcon')\" />\n        </button>\n    </div>\n</template>\n\n<script>\nimport { cn } from '@primeuix/utils';\nimport { findSingle, getHeight, getOffset, getOuterHeight, getOuterWidth, getWidth, isRTL } from '@primeuix/utils/dom';\nimport ChevronLeftIcon from '@primevue/icons/chevronleft';\nimport ChevronRightIcon from '@primevue/icons/chevronright';\nimport Ripple from 'primevue/ripple';\nimport BaseTabList from './BaseTabList.vue';\n\nexport default {\n    name: 'TabList',\n    extends: BaseTabList,\n    inheritAttrs: false,\n    inject: ['$pcTabs'],\n    data() {\n        return {\n            isPrevButtonEnabled: false,\n            isNextButtonEnabled: true\n        };\n    },\n    resizeObserver: undefined,\n    watch: {\n        showNavigators(newValue) {\n            newValue ? this.bindResizeObserver() : this.unbindResizeObserver();\n        },\n        activeValue: {\n            flush: 'post',\n            handler() {\n                this.updateInkBar();\n            }\n        }\n    },\n    mounted() {\n        setTimeout(() => {\n            this.updateInkBar();\n        }, 150);\n\n        if (this.showNavigators) {\n            this.updateButtonState();\n            this.bindResizeObserver();\n        }\n    },\n    updated() {\n        this.showNavigators && this.updateButtonState();\n    },\n    beforeUnmount() {\n        this.unbindResizeObserver();\n    },\n    methods: {\n        onScroll(event) {\n            this.showNavigators && this.updateButtonState();\n\n            event.preventDefault();\n        },\n        onPrevButtonClick() {\n            const content = this.$refs.content;\n            const buttonWidths = this.getVisibleButtonWidths();\n            const width = getWidth(content) - buttonWidths;\n            const currentScrollLeft = Math.abs(content.scrollLeft);\n            const scrollStep = width * 0.8;\n            const targetScrollLeft = currentScrollLeft - scrollStep;\n            const scrollLeft = Math.max(targetScrollLeft, 0);\n\n            content.scrollLeft = isRTL(content) ? -1 * scrollLeft : scrollLeft;\n        },\n        onNextButtonClick() {\n            const content = this.$refs.content;\n            const buttonWidths = this.getVisibleButtonWidths();\n            const width = getWidth(content) - buttonWidths;\n            const currentScrollLeft = Math.abs(content.scrollLeft);\n            const scrollStep = width * 0.8;\n            const targetScrollLeft = currentScrollLeft + scrollStep;\n            const maxScrollLeft = content.scrollWidth - width;\n            const scrollLeft = Math.min(targetScrollLeft, maxScrollLeft);\n\n            content.scrollLeft = isRTL(content) ? -1 * scrollLeft : scrollLeft;\n        },\n        bindResizeObserver() {\n            this.resizeObserver = new ResizeObserver(() => this.updateButtonState());\n            this.resizeObserver.observe(this.$refs.list);\n        },\n        unbindResizeObserver() {\n            this.resizeObserver?.unobserve(this.$refs.list);\n            this.resizeObserver = undefined;\n        },\n        updateInkBar() {\n            const { content, inkbar, tabs } = this.$refs;\n\n            if (!inkbar) return;\n\n            const activeTab = findSingle(content, '[data-pc-name=\"tab\"][data-p-active=\"true\"]');\n\n            if (this.$pcTabs.isVertical()) {\n                inkbar.style.height = getOuterHeight(activeTab) + 'px';\n                inkbar.style.top = getOffset(activeTab).top - getOffset(tabs).top + 'px';\n            } else {\n                inkbar.style.width = getOuterWidth(activeTab) + 'px';\n                inkbar.style.left = getOffset(activeTab).left - getOffset(tabs).left + 'px';\n            }\n        },\n        updateButtonState() {\n            const { list, content } = this.$refs;\n            const { scrollTop, scrollWidth, scrollHeight, offsetWidth, offsetHeight } = content;\n            const scrollLeft = Math.abs(content.scrollLeft);\n            const [width, height] = [getWidth(content), getHeight(content)];\n\n            if (this.$pcTabs.isVertical()) {\n                this.isPrevButtonEnabled = scrollTop !== 0;\n                this.isNextButtonEnabled = list.offsetHeight >= offsetHeight && parseInt(scrollTop) !== scrollHeight - height;\n            } else {\n                this.isPrevButtonEnabled = scrollLeft !== 0;\n                this.isNextButtonEnabled = list.offsetWidth >= offsetWidth && parseInt(scrollLeft) !== scrollWidth - width;\n            }\n        },\n        getVisibleButtonWidths() {\n            const { prevButton, nextButton } = this.$refs;\n            let width = 0;\n\n            if (this.showNavigators) {\n                width = (prevButton?.offsetWidth || 0) + (nextButton?.offsetWidth || 0);\n            }\n\n            return width;\n        }\n    },\n    computed: {\n        templates() {\n            return this.$pcTabs.$slots;\n        },\n        activeValue() {\n            return this.$pcTabs.d_value;\n        },\n        showNavigators() {\n            return this.$pcTabs.showNavigators;\n        },\n        prevButtonAriaLabel() {\n            return this.$primevue.config.locale.aria ? this.$primevue.config.locale.aria.previous : undefined;\n        },\n        nextButtonAriaLabel() {\n            return this.$primevue.config.locale.aria ? this.$primevue.config.locale.aria.next : undefined;\n        },\n        dataP() {\n            return cn({\n                scrollable: this.$pcTabs.scrollable\n            });\n        }\n    },\n    components: {\n        ChevronLeftIcon,\n        ChevronRightIcon\n    },\n    directives: {\n        ripple: Ripple\n    }\n};\n</script>\n", "<template>\n    <div ref=\"list\" :class=\"cx('root')\" :data-p=\"dataP\" v-bind=\"ptmi('root')\">\n        <button\n            v-if=\"showNavigators && isPrevButtonEnabled\"\n            ref=\"prevButton\"\n            type=\"button\"\n            v-ripple\n            :class=\"cx('prevButton')\"\n            :aria-label=\"prevButtonAriaLabel\"\n            :tabindex=\"$pcTabs.tabindex\"\n            @click=\"onPrevButtonClick\"\n            v-bind=\"ptm('prevButton')\"\n            data-pc-group-section=\"navigator\"\n        >\n            <component :is=\"templates.previcon || 'ChevronLeftIcon'\" aria-hidden=\"true\" v-bind=\"ptm('prevIcon')\" />\n        </button>\n        <div ref=\"content\" :class=\"cx('content')\" @scroll=\"onScroll\" :data-p=\"dataP\" v-bind=\"ptm('content')\">\n            <div ref=\"tabs\" :class=\"cx('tabList')\" role=\"tablist\" :aria-orientation=\"$pcTabs.orientation || 'horizontal'\" v-bind=\"ptm('tabList')\">\n                <slot></slot>\n                <span ref=\"inkbar\" :class=\"cx('activeBar')\" role=\"presentation\" aria-hidden=\"true\" v-bind=\"ptm('activeBar')\"></span>\n            </div>\n        </div>\n        <button\n            v-if=\"showNavigators && isNextButtonEnabled\"\n            ref=\"nextButton\"\n            type=\"button\"\n            v-ripple\n            :class=\"cx('nextButton')\"\n            :aria-label=\"nextButtonAriaLabel\"\n            :tabindex=\"$pcTabs.tabindex\"\n            @click=\"onNextButtonClick\"\n            v-bind=\"ptm('nextButton')\"\n            data-pc-group-section=\"navigator\"\n        >\n            <component :is=\"templates.nexticon || 'ChevronRightIcon'\" aria-hidden=\"true\" v-bind=\"ptm('nextIcon')\" />\n        </button>\n    </div>\n</template>\n\n<script>\nimport { cn } from '@primeuix/utils';\nimport { findSingle, getHeight, getOffset, getOuterHeight, getOuterWidth, getWidth, isRTL } from '@primeuix/utils/dom';\nimport ChevronLeftIcon from '@primevue/icons/chevronleft';\nimport ChevronRightIcon from '@primevue/icons/chevronright';\nimport Ripple from 'primevue/ripple';\nimport BaseTabList from './BaseTabList.vue';\n\nexport default {\n    name: 'TabList',\n    extends: BaseTabList,\n    inheritAttrs: false,\n    inject: ['$pcTabs'],\n    data() {\n        return {\n            isPrevButtonEnabled: false,\n            isNextButtonEnabled: true\n        };\n    },\n    resizeObserver: undefined,\n    watch: {\n        showNavigators(newValue) {\n            newValue ? this.bindResizeObserver() : this.unbindResizeObserver();\n        },\n        activeValue: {\n            flush: 'post',\n            handler() {\n                this.updateInkBar();\n            }\n        }\n    },\n    mounted() {\n        setTimeout(() => {\n            this.updateInkBar();\n        }, 150);\n\n        if (this.showNavigators) {\n            this.updateButtonState();\n            this.bindResizeObserver();\n        }\n    },\n    updated() {\n        this.showNavigators && this.updateButtonState();\n    },\n    beforeUnmount() {\n        this.unbindResizeObserver();\n    },\n    methods: {\n        onScroll(event) {\n            this.showNavigators && this.updateButtonState();\n\n            event.preventDefault();\n        },\n        onPrevButtonClick() {\n            const content = this.$refs.content;\n            const buttonWidths = this.getVisibleButtonWidths();\n            const width = getWidth(content) - buttonWidths;\n            const currentScrollLeft = Math.abs(content.scrollLeft);\n            const scrollStep = width * 0.8;\n            const targetScrollLeft = currentScrollLeft - scrollStep;\n            const scrollLeft = Math.max(targetScrollLeft, 0);\n\n            content.scrollLeft = isRTL(content) ? -1 * scrollLeft : scrollLeft;\n        },\n        onNextButtonClick() {\n            const content = this.$refs.content;\n            const buttonWidths = this.getVisibleButtonWidths();\n            const width = getWidth(content) - buttonWidths;\n            const currentScrollLeft = Math.abs(content.scrollLeft);\n            const scrollStep = width * 0.8;\n            const targetScrollLeft = currentScrollLeft + scrollStep;\n            const maxScrollLeft = content.scrollWidth - width;\n            const scrollLeft = Math.min(targetScrollLeft, maxScrollLeft);\n\n            content.scrollLeft = isRTL(content) ? -1 * scrollLeft : scrollLeft;\n        },\n        bindResizeObserver() {\n            this.resizeObserver = new ResizeObserver(() => this.updateButtonState());\n            this.resizeObserver.observe(this.$refs.list);\n        },\n        unbindResizeObserver() {\n            this.resizeObserver?.unobserve(this.$refs.list);\n            this.resizeObserver = undefined;\n        },\n        updateInkBar() {\n            const { content, inkbar, tabs } = this.$refs;\n\n            if (!inkbar) return;\n\n            const activeTab = findSingle(content, '[data-pc-name=\"tab\"][data-p-active=\"true\"]');\n\n            if (this.$pcTabs.isVertical()) {\n                inkbar.style.height = getOuterHeight(activeTab) + 'px';\n                inkbar.style.top = getOffset(activeTab).top - getOffset(tabs).top + 'px';\n            } else {\n                inkbar.style.width = getOuterWidth(activeTab) + 'px';\n                inkbar.style.left = getOffset(activeTab).left - getOffset(tabs).left + 'px';\n            }\n        },\n        updateButtonState() {\n            const { list, content } = this.$refs;\n            const { scrollTop, scrollWidth, scrollHeight, offsetWidth, offsetHeight } = content;\n            const scrollLeft = Math.abs(content.scrollLeft);\n            const [width, height] = [getWidth(content), getHeight(content)];\n\n            if (this.$pcTabs.isVertical()) {\n                this.isPrevButtonEnabled = scrollTop !== 0;\n                this.isNextButtonEnabled = list.offsetHeight >= offsetHeight && parseInt(scrollTop) !== scrollHeight - height;\n            } else {\n                this.isPrevButtonEnabled = scrollLeft !== 0;\n                this.isNextButtonEnabled = list.offsetWidth >= offsetWidth && parseInt(scrollLeft) !== scrollWidth - width;\n            }\n        },\n        getVisibleButtonWidths() {\n            const { prevButton, nextButton } = this.$refs;\n            let width = 0;\n\n            if (this.showNavigators) {\n                width = (prevButton?.offsetWidth || 0) + (nextButton?.offsetWidth || 0);\n            }\n\n            return width;\n        }\n    },\n    computed: {\n        templates() {\n            return this.$pcTabs.$slots;\n        },\n        activeValue() {\n            return this.$pcTabs.d_value;\n        },\n        showNavigators() {\n            return this.$pcTabs.showNavigators;\n        },\n        prevButtonAriaLabel() {\n            return this.$primevue.config.locale.aria ? this.$primevue.config.locale.aria.previous : undefined;\n        },\n        nextButtonAriaLabel() {\n            return this.$primevue.config.locale.aria ? this.$primevue.config.locale.aria.next : undefined;\n        },\n        dataP() {\n            return cn({\n                scrollable: this.$pcTabs.scrollable\n            });\n        }\n    },\n    components: {\n        ChevronLeftIcon,\n        ChevronRightIcon\n    },\n    directives: {\n        ripple: Ripple\n    }\n};\n</script>\n"],
  "mappings": "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",
  "names": ["classes", "root", "content", "tabList", "activeBar", "prevButton", "nextButton", "BaseStyle", "extend", "name", "name", "BaseComponent", "props", "style", "TabListStyle", "provide", "$pcTabList", "$parentInstance", "script", "BaseTabList", "inheritAttrs", "inject", "data", "isPrevButtonEnabled", "isNextButtonEnabled", "resizeObserver", "undefined", "watch", "showNavigators", "newValue", "bindResizeObserver", "unbindResizeObserver", "activeValue", "flush", "handler", "updateInkBar", "mounted", "_this", "setTimeout", "updateButtonState", "updated", "beforeUnmount", "methods", "onScroll", "event", "preventDefault", "onPrevButtonClick", "content", "$refs", "buttonWidths", "getVisibleButtonWidths", "width", "getWidth", "currentScrollLeft", "Math", "abs", "scrollLeft", "scrollStep", "targetScrollLeft", "max", "isRTL", "onNextButtonClick", "maxScrollLeft", "scrollWidth", "min", "_this2", "ResizeObserver", "observe", "list", "_this$resizeObserver", "unobserve", "_this$$refs", "inkbar", "tabs", "activeTab", "findSingle", "$pcTabs", "isVertical", "height", "getOuterHeight", "top", "getOffset", "getOuterWidth", "left", "_this$$refs2", "scrollTop", "scrollHeight", "offsetWidth", "offsetHeight", "_ref", "getHeight", "parseInt", "_this$$refs3", "prevButton", "nextButton", "computed", "templates", "$slots", "d_value", "prevButtonAriaLabel", "$primevue", "config", "locale", "aria", "previous", "nextButtonAriaLabel", "next", "dataP", "cn", "scrollable", "components", "ChevronLeftIcon", "ChevronRightIcon", "directives", "ripple", "Ripple", "_openBlock", "_createElementBlock", "_mergeProps", "ref", "_ctx", "cx", "$options", "ptmi", "$data", "_withDirectives", "type", "tabindex", "onClick", "apply", "arguments", "ptm", "_createBlock", "_resolveDynamicComponent", "previcon", "_createElementVNode", "role", "orientation", "_renderSlot", "nexticon"]
}
