{"version":3,"mappings":";sqBAqBA,MAAMA,GAA2B,IAAsE,CACrG,MAAMC,EAAYC,EAAA,EACZC,EAAcC,GAAA,EAEpB,OAAOC,GAAY,CACjB,YAAaC,EACb,WAAY,MAAOC,GAA2C,CAC5D,MAAMC,EAAcC,EAAQF,EAAK,WAAW,EACtCG,EAAiBD,EAAQF,EAAK,cAAc,EAC5CI,EAAgBF,EAAQF,EAAK,aAAa,GAAK,GAErD,MAAMN,EAAU,YAAY,oBAAoBO,EAAaE,EAAgBC,CAAa,CAC5F,EACA,UAAW,IAAY,CACrBR,EAAY,kBAAkB,CAAE,SAAU,CAACS,CAAmB,EAAG,CACnE,EACD,CACH,ECjCaC,EAAgB,CAC3B,IAAK,MACL,OAAQ,SACR,UAAW,WAeb,6FCaA,MAAMC,EAAkBC,EAAqB,IAAKC,EAAA,IAAC,OAAO,+BAA6B,6HAAC,EAClFC,EAAoBF,EAAqB,IAAKC,EAAA,IAAC,OAAO,iCAA+B,sGAAC,EACtFE,EAAeH,EAAqB,IAAKC,EAAA,IAAC,OAAO,4BAA+B,4DAAC,EAEjFf,EAAYC,EAAY,EACxB,CAAE,YAAAiB,EAAa,YAAAC,GAAgBC,EAAYpB,CAAS,EAEpDqB,EAASC,EAAS,EAClBC,EAAOC,EAAO,EAEd,CAAE,YAAaC,CAAmB,EAAK1B,GAAwB,EAEjEoB,EAAY,QACd,QAAQ,IAAI,6CAA6C,EACzDE,EAAO,QAAQ,CAAE,KAAMK,EAAW,GAAG,CAAE,GAGzC,MAAMC,EAAYC,EAAY,EACxB,CAAE,eAAAC,CAAc,EAAKT,EAAYO,CAAS,EAE1CG,EAAcC,EAAI,EAAK,EAC7B,IAAIC,EACJ,MAAMC,EAAO,IAAM,CACbD,GAAaA,EAAW,EAC5BF,EAAY,MAAQ,EACtB,EAEAE,EAAchC,EAAU,WAAW,MAAOkC,EAAUC,IAAU,QACxDC,EAAAD,EAAM,cAAN,MAAAC,EAAmB,YAAYH,EAAI,CACzC,CAAC,EAED,KAAM,CAAE,UAAWI,EAAmB,KAAMC,CAAQ,EAAKC,GAAiB,KAAM,CAC9E,QAAST,CACX,CAAC,EAEK,CAAE,UAAWU,EAAiB,KAAMC,CAAU,EAAKC,EAAmB,CAC1E,QAASZ,CACX,CAAC,EAEK,CAAE,QAAAa,EAAS,aAAAC,EAAc,cAAAC,CAAa,EAAKC,EAAYL,CAAU,EAEjEM,EAAcC,EAAS,IAAML,EAAQ,OAASC,EAAa,KAAK,EAChEK,EAAYD,EAAS,IAIlB,CAAClB,EAAY,OAASO,EAAkB,OAASG,EAAgB,OAAS,CAACF,EAAS,OAAS,CAACG,EAAW,KACjH,EAEKS,EAAcnB,EAAI,EAAK,EACvBxB,EAAcyC,EAAS,IACvBD,EAAY,MACPnC,EAAc,IAEdW,EAAK,OAAO,MAAM,SAAS,IAAI,EAAIX,EAAc,UAAYA,EAAc,MAErF,EAEKuC,EAAcpB,EAAI,EAAE,EACpBtB,EAAiBsB,EAAI,EAAE,EAE7B,eAAeqB,GAAgB,CAC7B,MAAM3B,EAAoB,CAAE,YAAAlB,EAAa,eAAAE,EAAgB,CAC3D,CAEA,eAAe4C,GAAe,CAsB9B,CAQA,OAAAC,GACE,CAAChB,EAAUS,CAAW,EACtB,MAAO,CAACQ,EAAiBC,CAAqB,IAAM,CAC9C,CAACC,GAASF,CAAe,GAAKC,GAChC,MAAMH,EAAY,CAEtB,EACA,CAAE,UAAW,EAAI,CACnB,EAEAK,GAAU,SAAY,OAChB7B,EAAe,QACjBA,EAAe,MAAQ,GACvBR,EAAO,GAAG,CAAC,IAETe,EAAAlB,EAAY,QAAZ,MAAAkB,EAAmB,YAAYH,EAAI,CACzC,CAAC,yBAlJYgB,EAAA,WAAXU,EAIM,MAAAC,GAAA,CAHJC,GAEM,MAFNC,GAEM,CADJC,GAA6BC,GAAA,CAAb,aAAU,aAI9BL,EAGM,MAAAM,GAAA,CAFmBC,EAAArB,CAAA,OAAvBsB,EAAwCD,EAAArD,CAAA,YACVkC,EAAA,WAA9BoB,EAA6CD,EAAAlD,CAAA,yBAItCiC,EAAA,OAAaC,EAAA,OAAeH,EAAA,WADrCoB,EAKED,EAAAjD,CAAA,SAHC,eAAckC,EAAA,MACd,eAAc5C,EAAA,MACd,aAAY6C","names":["useUpdateConsentMutation","authStore","useAuthStore","queryClient","useQueryClient","useMutation","CONSENT_UPDATE_MUTATION_KEY","data","consentType","toValue","consentVersion","consentParams","USER_DATA_QUERY_KEY","CONSENT_TYPES","HomeParticipant","defineAsyncComponent","__vitePreload","HomeAdministrator","ConsentModal","roarfirekit","ssoProvider","storeToRefs","router","useRouter","i18n","useI18n","updateConsentStatus","APP_ROUTES","gameStore","useGameStore","requireRefresh","initialized","ref","unsubscribe","init","mutation","state","_a","isLoadingUserData","userData","useUserDataQuery","isLoadingClaims","userClaims","useUserClaimsQuery","isAdmin","isSuperAdmin","isParticipant","useUserType","isAdminUser","computed","isLoading","showConsent","confirmText","updateConsent","checkConsent","watch","updatedUserData","updatedAdminUserState","_isEmpty","onMounted","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_createVNode","LevanteSpinner","_hoisted_3","_unref","_createBlock"],"ignoreList":[],"sources":["../../src/composables/mutations/useUpdateConsentMutation.ts","../../src/constants/consentTypes.ts","../../src/pages/HomeSelector.vue"],"sourcesContent":["import { toValue } from 'vue';\nimport type { MaybeRefOrGetter } from 'vue';\nimport { useMutation, useQueryClient } from '@tanstack/vue-query';\nimport type { UseMutationReturnType } from '@tanstack/vue-query';\nimport { useAuthStore } from '@/store/auth';\nimport { CONSENT_UPDATE_MUTATION_KEY } from '@/constants/mutationKeys';\nimport { USER_DATA_QUERY_KEY } from '@/constants/queryKeys';\n\ninterface ConsentUpdateData {\n  consentType: MaybeRefOrGetter<string>;\n  consentVersion: MaybeRefOrGetter<string>;\n  consentParams?: MaybeRefOrGetter<Record<string, any>>;\n}\n\n/**\n * Consent Update mutation.\n *\n * TanStack mutation to update consent status and automatically invalidate the corresponding queries.\n *\n * @returns The mutation object returned by `useMutation`.\n */\nconst useUpdateConsentMutation = (): UseMutationReturnType<void, Error, ConsentUpdateData, unknown> => {\n  const authStore = useAuthStore();\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationKey: CONSENT_UPDATE_MUTATION_KEY,\n    mutationFn: async (data: ConsentUpdateData): Promise<void> => {\n      const consentType = toValue(data.consentType);\n      const consentVersion = toValue(data.consentVersion);\n      const consentParams = toValue(data.consentParams) || {};\n\n      await authStore.roarfirekit.updateConsentStatus(consentType, consentVersion, consentParams);\n    },\n    onSuccess: (): void => {\n      queryClient.invalidateQueries({ queryKey: [USER_DATA_QUERY_KEY] });\n    },\n  });\n};\n\nexport default useUpdateConsentMutation;\n","/**\n * Consent types\n *\n * @constant {Object} CONSENT_TYPES â€“ The types of consent.\n */\nexport const CONSENT_TYPES = {\n  TOS: 'tos',\n  ASSENT: 'assent',\n  ASSENT_ES: 'assent-es',\n  ASSENT_BEHAVIORAL_EYE_TRACKING_ES: 'assent-behaivoral-eye-tracking-es',\n  ASSENT_BEHAVIORAL_EYE_TRACKING: 'assent-behavioral-eye-tracking',\n  ASSENT_CLINIC_ADOBE: 'assent-clinic-adobe',\n  ASSENT_VIDEO_AUDIO_EYE_TRACKING: 'assent-video-audio-eye-tracking',\n  ASSENT_VIDEO_AUDIO_EYE_TRACKING_ES: 'assent-video-audio-eye-tracking-es',\n  ASSENT_VIDEO_AUDIO_RECORDING: 'assent-video-audio-recording',\n  ASSENT_VIDEO_AUDIO_RECORDING_ES: 'assent-video-audio-recording-es',\n  CONSENT_BEHAVIORAL_EYE_TRACKING_ES: 'consent-behaivoral-eye-tracking-es',\n  CONSENT_BEHAVIORAL_EYE_TRACKING: 'consent-behavioral-eye-tracking',\n  CONSENT_CLINIC_ADOBE: 'consent-clinic-adobe',\n  CONSENT_VIDEO_AUDIO_EYE_TRACKING: 'consent-video-audio-eye-tracking',\n  CONSENT_VIDEO_AUDIO_EYE_TRACKING_ES: 'consent-video-audio-eye-tracking-es',\n  CONSENT_VIDEO_AUDIO_RECORDING: 'consent-video-audio-recording',\n  CONSENT_VIDEO_AUDIO_RECORDING_ES: 'consent-video-audio-recording-es',\n} as const;\n","<template>\n  <div v-if=\"isLoading\">\n    <div class=\"text-center col-full\">\n      <LevanteSpinner fullscreen />\n    </div>\n  </div>\n\n  <div v-else>\n    <HomeParticipant v-if=\"isParticipant\" />\n    <HomeAdministrator v-else-if=\"isAdminUser\" />\n  </div>\n\n  <ConsentModal\n    v-if=\"!isLoading && showConsent && isAdminUser\"\n    :consent-text=\"confirmText\"\n    :consent-type=\"consentType\"\n    :on-confirm=\"updateConsent\"\n  />\n</template>\n\n<script setup>\nimport { computed, defineAsyncComponent, onMounted, ref, watch } from 'vue';\nimport { useRouter } from 'vue-router';\nimport { useI18n } from 'vue-i18n';\nimport { storeToRefs } from 'pinia';\nimport _isEmpty from 'lodash/isEmpty';\nimport { useAuthStore } from '@/store/auth';\nimport { useGameStore } from '@/store/game';\nimport useUserType from '@/composables/useUserType';\nimport useUserDataQuery from '@/composables/queries/useUserDataQuery';\nimport useUserClaimsQuery from '@/composables/queries/useUserClaimsQuery';\nimport useUpdateConsentMutation from '@/composables/mutations/useUpdateConsentMutation';\nimport { CONSENT_TYPES } from '@/constants/consentTypes';\nimport { APP_ROUTES } from '@/constants/routes';\nimport { isLevante } from '@/helpers';\nimport LevanteSpinner from '@/components/LevanteSpinner.vue';\nconst HomeParticipant = defineAsyncComponent(() => import('@/pages/HomeParticipant.vue'));\nconst HomeAdministrator = defineAsyncComponent(() => import('@/pages/HomeAdministrator.vue'));\nconst ConsentModal = defineAsyncComponent(() => import('@/components/ConsentModal.vue'));\n\nconst authStore = useAuthStore();\nconst { roarfirekit, ssoProvider } = storeToRefs(authStore);\n\nconst router = useRouter();\nconst i18n = useI18n();\n\nconst { mutateAsync: updateConsentStatus } = useUpdateConsentMutation();\n\nif (ssoProvider.value) {\n  console.log('Detected SSO authentication, redirecting...');\n  router.replace({ path: APP_ROUTES.SSO });\n}\n\nconst gameStore = useGameStore();\nconst { requireRefresh } = storeToRefs(gameStore);\n\nconst initialized = ref(false);\nlet unsubscribe;\nconst init = () => {\n  if (unsubscribe) unsubscribe();\n  initialized.value = true;\n};\n\nunsubscribe = authStore.$subscribe(async (mutation, state) => {\n  if (state.roarfirekit?.restConfig) init();\n});\n\nconst { isLoading: isLoadingUserData, data: userData } = useUserDataQuery(null, {\n  enabled: initialized,\n});\n\nconst { isLoading: isLoadingClaims, data: userClaims } = useUserClaimsQuery({\n  enabled: initialized,\n});\n\nconst { isAdmin, isSuperAdmin, isParticipant } = useUserType(userClaims);\n\nconst isAdminUser = computed(() => isAdmin.value || isSuperAdmin.value);\nconst isLoading = computed(() => {\n  // @NOTE: In addition to the loading states, we also check if user data and user claims are loaded as due to the\n  // current application initialization flow, the userData and userClaims queries initially reset. Once this is improved\n  // these additional checks can be removed.\n  return !initialized.value || isLoadingUserData.value || isLoadingClaims.value || !userData.value || !userClaims.value;\n});\n\nconst showConsent = ref(false);\nconst consentType = computed(() => {\n  if (isAdminUser.value) {\n    return CONSENT_TYPES.TOS;\n  } else {\n    return i18n.locale.value.includes('es') ? CONSENT_TYPES.ASSENT_ES : CONSENT_TYPES.ASSENT;\n  }\n});\n\nconst confirmText = ref('');\nconst consentVersion = ref('');\n\nasync function updateConsent() {\n  await updateConsentStatus({ consentType, consentVersion });\n}\n\nasync function checkConsent() {\n  if (isLevante || !isAdminUser.value) return;\n\n  const consentStatus = userData.value?.legal?.[consentType.value];\n  const consentDoc = await authStore.getLegalDoc(consentType.value);\n\n  consentVersion.value = consentDoc.version;\n\n  if (!consentStatus?.[consentDoc.version]) {\n    confirmText.value = consentDoc.text;\n    showConsent.value = true;\n    return;\n  }\n\n  const legalDocs = consentStatus?.[consentDoc.version] || [];\n  if (!Array.isArray(legalDocs)) return;\n  const signedBeforeAugFirst = legalDocs.some((doc) => isSignedBeforeAugustFirst(doc.dateSigned));\n\n  if (signedBeforeAugFirst) {\n    confirmText.value = consentDoc.text;\n    showConsent.value = true;\n  }\n}\n\nfunction isSignedBeforeAugustFirst(signedDate) {\n  const currentDate = new Date();\n  const augustFirstThisYear = new Date(currentDate.getFullYear(), 7, 1); // August 1st of the current year\n  return new Date(signedDate) < augustFirstThisYear;\n}\n\nwatch(\n  [userData, isAdminUser],\n  async ([updatedUserData, updatedAdminUserState]) => {\n    if (!_isEmpty(updatedUserData) && updatedAdminUserState) {\n      await checkConsent();\n    }\n  },\n  { immediate: true },\n);\n\nonMounted(async () => {\n  if (requireRefresh.value) {\n    requireRefresh.value = false;\n    router.go(0);\n  }\n  if (roarfirekit.value?.restConfig) init();\n});\n</script>\n"],"file":"assets/HomeSelector-d44zKX5b.js"}