{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["import { JsPsych, JsPsychPlugin, ParameterType, TrialType } from \"jspsych\";\n\nconst info = <const>{\n  name: \"corsi-blocks\",\n  parameters: {\n    /**\n     * An array of block indexes that specify the order of the sequence to be displayed. For example,\n     * [0, 1, 2, 3, 4] would display the first 5 blocks in the order they appear in the blocks parameter.\n     */\n    sequence: {\n      type: ParameterType.INT,\n      default: undefined,\n      array: true,\n    },\n    /**\n     * An array of objects that specify the x and y coordinates of each block. The coordinates represent the center\n     * of the block. The coordinates are specified as percentages of the width and height of the display. For example,\n     * {x: 50, y: 50} would place the block in the center of the display.\n     *\n     * The default value is an array of nine blocks that approximates the layout of the original Corsi blocks task.\n     */\n    blocks: {\n      type: ParameterType.COMPLEX,\n      array: true,\n      default: [\n        { y: 80, x: 45 },\n        { y: 94, x: 80 },\n        { y: 70, x: 20 },\n        { y: 60, x: 70 },\n        { y: 50, x: 35 },\n        { y: 40, x: 6 },\n        { y: 45, x: 94 },\n        { y: 25, x: 60 },\n        { y: 6, x: 47 },\n      ],\n      nested: {\n        x: {\n          type: ParameterType.INT,\n          default: undefined,\n        },\n        y: {\n          type: ParameterType.INT,\n          default: undefined,\n        },\n      },\n    },\n    /**\n     * The size of the blocks as a percentage of the overall display size.\n     */\n    block_size: {\n      type: ParameterType.INT,\n      default: 12,\n    },\n    /**\n     * The width of the display, specified as a valid CSS measurement.\n     */\n    display_width: {\n      type: ParameterType.STRING,\n      default: \"400px\",\n    },\n    /**\n     * The height of the display, specified as a valid CSS measurement.\n     */\n    display_height: {\n      type: ParameterType.STRING,\n      default: \"400px\",\n    },\n    /**\n     * An optional text prompt that can be shown below the display area.\n     */\n    prompt: {\n      type: ParameterType.STRING,\n      default: null,\n    },\n    /**\n     * The mode of the trial. If 'display', then the sequence is displayed and the trial ends after\n     * the sequence is complete. If 'input', then the use must click on the blocks in the correct order.\n     */\n    mode: {\n      type: ParameterType.STRING,\n      default: \"display\",\n      options: [\"display\", \"input\"],\n    },\n    /**\n     * The duration, in milliseconds, between each block in the sequence.\n     */\n    sequence_gap_duration: {\n      type: ParameterType.INT,\n      default: 250,\n    },\n    /**\n     * The duration, in milliseconds, that each block is displayed during the sequence.\n     */\n    sequence_block_duration: {\n      type: ParameterType.INT,\n      default: 1000,\n    },\n    /**\n     * The duration, in milliseconds, to show the blocks before the sequence begins.\n     */\n    pre_stim_duration: {\n      type: ParameterType.INT,\n      default: 500,\n    },\n    /**\n     * The duration, in milliseconds, to show the feedback response animation\n     * during input mode.\n     */\n    response_animation_duration: {\n      type: ParameterType.INT,\n      default: 500,\n    },\n    /**\n     * The color of unselected, unhighlighted blocks.\n     */\n    block_color: {\n      type: ParameterType.STRING,\n      default: \"#555\",\n    },\n    /**\n     * The color of the highlighted block.\n     */\n    highlight_color: {\n      type: ParameterType.STRING,\n      default: \"#ff0000\",\n    },\n    /**\n     * The color of correct feedback.\n     */\n    correct_color: {\n      type: ParameterType.STRING,\n      default: \"#00ff00\",\n    },\n    /**\n     * The color of incorrect feedback.\n     */\n    incorrect_color: {\n      type: ParameterType.STRING,\n      default: \"#ff0000\",\n    },\n  },\n};\n\ntype Info = typeof info;\n\n/**\n * **corsi-blocks**\n *\n * This plugin displays a sequence of blocks and then gets the\n * subject's response. The sequence can be displayed in either\n * 'display' mode or 'input' mode. In 'display' mode, the\n * sequence is displayed and the trial ends after the sequence\n * is complete. In 'input' mode, the subject must click on the\n * blocks in the correct order.\n *\n * @author Josh de Leeuw\n * @see {@link https://DOCUMENTATION_URL DOCUMENTATION LINK TEXT}\n */\nclass CorsiBlocksPlugin implements JsPsychPlugin<Info> {\n  static info = info;\n\n  constructor(private jsPsych: JsPsych) {}\n\n  trial(display_element: HTMLElement, trial: TrialType<Info>) {\n    let css = `<style id=\"jspsych-corsi-css\">\n      #jspsych-corsi-stimulus { \n        position: relative; \n        width:${trial.display_width}; \n        height:${trial.display_height};\n      }\n      .jspsych-corsi-block { \n        background-color: ${trial.block_color}; \n        position: absolute; \n        width: ${trial.block_size}%; \n        height: ${trial.block_size}%;\n        transform: translate(-50%, -50%);\n      }\n      #jspsych-corsi-prompt { \n        position: absolute; \n        text-align: center; \n        width: ${trial.display_width}; \n        top: 100%; \n      }\n      #jspsych-corsi-prompt p { \n        font-size: 18px; \n      }\n      ${trial.mode == \"input\" ? \".jspsych-corsi-block { cursor: pointer; }\" : \"\"}\n    </style>`;\n\n    let html = css;\n    html += '<div id=\"jspsych-corsi-stimulus\">';\n\n    for (let i = 0; i < trial.blocks.length; i++) {\n      html += `<div class=\"jspsych-corsi-block\" data-id=\"${i}\" style=\"top:${trial.blocks[i].y}%; left:${trial.blocks[i].x}%;\"></div>`;\n    }\n\n    if (trial.prompt != null) {\n      html += `<div id=\"jspsych-corsi-prompt\"><p>${trial.prompt}</p></div>`;\n    }\n    html += \"</div>\";\n\n    display_element.innerHTML = html;\n\n    const start_time = performance.now();\n\n    const trial_data = {\n      sequence: trial.sequence,\n      response: [],\n      rt: [],\n      blocks: trial.blocks,\n      correct: null,\n    };\n\n    const end_trial = () => {\n      display_element.innerHTML = \"\";\n      this.jsPsych.finishTrial(trial_data);\n    };\n\n    const wait = function (fn, t) {\n      const start = performance.now();\n\n      const _wait_help = (fn, t, s) => {\n        const duration = performance.now() - s;\n        if (duration >= t) {\n          fn();\n        } else {\n          window.requestAnimationFrame(() => _wait_help(fn, t, start));\n        }\n      };\n      window.requestAnimationFrame(() => _wait_help(fn, t, start));\n    };\n\n    if (trial.mode == \"display\") {\n      let sequence_location = 0;\n      let display_phase = \"pre-stim\";\n\n      const update_display = () => {\n        if (display_phase == \"pre-stim\") {\n          wait(update_display, trial.pre_stim_duration);\n          display_phase = \"sequence\";\n        } else if (display_phase == \"sequence\") {\n          const block: HTMLElement = display_element.querySelector(\n            `.jspsych-corsi-block[data-id=\"${trial.sequence[sequence_location]}\"]`\n          );\n          if (sequence_location < trial.sequence.length) {\n            block.style.backgroundColor = trial.highlight_color;\n            wait(update_display, trial.sequence_block_duration);\n            display_phase = \"iti\";\n          }\n          if (sequence_location == trial.sequence.length) {\n            end_trial();\n          }\n        } else if (display_phase == \"iti\") {\n          const block: HTMLElement = display_element.querySelector(\n            `.jspsych-corsi-block[data-id=\"${trial.sequence[sequence_location]}\"]`\n          );\n          block.style.backgroundColor = trial.block_color;\n          sequence_location++;\n          wait(update_display, trial.sequence_gap_duration);\n          display_phase = \"sequence\";\n        }\n      };\n\n      window.requestAnimationFrame(update_display);\n    }\n\n    if (trial.mode == \"input\") {\n      const correct_animation = [\n        { backgroundColor: trial.block_color },\n        { backgroundColor: trial.correct_color, offset: 0.2 },\n        { backgroundColor: trial.block_color },\n      ];\n\n      const incorrect_animation = [\n        { backgroundColor: trial.block_color },\n        { backgroundColor: trial.incorrect_color, offset: 0.2 },\n        { backgroundColor: trial.block_color },\n      ];\n\n      const animation_timing = {\n        duration: trial.response_animation_duration,\n        iterations: 1,\n      };\n\n      const register_click = (id: string) => {\n        if (trial_data.correct !== null) {\n          return; // extra click during timeout, do nothing\n        }\n        const rt = Math.round(performance.now() - start_time);\n        trial_data.response.push(parseInt(id));\n        trial_data.rt.push(rt);\n        const correct = parseInt(id) == trial.sequence[trial_data.response.length - 1];\n        if (correct) {\n          display_element\n            .querySelector(`.jspsych-corsi-block[data-id=\"${id}\"]`)\n            .animate(correct_animation, animation_timing);\n          if (trial_data.response.length == trial.sequence.length) {\n            trial_data.correct = true;\n            setTimeout(end_trial, trial.response_animation_duration); // allows animation to finish\n          }\n        } else {\n          display_element\n            .querySelector(`.jspsych-corsi-block[data-id=\"${id}\"]`)\n            .animate(incorrect_animation, animation_timing);\n          trial_data.correct = false;\n          setTimeout(end_trial, trial.response_animation_duration); // allows animation to finish\n        }\n      };\n\n      var blocks = display_element.querySelectorAll(\".jspsych-corsi-block\");\n      for (var i = 0; i < blocks.length; i++) {\n        blocks[i].addEventListener(\"click\", (e) => {\n          register_click((e.target as HTMLElement).getAttribute(\"data-id\"));\n        });\n      }\n    }\n  }\n}\n\nexport default CorsiBlocksPlugin;\n"],"names":[],"mappings":";;AAEA,MAAM,IAAI,GAAU;AAClB,IAAA,IAAI,EAAE,cAAc;AACpB,IAAA,UAAU,EAAE;AACV;;;AAGG;AACH,QAAA,QAAQ,EAAE;YACR,IAAI,EAAE,aAAa,CAAC,GAAG;AACvB,YAAA,OAAO,EAAE,SAAS;AAClB,YAAA,KAAK,EAAE,IAAI;AACZ,SAAA;AACD;;;;;;AAMG;AACH,QAAA,MAAM,EAAE;YACN,IAAI,EAAE,aAAa,CAAC,OAAO;AAC3B,YAAA,KAAK,EAAE,IAAI;AACX,YAAA,OAAO,EAAE;AACP,gBAAA,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE;AAChB,gBAAA,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE;AAChB,gBAAA,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE;AAChB,gBAAA,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE;AAChB,gBAAA,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE;AAChB,gBAAA,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE;AACf,gBAAA,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE;AAChB,gBAAA,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE;AAChB,gBAAA,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE;AAChB,aAAA;AACD,YAAA,MAAM,EAAE;AACN,gBAAA,CAAC,EAAE;oBACD,IAAI,EAAE,aAAa,CAAC,GAAG;AACvB,oBAAA,OAAO,EAAE,SAAS;AACnB,iBAAA;AACD,gBAAA,CAAC,EAAE;oBACD,IAAI,EAAE,aAAa,CAAC,GAAG;AACvB,oBAAA,OAAO,EAAE,SAAS;AACnB,iBAAA;AACF,aAAA;AACF,SAAA;AACD;;AAEG;AACH,QAAA,UAAU,EAAE;YACV,IAAI,EAAE,aAAa,CAAC,GAAG;AACvB,YAAA,OAAO,EAAE,EAAE;AACZ,SAAA;AACD;;AAEG;AACH,QAAA,aAAa,EAAE;YACb,IAAI,EAAE,aAAa,CAAC,MAAM;AAC1B,YAAA,OAAO,EAAE,OAAO;AACjB,SAAA;AACD;;AAEG;AACH,QAAA,cAAc,EAAE;YACd,IAAI,EAAE,aAAa,CAAC,MAAM;AAC1B,YAAA,OAAO,EAAE,OAAO;AACjB,SAAA;AACD;;AAEG;AACH,QAAA,MAAM,EAAE;YACN,IAAI,EAAE,aAAa,CAAC,MAAM;AAC1B,YAAA,OAAO,EAAE,IAAI;AACd,SAAA;AACD;;;AAGG;AACH,QAAA,IAAI,EAAE;YACJ,IAAI,EAAE,aAAa,CAAC,MAAM;AAC1B,YAAA,OAAO,EAAE,SAAS;AAClB,YAAA,OAAO,EAAE,CAAC,SAAS,EAAE,OAAO,CAAC;AAC9B,SAAA;AACD;;AAEG;AACH,QAAA,qBAAqB,EAAE;YACrB,IAAI,EAAE,aAAa,CAAC,GAAG;AACvB,YAAA,OAAO,EAAE,GAAG;AACb,SAAA;AACD;;AAEG;AACH,QAAA,uBAAuB,EAAE;YACvB,IAAI,EAAE,aAAa,CAAC,GAAG;AACvB,YAAA,OAAO,EAAE,IAAI;AACd,SAAA;AACD;;AAEG;AACH,QAAA,iBAAiB,EAAE;YACjB,IAAI,EAAE,aAAa,CAAC,GAAG;AACvB,YAAA,OAAO,EAAE,GAAG;AACb,SAAA;AACD;;;AAGG;AACH,QAAA,2BAA2B,EAAE;YAC3B,IAAI,EAAE,aAAa,CAAC,GAAG;AACvB,YAAA,OAAO,EAAE,GAAG;AACb,SAAA;AACD;;AAEG;AACH,QAAA,WAAW,EAAE;YACX,IAAI,EAAE,aAAa,CAAC,MAAM;AAC1B,YAAA,OAAO,EAAE,MAAM;AAChB,SAAA;AACD;;AAEG;AACH,QAAA,eAAe,EAAE;YACf,IAAI,EAAE,aAAa,CAAC,MAAM;AAC1B,YAAA,OAAO,EAAE,SAAS;AACnB,SAAA;AACD;;AAEG;AACH,QAAA,aAAa,EAAE;YACb,IAAI,EAAE,aAAa,CAAC,MAAM;AAC1B,YAAA,OAAO,EAAE,SAAS;AACnB,SAAA;AACD;;AAEG;AACH,QAAA,eAAe,EAAE;YACf,IAAI,EAAE,aAAa,CAAC,MAAM;AAC1B,YAAA,OAAO,EAAE,SAAS;AACnB,SAAA;AACF,KAAA;CACF,CAAC;AAIF;;;;;;;;;;;;AAYG;AACH,MAAM,iBAAiB,CAAA;AAGrB,IAAA,WAAA,CAAoB,OAAgB,EAAA;QAAhB,IAAO,CAAA,OAAA,GAAP,OAAO,CAAS;KAAI;IAExC,KAAK,CAAC,eAA4B,EAAE,KAAsB,EAAA;AACxD,QAAA,IAAI,GAAG,GAAG,CAAA;;;AAGE,cAAA,EAAA,KAAK,CAAC,aAAa,CAAA;AAClB,eAAA,EAAA,KAAK,CAAC,cAAc,CAAA;;;AAGT,0BAAA,EAAA,KAAK,CAAC,WAAW,CAAA;;AAE5B,eAAA,EAAA,KAAK,CAAC,UAAU,CAAA;AACf,gBAAA,EAAA,KAAK,CAAC,UAAU,CAAA;;;;;;AAMjB,eAAA,EAAA,KAAK,CAAC,aAAa,CAAA;;;;;;QAM5B,KAAK,CAAC,IAAI,IAAI,OAAO,GAAG,2CAA2C,GAAG,EAAE,CAAA;aACnE,CAAC;QAEV,IAAI,IAAI,GAAG,GAAG,CAAC;QACf,IAAI,IAAI,mCAAmC,CAAC;AAE5C,QAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAC5C,IAAI,IAAI,6CAA6C,CAAC,CAAA,aAAA,EAAgB,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAW,QAAA,EAAA,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA,UAAA,CAAY,CAAC;AACjI,SAAA;AAED,QAAA,IAAI,KAAK,CAAC,MAAM,IAAI,IAAI,EAAE;AACxB,YAAA,IAAI,IAAI,CAAqC,kCAAA,EAAA,KAAK,CAAC,MAAM,YAAY,CAAC;AACvE,SAAA;QACD,IAAI,IAAI,QAAQ,CAAC;AAEjB,QAAA,eAAe,CAAC,SAAS,GAAG,IAAI,CAAC;AAEjC,QAAA,MAAM,UAAU,GAAG,WAAW,CAAC,GAAG,EAAE,CAAC;AAErC,QAAA,MAAM,UAAU,GAAG;YACjB,QAAQ,EAAE,KAAK,CAAC,QAAQ;AACxB,YAAA,QAAQ,EAAE,EAAE;AACZ,YAAA,EAAE,EAAE,EAAE;YACN,MAAM,EAAE,KAAK,CAAC,MAAM;AACpB,YAAA,OAAO,EAAE,IAAI;SACd,CAAC;QAEF,MAAM,SAAS,GAAG,MAAK;AACrB,YAAA,eAAe,CAAC,SAAS,GAAG,EAAE,CAAC;AAC/B,YAAA,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC;AACvC,SAAC,CAAC;AAEF,QAAA,MAAM,IAAI,GAAG,UAAU,EAAE,EAAE,CAAC,EAAA;AAC1B,YAAA,MAAM,KAAK,GAAG,WAAW,CAAC,GAAG,EAAE,CAAC;YAEhC,MAAM,UAAU,GAAG,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,KAAI;gBAC9B,MAAM,QAAQ,GAAG,WAAW,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;gBACvC,IAAI,QAAQ,IAAI,CAAC,EAAE;AACjB,oBAAA,EAAE,EAAE,CAAC;AACN,iBAAA;AAAM,qBAAA;AACL,oBAAA,MAAM,CAAC,qBAAqB,CAAC,MAAM,UAAU,CAAC,EAAE,EAAE,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC;AAC9D,iBAAA;AACH,aAAC,CAAC;AACF,YAAA,MAAM,CAAC,qBAAqB,CAAC,MAAM,UAAU,CAAC,EAAE,EAAE,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC;AAC/D,SAAC,CAAC;AAEF,QAAA,IAAI,KAAK,CAAC,IAAI,IAAI,SAAS,EAAE;YAC3B,IAAI,iBAAiB,GAAG,CAAC,CAAC;YAC1B,IAAI,aAAa,GAAG,UAAU,CAAC;YAE/B,MAAM,cAAc,GAAG,MAAK;gBAC1B,IAAI,aAAa,IAAI,UAAU,EAAE;AAC/B,oBAAA,IAAI,CAAC,cAAc,EAAE,KAAK,CAAC,iBAAiB,CAAC,CAAC;oBAC9C,aAAa,GAAG,UAAU,CAAC;AAC5B,iBAAA;qBAAM,IAAI,aAAa,IAAI,UAAU,EAAE;AACtC,oBAAA,MAAM,KAAK,GAAgB,eAAe,CAAC,aAAa,CACtD,CAAA,8BAAA,EAAiC,KAAK,CAAC,QAAQ,CAAC,iBAAiB,CAAC,CAAA,EAAA,CAAI,CACvE,CAAC;AACF,oBAAA,IAAI,iBAAiB,GAAG,KAAK,CAAC,QAAQ,CAAC,MAAM,EAAE;wBAC7C,KAAK,CAAC,KAAK,CAAC,eAAe,GAAG,KAAK,CAAC,eAAe,CAAC;AACpD,wBAAA,IAAI,CAAC,cAAc,EAAE,KAAK,CAAC,uBAAuB,CAAC,CAAC;wBACpD,aAAa,GAAG,KAAK,CAAC;AACvB,qBAAA;AACD,oBAAA,IAAI,iBAAiB,IAAI,KAAK,CAAC,QAAQ,CAAC,MAAM,EAAE;AAC9C,wBAAA,SAAS,EAAE,CAAC;AACb,qBAAA;AACF,iBAAA;qBAAM,IAAI,aAAa,IAAI,KAAK,EAAE;AACjC,oBAAA,MAAM,KAAK,GAAgB,eAAe,CAAC,aAAa,CACtD,CAAA,8BAAA,EAAiC,KAAK,CAAC,QAAQ,CAAC,iBAAiB,CAAC,CAAA,EAAA,CAAI,CACvE,CAAC;oBACF,KAAK,CAAC,KAAK,CAAC,eAAe,GAAG,KAAK,CAAC,WAAW,CAAC;AAChD,oBAAA,iBAAiB,EAAE,CAAC;AACpB,oBAAA,IAAI,CAAC,cAAc,EAAE,KAAK,CAAC,qBAAqB,CAAC,CAAC;oBAClD,aAAa,GAAG,UAAU,CAAC;AAC5B,iBAAA;AACH,aAAC,CAAC;AAEF,YAAA,MAAM,CAAC,qBAAqB,CAAC,cAAc,CAAC,CAAC;AAC9C,SAAA;AAED,QAAA,IAAI,KAAK,CAAC,IAAI,IAAI,OAAO,EAAE;AACzB,YAAA,MAAM,iBAAiB,GAAG;AACxB,gBAAA,EAAE,eAAe,EAAE,KAAK,CAAC,WAAW,EAAE;gBACtC,EAAE,eAAe,EAAE,KAAK,CAAC,aAAa,EAAE,MAAM,EAAE,GAAG,EAAE;AACrD,gBAAA,EAAE,eAAe,EAAE,KAAK,CAAC,WAAW,EAAE;aACvC,CAAC;AAEF,YAAA,MAAM,mBAAmB,GAAG;AAC1B,gBAAA,EAAE,eAAe,EAAE,KAAK,CAAC,WAAW,EAAE;gBACtC,EAAE,eAAe,EAAE,KAAK,CAAC,eAAe,EAAE,MAAM,EAAE,GAAG,EAAE;AACvD,gBAAA,EAAE,eAAe,EAAE,KAAK,CAAC,WAAW,EAAE;aACvC,CAAC;AAEF,YAAA,MAAM,gBAAgB,GAAG;gBACvB,QAAQ,EAAE,KAAK,CAAC,2BAA2B;AAC3C,gBAAA,UAAU,EAAE,CAAC;aACd,CAAC;AAEF,YAAA,MAAM,cAAc,GAAG,CAAC,EAAU,KAAI;AACpC,gBAAA,IAAI,UAAU,CAAC,OAAO,KAAK,IAAI,EAAE;AAC/B,oBAAA,OAAO;AACR,iBAAA;AACD,gBAAA,MAAM,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,GAAG,EAAE,GAAG,UAAU,CAAC,CAAC;gBACtD,UAAU,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;AACvC,gBAAA,UAAU,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;AACvB,gBAAA,MAAM,OAAO,GAAG,QAAQ,CAAC,EAAE,CAAC,IAAI,KAAK,CAAC,QAAQ,CAAC,UAAU,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;AAC/E,gBAAA,IAAI,OAAO,EAAE;oBACX,eAAe;AACZ,yBAAA,aAAa,CAAC,CAAA,8BAAA,EAAiC,EAAE,CAAA,EAAA,CAAI,CAAC;AACtD,yBAAA,OAAO,CAAC,iBAAiB,EAAE,gBAAgB,CAAC,CAAC;oBAChD,IAAI,UAAU,CAAC,QAAQ,CAAC,MAAM,IAAI,KAAK,CAAC,QAAQ,CAAC,MAAM,EAAE;AACvD,wBAAA,UAAU,CAAC,OAAO,GAAG,IAAI,CAAC;wBAC1B,UAAU,CAAC,SAAS,EAAE,KAAK,CAAC,2BAA2B,CAAC,CAAC;AAC1D,qBAAA;AACF,iBAAA;AAAM,qBAAA;oBACL,eAAe;AACZ,yBAAA,aAAa,CAAC,CAAA,8BAAA,EAAiC,EAAE,CAAA,EAAA,CAAI,CAAC;AACtD,yBAAA,OAAO,CAAC,mBAAmB,EAAE,gBAAgB,CAAC,CAAC;AAClD,oBAAA,UAAU,CAAC,OAAO,GAAG,KAAK,CAAC;oBAC3B,UAAU,CAAC,SAAS,EAAE,KAAK,CAAC,2BAA2B,CAAC,CAAC;AAC1D,iBAAA;AACH,aAAC,CAAC;YAEF,IAAI,MAAM,GAAG,eAAe,CAAC,gBAAgB,CAAC,sBAAsB,CAAC,CAAC;AACtE,YAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBACtC,MAAM,CAAC,CAAC,CAAC,CAAC,gBAAgB,CAAC,OAAO,EAAE,CAAC,CAAC,KAAI;oBACxC,cAAc,CAAE,CAAC,CAAC,MAAsB,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC,CAAC;AACpE,iBAAC,CAAC,CAAC;AACJ,aAAA;AACF,SAAA;KACF;;AA7JM,iBAAI,CAAA,IAAA,GAAG,IAAI;;;;"}