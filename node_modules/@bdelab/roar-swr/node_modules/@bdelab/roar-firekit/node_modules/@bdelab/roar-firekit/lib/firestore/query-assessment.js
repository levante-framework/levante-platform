"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTaskAndVariant = void 0;
const firestore_1 = require("firebase/firestore");
const getTaskAndVariant = ({ db, taskId, variantParams, }) => __awaiter(void 0, void 0, void 0, function* () {
    const taskRef = (0, firestore_1.doc)(db, 'tasks', taskId);
    const variantsCollectionRef = (0, firestore_1.collection)(taskRef, 'variants');
    const docSnap = yield (0, firestore_1.getDoc)(taskRef);
    if (docSnap.exists()) {
        const taskData = docSnap.data();
        // Check to see if variant exists already by querying for a match on the params.
        const q = (0, firestore_1.query)(variantsCollectionRef, (0, firestore_1.where)('params', '==', variantParams), (0, firestore_1.limit)(1));
        const querySnapshot = yield (0, firestore_1.getDocs)(q);
        let variantData;
        querySnapshot.forEach((docRef) => {
            variantData = Object.assign(Object.assign({}, docRef.data()), { id: docRef.id });
        });
        return {
            task: taskData,
            variant: variantData,
        };
    }
    return {
        task: undefined,
        variant: undefined,
    };
});
exports.getTaskAndVariant = getTaskAndVariant;
