{"version":3,"file":"useDistrictsListQuery-XZoLl8le.js","sources":["../../../../node_modules/lodash/head.js","../../src/composables/queries/useDistrictsListQuery.ts"],"sourcesContent":["/**\n * Gets the first element of `array`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @alias first\n * @category Array\n * @param {Array} array The array to query.\n * @returns {*} Returns the first element of `array`.\n * @example\n *\n * _.head([1, 2, 3]);\n * // => 1\n *\n * _.head([]);\n * // => undefined\n */\nfunction head(array) {\n  return (array && array.length) ? array[0] : undefined;\n}\n\nmodule.exports = head;\n","import { computed, type MaybeRefOrGetter } from 'vue';\nimport { useQuery } from '@tanstack/vue-query';\nimport _isEmpty from 'lodash/isEmpty';\nimport { computeQueryOverrides } from '@/helpers/computeQueryOverrides';\nimport { orgFetcher } from '@/helpers/query/orgs';\nimport useUserClaimsQuery from '@/composables/queries/useUserClaimsQuery';\nimport useUserType from '@/composables/useUserType';\nimport { DISTRICTS_LIST_QUERY_KEY } from '@/constants/queryKeys';\nimport { FIRESTORE_COLLECTIONS } from '@/constants/firebase';\n\n/**\n * Districts List query.\n *\n * @param {QueryOptions|undefined} queryOptions â€“ Optional TanStack query options.\n * @returns {UseQueryResult} The TanStack query result.\n */\nconst useDistrictsListQuery = (queryOptions?: UseQueryOptions): UseQueryReturnType => {\n  // Fetch the user claims.\n  const { data: userClaims } = useUserClaimsQuery({\n    enabled: queryOptions?.enabled ?? true,\n  });\n\n  // Get admin status and administation orgs.\n  const { isSuperAdmin } = useUserType(userClaims);\n  const administrationOrgs = computed(() => userClaims.value?.claims?.adminOrgs);\n\n  // Ensure all necessary data is loaded before enabling the query.\n  const claimsLoaded = computed(() => !_isEmpty(userClaims?.value?.claims));\n  const queryConditions = [() => claimsLoaded.value];\n  const { isQueryEnabled, options } = computeQueryOverrides(queryConditions, queryOptions);\n\n  return useQuery({\n    queryKey: [DISTRICTS_LIST_QUERY_KEY],\n    queryFn: () => orgFetcher(FIRESTORE_COLLECTIONS.DISTRICTS, undefined, isSuperAdmin, administrationOrgs),\n    enabled: isQueryEnabled,\n    ...options,\n  });\n};\n\nexport default useDistrictsListQuery;\n"],"names":["head","array","head_1","useDistrictsListQuery","queryOptions","userClaims","useUserClaimsQuery","isSuperAdmin","useUserType","administrationOrgs","computed","_b","_a","claimsLoaded","_isEmpty","queryConditions","isQueryEnabled","options","computeQueryOverrides","useQuery","DISTRICTS_LIST_QUERY_KEY","orgFetcher","FIRESTORE_COLLECTIONS"],"mappings":"yiBAkBA,SAASA,EAAKC,EAAO,CACnB,OAAQA,GAASA,EAAM,OAAUA,EAAM,CAAC,EAAI,MAC9C,CAEA,IAAAC,EAAiBF,eCNXG,EAAyBC,GAAuD,CAEpF,KAAM,CAAE,KAAMC,CAAA,EAAeC,EAAmB,CAC9C,SAASF,GAAA,YAAAA,EAAc,UAAW,EAAA,CACnC,EAGK,CAAE,aAAAG,CAAA,EAAiBC,EAAYH,CAAU,EACzCI,EAAqBC,EAAS,IAAA,SAAM,OAAAC,GAAAC,EAAAP,EAAW,QAAX,YAAAO,EAAkB,SAAlB,YAAAD,EAA0B,UAAS,EAGvEE,EAAeH,EAAS,IAAA,OAAM,OAACI,GAASF,EAAAP,GAAA,YAAAA,EAAY,QAAZ,YAAAO,EAAmB,MAAM,EAAC,EAClEG,EAAkB,CAAC,IAAMF,EAAa,KAAK,EAC3C,CAAE,eAAAG,EAAgB,QAAAC,CAAA,EAAYC,EAAsBH,EAAiBX,CAAY,EAEvF,OAAOe,EAAS,CACd,SAAU,CAACC,CAAwB,EACnC,QAAS,IAAMC,EAAWC,EAAsB,UAAW,OAAWf,EAAcE,CAAkB,EACtG,QAASO,EACT,GAAGC,CAAA,CACJ,CACH","x_google_ignoreList":[0]}