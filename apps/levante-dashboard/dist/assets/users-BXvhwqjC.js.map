{"version":3,"file":"users-BXvhwqjC.js","sources":["../../src/helpers/query/users.js"],"sourcesContent":["import { toValue } from 'vue';\nimport { convertValues, getAxiosInstance, mapFields, getBaseDocumentPath } from './utils';\n\n/**\n * Constructs the request body for fetching users.\n *\n * @param {Object} params - The parameters for constructing the request body.\n * @param {Array<string>} [params.userIds=[]] - The IDs of the users to fetch.\n * @param {string} params.orgType - The type of the organization (e.g., 'districts', 'schools').\n * @param {string} params.orgId - The ID of the organization.\n * @param {boolean} params.aggregationQuery - Whether to perform an aggregation query.\n * @param {number} params.pageLimit - The maximum number of users to fetch per page.\n * @param {number} params.page - The page number to fetch.\n * @param {boolean} [params.paginate=true] - Whether to paginate the results.\n * @param {Array<string>} [params.select=['name']] - The fields to select in the query.\n * @param {string} params.orderBy - The field to order the results by.\n * @returns {Object} The constructed request body.\n * @throws {Error} If neither userIds nor orgType and orgId are provided.\n */\nexport const getUsersRequestBody = ({\n  userIds = [],\n  orgType,\n  orgId,\n  aggregationQuery,\n  pageLimit,\n  page,\n  paginate = true,\n  select = ['name'],\n  orderBy,\n  restrictToActiveUsers = false,\n}) => {\n  const requestBody = {\n    structuredQuery: {},\n  };\n\n  if (orderBy) {\n    requestBody.structuredQuery.orderBy = orderBy;\n  }\n\n  if (!aggregationQuery) {\n    if (paginate) {\n      requestBody.structuredQuery.limit = pageLimit;\n      requestBody.structuredQuery.offset = page * pageLimit;\n    }\n\n    requestBody.structuredQuery.select = {\n      fields: select.map((field) => ({ fieldPath: field })),\n    };\n  }\n  requestBody.structuredQuery.from = [\n    {\n      collectionId: 'users',\n      allDescendants: false,\n    },\n  ];\n\n  requestBody.structuredQuery.where = {\n    compositeFilter: {\n      op: 'AND',\n      filters: [],\n    },\n  };\n\n  if (restrictToActiveUsers) {\n    requestBody.structuredQuery.where.compositeFilter.filters.push({\n      fieldFilter: {\n        field: { fieldPath: 'archived' },\n        op: 'EQUAL',\n        value: { booleanValue: false },\n      },\n    });\n  }\n\n  if (userIds.length > 0) {\n    requestBody.structuredQuery.where.compositeFilter.filters.push({\n      fieldFilter: {\n        field: { fieldPath: 'id' }, // change this to accept document Id, if we need\n        op: 'IN',\n        value: {\n          arrayValue: {\n            values: [\n              userIds.map((userId) => {\n                return { stringValue: userId };\n              }),\n            ],\n          },\n        },\n      },\n    });\n  } else if (orgType && orgId) {\n    requestBody.structuredQuery.where.compositeFilter.filters.push({\n      fieldFilter: {\n        field: { fieldPath: `${orgType}.current` }, // change this to accept document Id, if we need\n        op: 'ARRAY_CONTAINS',\n        value: { stringValue: orgId },\n      },\n    });\n  } else {\n    throw new Error('Must provide either userIds or orgType and orgId');\n  }\n\n  if (aggregationQuery) {\n    return {\n      structuredAggregationQuery: {\n        ...requestBody,\n        aggregations: [\n          {\n            alias: 'count',\n            count: {},\n          },\n        ],\n      },\n    };\n  }\n\n  return requestBody;\n};\n\n/**\n * Fetches a page of users based on the provided organization type and ID.\n *\n * @param {string} orgType - The type of the organization (e.g., 'districts', 'schools').\n * @param {string} orgId - The ID of the organization.\n * @param {number} pageLimit - The maximum number of users to fetch per page.\n * @param {number} page - The page number to fetch.\n * @param {string} orderBy - The field to order the results by.\n * @param {boolean} restrictToActiveUsers - Whether to restrict the count to active users.\n * @returns {Promise<Object>} The fetched users data.\n */\nexport const fetchUsersByOrg = async (orgType, orgId, pageLimit, page, orderBy, restrictToActiveUsers = false) => {\n  const axiosInstance = getAxiosInstance();\n  const requestBody = getUsersRequestBody({\n    orgType: toValue(orgType),\n    orgId: toValue(orgId),\n    aggregationQuery: false,\n    pageLimit: toValue(pageLimit),\n    page: toValue(page),\n    paginate: true,\n    select: ['id', 'username', 'name', 'email', 'studentData', 'userType', 'archived'],\n    orderBy: toValue(orderBy),\n    restrictToActiveUsers: restrictToActiveUsers,\n  });\n\n  console.log(`Fetching users page ${toValue(page)} for ${toValue(orgType)} ${toValue(orgId)}`);\n  return axiosInstance.post(`${getBaseDocumentPath()}:runQuery`, requestBody).then(({ data }) => mapFields(data));\n};\n\n/**\n * Counts the number of users based on the provided organization type and ID.\n *\n * @param {string} orgType - The type of the organization (e.g., 'districts', 'schools').\n * @param {string} orgId - The ID of the organization.\n * @param {string} orderBy - The field to order the results by.\n * @param {boolean} restrictToActiveUsers - Whether to restrict the count to active users.\n * @returns {Promise<number>} The count of users.\n */\nexport const countUsersByOrg = async (orgType, orgId, orderBy, restrictToActiveUsers = false) => {\n  const axiosInstance = getAxiosInstance();\n  const requestBody = getUsersRequestBody({\n    orgType: toValue(orgType),\n    orgId: toValue(orgId),\n    aggregationQuery: true,\n    paginate: false,\n    orderBy: toValue(orderBy),\n    restrictToActiveUsers: restrictToActiveUsers,\n  });\n\n  return axiosInstance.post(`${getBaseDocumentPath()}:runAggregationQuery`, requestBody).then(({ data }) => {\n    return Number(convertValues(data[0].result?.aggregateFields?.count));\n  });\n};\n"],"names":["getUsersRequestBody","userIds","orgType","orgId","aggregationQuery","pageLimit","page","paginate","select","orderBy","restrictToActiveUsers","requestBody","field","userId","fetchUsersByOrg","axiosInstance","getAxiosInstance","toValue","getBaseDocumentPath","data","mapFields","countUsersByOrg","convertValues","_b","_a"],"mappings":"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"}