{"version":3,"file":"administrations-BtjuibWP.js","sources":["../../src/helpers/query/administrations.js"],"sourcesContent":["import { toValue } from 'vue';\nimport _chunk from 'lodash/chunk';\nimport _last from 'lodash/last';\nimport _mapValues from 'lodash/mapValues';\nimport _without from 'lodash/without';\nimport { storeToRefs } from 'pinia';\nimport { useAuthStore } from '@/store/auth';\nimport { convertValues, getAxiosInstance, getBaseDocumentPath, orderByDefault } from './utils';\nimport { filterAdminOrgs } from '@/helpers';\nimport { isEmulator } from '@/helpers';\nimport { FIRESTORE_BASE_URL } from '@/constants/firebase';\n\nexport function getTitle(item, isSuperAdmin) {\n  if (isSuperAdmin) {\n    return item.name;\n  } else {\n    // Check if publicName exists, otherwise fallback to name\n    return item.publicName ?? item.name;\n  }\n}\n\nconst processBatchStats = async (axiosInstance, statsPaths, batchSize = 5) => {\n  const batchStatsDocs = [];\n  const statsPathChunks = _chunk(statsPaths, batchSize);\n  for (const batch of statsPathChunks) {\n    const { data } = await axiosInstance.post(`${getBaseDocumentPath()}:batchGet`, {\n      documents: batch,\n    });\n\n    const processedBatch = _without(\n      data.map(({ found }) => {\n        if (found) {\n          return {\n            name: found.name,\n            data: _mapValues(found.fields, (value) => convertValues(value)),\n          };\n        }\n        return undefined;\n      }),\n      undefined,\n    );\n\n    batchStatsDocs.push(...processedBatch);\n  }\n\n  return batchStatsDocs;\n};\n\nconst mapAdministrations = async ({ isSuperAdmin, data, creators, adminOrgs }) => {\n  // First format the administration documents\n  const administrationData = data\n    .map((a) => a.data)\n    .map((a) => {\n      let assignedOrgs = {\n        districts: a.districts,\n        schools: a.schools,\n        classes: a.classes,\n        groups: a.groups,\n        families: a.families,\n      };\n\n      if (!isSuperAdmin.value) {\n        assignedOrgs = filterAdminOrgs(adminOrgs.value, assignedOrgs);\n      }\n\n      return {\n        id: a.id,\n        name: a.name,\n        publicName: a.publicName,\n        dates: {\n          start: a.dateOpened,\n          end: a.dateClosed,\n          created: a.dateCreated,\n        },\n        creator: { ...creators[a.createdBy] } || null,\n        assessments: a.assessments,\n        assignedOrgs,\n        // If testData is not defined, default to false when mapping\n        testData: a.testData ?? false,\n      };\n    });\n\n  // Create a list of all the stats document paths we need to get\n  const statsPaths = data\n    // First filter out any missing administration documents\n    .filter((item) => item.name !== undefined)\n    // Then map to the total stats document\n    .map(({ name }) => `${name}/stats/total`);\n\n  const axiosInstance = getAxiosInstance();\n  const batchStatsDocs = await processBatchStats(axiosInstance, statsPaths);\n\n  const administrations = administrationData?.map((administration) => {\n    const thisAdminStats = batchStatsDocs.find((statsDoc) => statsDoc.name.includes(administration.id));\n    return {\n      ...administration,\n      stats: { total: thisAdminStats?.data },\n    };\n  });\n\n  return administrations;\n};\n\nexport const administrationPageFetcher = async (isSuperAdmin, exhaustiveAdminOrgs, fetchTestData = false, orderBy) => {\n  const authStore = useAuthStore();\n  const { roarfirekit } = storeToRefs(authStore);\n  const administrationIds = await roarfirekit.value.getAdministrations({\n    testData: toValue(fetchTestData),\n  });\n\n  const axiosInstance = getAxiosInstance();\n  const documents = administrationIds.map((id) => `${getBaseDocumentPath()}/administrations/${id}`);\n\n  let data = [];\n\n  try {\n    data = await axiosInstance.post(`${getBaseDocumentPath()}:batchGet`, { documents });\n  } catch (error) {\n    console.error('Error fetching administration data:', error);\n    return { sortedAdministrations: [], administrations: [] };\n  }\n\n  const administrationData = _without(\n    data.data.map(({ found }) => {\n      if (found) {\n        return {\n          name: found.name,\n          data: {\n            id: _last(found.name.split('/')),\n            ..._mapValues(found.fields, (value) => convertValues(value)),\n          },\n        };\n      }\n      return undefined;\n    }),\n    undefined,\n  );\n\n  const creatorIds = administrationData.map((adm) => adm.data.createdBy).filter(Boolean);\n  const uniqueCreatorIds = [...new Set(creatorIds)];\n  const creatorDocs = uniqueCreatorIds.map((id) => `${getBaseDocumentPath()}/users/${id}`);\n  const { data: creators } = await axiosInstance.post(`${getBaseDocumentPath()}:batchGet`, { documents: creatorDocs });\n  const creatorsData = creators.reduce((acc, { found }) => {\n    if (found) {\n      const creatorId = _last(found.name.split('/'));\n      acc[creatorId] = {\n        id: creatorId,\n        ..._mapValues(found.fields, (value) => convertValues(value)),\n      };\n    }\n    return acc;\n  }, {});\n\n  const administrations = await mapAdministrations({\n    isSuperAdmin,\n    data: administrationData,\n    creators: creatorsData,\n    adminOrgs: exhaustiveAdminOrgs,\n  });\n\n  const orderField = (orderBy?.value ?? orderByDefault)[0].field.fieldPath;\n  const orderDirection = (orderBy?.value ?? orderByDefault)[0].direction;\n  const sortedAdministrations = administrations\n    .filter((a) => a[orderField] !== undefined)\n    .sort((a, b) => {\n      if (orderDirection === 'ASCENDING') return 2 * +(a[orderField] > b[orderField]) - 1;\n      if (orderDirection === 'DESCENDING') return 2 * +(b[orderField] > a[orderField]) - 1;\n      return 0;\n    });\n\n  return { sortedAdministrations, administrations };\n};\n\n/**\n * Fetches administrations that are assigned to a specific organization.\n *\n * @param {String} orgId – The organization ID to filter administrations by.\n * @param {String} orgType – The organization type (districts, schools, classes, groups).\n * @param {Array} administrations – The list of all administrations to filter.\n * @returns {Array} – An array of administrations assigned to the specified organization.\n */\nexport const getAdministrationsByOrg = (orgId, orgType, administrations) => {\n  if (!administrations || !orgId || !orgType) {\n    return [];\n  }\n\n  return administrations.filter((administration) => {\n    const assignedOrgs = administration.assignedOrgs?.[orgType] || [];\n    return assignedOrgs.includes(orgId);\n  });\n};\n"],"names":["getTitle","item","isSuperAdmin","processBatchStats","axiosInstance","statsPaths","batchSize","batchStatsDocs","statsPathChunks","_chunk","batch","data","getBaseDocumentPath","processedBatch","_without","found","_mapValues","value","convertValues","mapAdministrations","creators","adminOrgs","administrationData","a","assignedOrgs","filterAdminOrgs","name","getAxiosInstance","administration","thisAdminStats","statsDoc","administrationPageFetcher","exhaustiveAdminOrgs","fetchTestData","orderBy","authStore","useAuthStore","roarfirekit","storeToRefs","administrationIds","toValue","documents","id","error","_last","creatorIds","adm","creatorDocs","creatorsData","acc","creatorId","administrations","orderField","orderByDefault","orderDirection","b","getAdministrationsByOrg","orgId","orgType","_a"],"mappings":"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"}