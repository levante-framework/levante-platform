{"version":3,"file":"survey-CRadXOqO.js","sources":["../../../../node_modules/lodash/merge.js","../../src/helpers/audio.ts","../../src/helpers/survey.ts"],"sourcesContent":["var baseMerge = require('./_baseMerge'),\n    createAssigner = require('./_createAssigner');\n\n/**\n * This method is like `_.assign` except that it recursively merges own and\n * inherited enumerable string keyed properties of source objects into the\n * destination object. Source properties that resolve to `undefined` are\n * skipped if a destination value exists. Array and plain object properties\n * are merged recursively. Other objects and value types are overridden by\n * assignment. Source objects are applied from left to right. Subsequent\n * sources overwrite property assignments of previous sources.\n *\n * **Note:** This method mutates `object`.\n *\n * @static\n * @memberOf _\n * @since 0.5.0\n * @category Object\n * @param {Object} object The destination object.\n * @param {...Object} [sources] The source objects.\n * @returns {Object} Returns `object`.\n * @example\n *\n * var object = {\n *   'a': [{ 'b': 2 }, { 'd': 4 }]\n * };\n *\n * var other = {\n *   'a': [{ 'c': 3 }, { 'e': 5 }]\n * };\n *\n * _.merge(object, other);\n * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }\n */\nvar merge = createAssigner(function(object, source, srcIndex) {\n  baseMerge(object, source, srcIndex);\n});\n\nmodule.exports = merge;\n","export interface BufferList {\n  [key: string]: AudioBuffer;\n}\n\nexport class BufferLoader {\n  context: AudioContext;\n  urlListMap: Record<string, string>;\n  onload: (bufferList: BufferList) => void;\n  bufferList: BufferList;\n  loadCount: number;\n\n  constructor(context: AudioContext, urlListMap: Record<string, string>, callback: (bufferList: BufferList) => void) {\n    this.context = context;\n    this.urlListMap = urlListMap;\n    this.onload = callback;\n    this.bufferList = {}; // Initialize as an empty object\n    this.loadCount = 0;\n  }\n\n  loadBuffer(url: string, index: string): void {\n    const request = new XMLHttpRequest();\n    request.open('GET', url, true);\n    request.responseType = 'arraybuffer';\n    request.onload = () => {\n      // Asynchronously decode the audio file data in request.response\n      this.context.decodeAudioData(\n        request.response,\n        (buffer: AudioBuffer) => {\n          if (!buffer) {\n            // Use console.error instead of alert for better DX\n            console.error('error decoding file data: ' + url);\n            return;\n          }\n          this.bufferList[index] = buffer;\n          this.loadCount += 1;\n          if (this.loadCount === Object.keys(this.urlListMap).length) this.onload(this.bufferList);\n        },\n        (error: DOMException) => {\n          console.error('decodeAudioData error', error);\n        },\n      );\n    };\n\n    request.onerror = (error: ProgressEvent) => {\n      console.error('Request error', error);\n    };\n\n    request.send();\n  }\n\n  load(): void {\n    Object.keys(this.urlListMap).forEach((key: string) => {\n      this.loadBuffer(this.urlListMap[key], key);\n    });\n  }\n}\n\n// Ensure AudioContext is typed correctly\nexport const AudioContext = window.AudioContext || ((window as any).webkitAudioContext as { new (): AudioContext });\n","import axios from 'axios';\nimport _merge from 'lodash/merge';\nimport { BufferLoader, AudioContext, type BufferList } from '@/helpers/audio';\nimport { LEVANTE_SURVEY_RESPONSES_KEY } from '@/constants/bucket';\nimport type { SurveyModel, Question } from 'survey-core';\nimport type { Router } from 'vue-router';\nimport type { QueryClient } from '@tanstack/vue-query';\nimport type { RoarFirekit as RoarfirekitType } from '@bdelab/roar-firekit';\nimport type { ToastServiceMethods } from 'primevue/toastservice';\n// @ts-expect-error - Will be resolved when store file is converted to TS\nimport type { UseSurveyStore } from '@/store/survey';\n// @ts-expect-error - Will be resolved when store file is converted to TS\nimport type { UseGameStore } from '@/store/game';\nimport { LEVANTE_BUCKET_SURVEY_AUDIO, LEVANTE_BUCKET_URL } from '@/constants/bucket';\n\nexport interface AudioLinkMap {\n  [locale: string]: {\n    [fileName: string]: string;\n  };\n}\n\ninterface GCSFileItem {\n  contentType: string;\n  name: string;\n}\n\ninterface GCSResponse {\n  items: GCSFileItem[];\n}\n\ninterface FinishedLoadingParams {\n  bufferList: BufferList;\n  parsedLocale: string;\n  setSurveyAudioLoading: (loading: boolean) => void;\n  setSurveyAudioPlayerBuffers: (locale: string, buffers: AudioBuffer[]) => void;\n}\n\ninterface SurveyAudioBuffers {\n  [locale: string]: AudioBuffer[];\n}\n\ninterface FetchBufferParams {\n  parsedLocale: string;\n  setSurveyAudioLoading: (loading: boolean) => void;\n  audioLinks: AudioLinkMap;\n  surveyAudioBuffers: SurveyAudioBuffers;\n  setSurveyAudioPlayerBuffers: (locale: string, buffers: AudioBuffer[]) => void;\n}\n\ninterface ShowAndPlaceAudioButtonParams {\n  playAudioButton: HTMLElement | null;\n  el: HTMLElement;\n}\n\ninterface SurveyResponseDoc {\n  administrationId?: string;\n  general?: { responses: Record<string, any> };\n  specific?: { responses: Record<string, any> }[];\n  pageNo?: number;\n}\n\ninterface RestoreSurveyDataParams {\n  surveyInstance: SurveyModel;\n  uid: string;\n  selectedAdmin: string | null;\n  surveyResponsesData: SurveyResponseDoc[] | null;\n  surveyStore: UseSurveyStore;\n}\n\ninterface RestoreSurveyDataResult {\n  isRestored: boolean;\n  pageNo: number;\n}\n\ninterface SaveSurveyDataParams {\n  survey: SurveyModel;\n  uid: string;\n  questionName: string;\n  responseValue: any;\n  specificIds: (string | number)[];\n  userType: string;\n  surveyStore: UseSurveyStore;\n}\n\nexport interface LocalStorageSurveyData {\n  pageNo: number;\n  isGeneral: boolean;\n  isComplete: boolean;\n  specificId: string | number;\n  responses: Record<string, any>;\n  userType: string;\n}\n\ntype SurveyResponse = {\n  responseValue: string;\n  responseTime: string;\n};\n\ninterface StructuredSurveyResponse {\n  pageNo: number;\n  isGeneral: boolean;\n  isComplete: boolean;\n  specificId?: string | number;\n  responses: Record<string, SurveyResponse | null>;\n  userType: string;\n  isEntireSurveyCompleted: boolean;\n}\n\ninterface SaveFinalSurveyDataParams {\n  sender: SurveyModel;\n  roarfirekit: RoarfirekitType;\n  uid: string;\n  surveyStore: UseSurveyStore;\n  selectedAdmin: string | null;\n  router: Router;\n  toast: ToastServiceMethods;\n  queryClient: QueryClient;\n  specificIds: (string | number)[];\n  userType: string;\n  gameStore: UseGameStore;\n}\n\nconst context = new AudioContext();\n\n// TODO: Refactor to use LEVANTE_BUCKET_URL\nexport const fetchAudioLinks = async (surveyType: string): Promise<AudioLinkMap> => {\n  const response = await axios.get<GCSResponse>(LEVANTE_BUCKET_SURVEY_AUDIO);\n  const files = response.data || { items: [] };\n  const audioLinkMap: AudioLinkMap = {};\n  files.items.forEach((item: GCSFileItem) => {\n    if (item.contentType === 'audio/mpeg' && item.name.startsWith(surveyType)) {\n      const splitParts = item.name.split('/');\n      const fileLocale = splitParts[1];\n      const fileName = splitParts.at(-1)?.split('.')?.[0];\n      if (fileName) {\n        if (!audioLinkMap[fileLocale]) {\n          audioLinkMap[fileLocale] = {};\n        }\n        audioLinkMap[fileLocale][fileName] = LEVANTE_BUCKET_URL + `/${item.name}`;\n      }\n    }\n  });\n\n  return audioLinkMap;\n};\n\nexport function getParsedLocale(locale: string | undefined | null): string {\n  return (locale || '').split('-')?.[0] || 'en';\n}\n\nfunction finishedLoading({\n  bufferList,\n  parsedLocale,\n  setSurveyAudioLoading,\n  setSurveyAudioPlayerBuffers,\n}: FinishedLoadingParams): void {\n  // @ts-expect-error - Will be resolved when store file is converted to TS\n  setSurveyAudioPlayerBuffers(parsedLocale, bufferList);\n  setSurveyAudioLoading(false);\n}\n\n// Function to fetch buffer or return from the cache\nexport const fetchBuffer = ({\n  parsedLocale,\n  setSurveyAudioLoading,\n  audioLinks,\n  surveyAudioBuffers,\n  setSurveyAudioPlayerBuffers,\n}: FetchBufferParams): void => {\n  // buffer already exists for the given local\n  if (surveyAudioBuffers[parsedLocale]) {\n    return;\n  }\n  setSurveyAudioLoading(true);\n  const bufferLoader = new BufferLoader(context, audioLinks[parsedLocale], (bufferList: BufferList) =>\n    finishedLoading({\n      bufferList,\n      parsedLocale,\n      setSurveyAudioLoading,\n      setSurveyAudioPlayerBuffers,\n    }),\n  );\n\n  bufferLoader.load();\n};\n\nexport const showAndPlaceAudioButton = ({ playAudioButton, el }: ShowAndPlaceAudioButtonParams): void => {\n  if (playAudioButton) {\n    playAudioButton.classList.add('play-button-visible');\n    playAudioButton.style.display = 'flex';\n    el.appendChild(playAudioButton);\n  }\n};\n\nexport function restoreSurveyData({\n  surveyInstance,\n  uid,\n  selectedAdmin,\n  surveyResponsesData,\n  surveyStore,\n}: RestoreSurveyDataParams): RestoreSurveyDataResult {\n  // Try to get data from localStorage first\n  const prevDataStr = window.localStorage.getItem(`${LEVANTE_SURVEY_RESPONSES_KEY}-${uid}`);\n  if (prevDataStr) {\n    const parsedData: LocalStorageSurveyData = JSON.parse(prevDataStr);\n    // The responses need to be formatted to be key value pairs with the question name as the key, and reponse as the value\n    // for the Survey instance to work.\n    const formattedResponses = Object.fromEntries(\n      Object.entries(parsedData.responses).map(([key, value]) => [key, value.responseValue]),\n    );\n\n    surveyInstance.data = formattedResponses;\n    surveyInstance.currentPageNo = parsedData.pageNo;\n    return { isRestored: true, pageNo: parsedData.pageNo };\n  } else if (surveyResponsesData) {\n    // If not in localStorage, try to find data from the server\n    const surveyResponse = surveyResponsesData.find((doc) => doc?.administrationId === selectedAdmin);\n    if (surveyResponse) {\n      if (!surveyStore.isGeneralSurveyComplete && surveyResponse.general) {\n        const formattedResponses = Object.fromEntries(\n          Object.entries(surveyResponse.general.responses).map(([key, value]) => [key, value.responseValue]),\n        );\n\n        surveyInstance.data = formattedResponses;\n      } else if (surveyResponse.specific) {\n        const specificIndex = surveyStore.specificSurveyRelationIndex;\n        const formattedResponses = Object.fromEntries(\n          Object.entries(surveyResponse.specific[specificIndex].responses).map(([key, value]) => [\n            key,\n            value.responseValue,\n          ]),\n        );\n        surveyInstance.data = formattedResponses;\n      }\n\n      surveyInstance.currentPageNo = surveyResponse.pageNo ?? 0;\n      return { isRestored: true, pageNo: surveyResponse.pageNo ?? 0 };\n    }\n  }\n\n  // If there's no data in localStorage and no data from the server,\n  // the survey has never been started, so we continue with an empty survey\n  return { isRestored: false, pageNo: 0 };\n}\n\nexport function saveSurveyData({\n  survey,\n  uid,\n  questionName,\n  responseValue,\n  specificIds,\n  userType,\n  surveyStore,\n}: SaveSurveyDataParams): void {\n  const currentPageNo = survey.currentPageNo;\n  const storageKey = `${LEVANTE_SURVEY_RESPONSES_KEY}-${uid}`;\n  const prevDataStr = window.localStorage.getItem(storageKey);\n\n  if (prevDataStr) {\n    const prevData: LocalStorageSurveyData = JSON.parse(prevDataStr);\n\n    // Update the page number at the top level\n    prevData.pageNo = currentPageNo;\n    prevData.responses[questionName] = {\n      responseValue,\n      responseTime: new Date().toISOString(),\n    };\n\n    window.localStorage.setItem(storageKey, JSON.stringify(prevData));\n  } else {\n    // Initialize the structure if it doesn't exist\n    const newData: LocalStorageSurveyData = {\n      pageNo: currentPageNo,\n      isGeneral: true,\n      isComplete: false,\n      specificId: 0,\n      responses: {},\n      userType: userType,\n    };\n\n    if (!surveyStore.isGeneralSurveyComplete) {\n      newData.responses[questionName] = {\n        responseValue,\n        responseTime: new Date().toISOString(),\n      };\n    } else {\n      const specificIndex = surveyStore.specificSurveyRelationIndex;\n      newData.specificId = specificIds[specificIndex];\n      newData.responses[questionName] = {\n        responseValue,\n        responseTime: new Date().toISOString(),\n      };\n      newData.isComplete = false;\n      newData.isGeneral = false;\n    }\n\n    window.localStorage.setItem(storageKey, JSON.stringify(newData));\n  }\n}\n\nexport async function saveFinalSurveyData({\n  sender,\n  roarfirekit,\n  uid,\n  surveyStore,\n  selectedAdmin,\n  router,\n  toast,\n  queryClient,\n  specificIds,\n  userType,\n  gameStore,\n}: SaveFinalSurveyDataParams): Promise<void> {\n  const fromStorage = window.localStorage.getItem(`${LEVANTE_SURVEY_RESPONSES_KEY}-${uid}`);\n\n  let questionsFromStorage: Question[] = [];\n  // TODO: Make this not reliant on local storage\n  if (fromStorage) {\n    questionsFromStorage = JSON.parse(fromStorage).responses;\n  }\n\n  const allQuestions = sender.getAllQuestions() as Question[];\n\n  const unansweredQuestions: Record<string, null> = {};\n\n  allQuestions.forEach((question) => (unansweredQuestions[question.name] = null));\n\n  // NOTE: Values from the second object overwrite values from the first\n  const responsesWithAllQuestions = _merge({}, unansweredQuestions, questionsFromStorage);\n\n  // Structure the data\n  const structuredResponses: StructuredSurveyResponse = {\n    pageNo: 0,\n    isGeneral: true,\n    isComplete: true,\n    specificId: 0,\n    responses: responsesWithAllQuestions,\n    userType: userType,\n    isEntireSurveyCompleted: false,\n  };\n\n  // Update specificId if it's a specific survey\n  if (surveyStore.isGeneralSurveyComplete) {\n    structuredResponses.isGeneral = false;\n    const specificIndex = surveyStore.specificSurveyRelationIndex;\n    structuredResponses.specificId = specificIds[specificIndex];\n  }\n\n  let isEntireSurveyCompleted;\n  if (userType === 'student') {\n    isEntireSurveyCompleted = true;\n  } else {\n    const hasSpecificSurveys = surveyStore.specificSurveyRelationData.length > 0;\n    // If the teacher/caregiver has no classes or children, the entire survey is complete\n    if (!hasSpecificSurveys) {\n      isEntireSurveyCompleted = true;\n    } else {\n      isEntireSurveyCompleted =\n        surveyStore.isGeneralSurveyComplete &&\n        surveyStore.specificSurveyRelationIndex === surveyStore.specificSurveyRelationData.length - 1;\n    }\n  }\n\n  structuredResponses.isEntireSurveyCompleted = isEntireSurveyCompleted;\n\n  // turn on loading state\n  surveyStore.setIsSavingSurveyResponses(true);\n\n  // call cloud function to save the survey results\n  try {\n    await roarfirekit.saveSurveyResponses({\n      surveyData: structuredResponses,\n      administrationId: selectedAdmin!,\n    });\n\n    // Clear localStorage after successful submission\n    window.localStorage.removeItem(`${LEVANTE_SURVEY_RESPONSES_KEY}-${uid}`);\n\n    // update survey store to let survey tabs know\n    if (userType === 'student') {\n      surveyStore.setIsGeneralSurveyComplete(true);\n    } else {\n      if (!surveyStore.isGeneralSurveyComplete) {\n        surveyStore.setIsGeneralSurveyComplete(true);\n      } else if (surveyStore.specificSurveyRelationIndex === surveyStore.specificSurveyRelationData.length - 1) {\n        surveyStore.setIsSpecificSurveyComplete(true);\n      }\n    }\n\n    surveyStore.setSpecificSurveyRelationIndex(surveyStore.specificSurveyRelationIndex + 1);\n\n    queryClient.invalidateQueries({ queryKey: ['surveyResponses', uid] });\n\n    gameStore.requireHomeRefresh();\n    router.push({ name: 'Home' });\n  } catch (error: unknown) {\n    surveyStore.setIsSavingSurveyResponses(false);\n    console.error(error);\n    toast.add({\n      severity: 'error',\n      summary: 'Error saving survey responses: ' + (error instanceof Error ? error.message : String(error)),\n      life: 3000,\n    });\n  } finally {\n    // Ensure loading state is turned off even if there's an error\n    surveyStore.setIsSavingSurveyResponses(false);\n  }\n}\n\nexport type { RoarFirekit as RoarfirekitType } from '@bdelab/roar-firekit';\n"],"names":["baseMerge","require$$0","createAssigner","require$$1","merge","object","source","srcIndex","merge_1","BufferLoader","context","urlListMap","callback","__publicField","url","index","request","buffer","error","key","AudioContext","fetchAudioLinks","surveyType","files","axios","LEVANTE_BUCKET_SURVEY_AUDIO","audioLinkMap","item","splitParts","fileLocale","fileName","_b","_a","LEVANTE_BUCKET_URL","getParsedLocale","locale","finishedLoading","bufferList","parsedLocale","setSurveyAudioLoading","setSurveyAudioPlayerBuffers","fetchBuffer","audioLinks","surveyAudioBuffers","showAndPlaceAudioButton","playAudioButton","el","restoreSurveyData","surveyInstance","uid","selectedAdmin","surveyResponsesData","surveyStore","prevDataStr","LEVANTE_SURVEY_RESPONSES_KEY","parsedData","formattedResponses","value","surveyResponse","doc","specificIndex","saveSurveyData","survey","questionName","responseValue","specificIds","userType","currentPageNo","storageKey","prevData","newData","saveFinalSurveyData","sender","roarfirekit","router","toast","queryClient","gameStore","fromStorage","questionsFromStorage","allQuestions","unansweredQuestions","question","structuredResponses","_merge","isEntireSurveyCompleted"],"mappings":"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","x_google_ignoreList":[0]}