{"version":3,"file":"index.browser.min.js","sources":["../src/index.ts"],"sourcesContent":["import { JsPsych, JsPsychPlugin, ParameterType, TrialType } from \"jspsych\";\n\nconst info = <const>{\n  name: \"audio-multi-response\",\n  parameters: {\n    /** The HTML string to be displayed. */\n    stimulus: {\n      type: ParameterType.HTML_STRING,\n      pretty_name: \"Stimulus\",\n      default: undefined,\n    },\n    /** Array containing the label(s) for the button(s). */\n    button_choices: {\n      type: ParameterType.STRING,\n      pretty_name: \"Button Choices\",\n      default: [],\n      array: true,\n    },\n    /** Array containing the key(s) the subject is allowed to press to respond to the stimulus. */\n    keyboard_choices: {\n      type: ParameterType.KEYS,\n      pretty_name: \"Keyboard Choices\",\n      default: \"NO_KEYS\",\n    },\n    /** The HTML for creating button. Can create own style. Use the \"%choice%\" string to indicate where the label from the choices parameter should be inserted. */\n    button_html: {\n      type: ParameterType.HTML_STRING,\n      pretty_name: \"Button HTML\",\n      default: '<button class=\"jspsych-btn\">%choice%</button>',\n      array: true,\n    },\n    /** Any content here will be displayed below the stimulus. */\n    prompt: {\n      type: ParameterType.HTML_STRING,\n      pretty_name: \"Prompt\",\n      default: null,\n    },\n    /** Whether to display the prompt above the buttons. */\n    prompt_above_buttons: {\n      type: ParameterType.BOOL,\n      pretty_name: \"Prompt above buttons\",\n      default: false,\n    },\n    /** How long to show trial before it ends. */\n    trial_duration: {\n      type: ParameterType.INT,\n      pretty_name: \"Trial duration\",\n      default: null,\n    },\n    /** The vertical margin of the button. */\n    margin_vertical: {\n      type: ParameterType.STRING,\n      pretty_name: \"Margin vertical\",\n      default: \"0px\",\n    },\n    /** The horizontal margin of the button. */\n    margin_horizontal: {\n      type: ParameterType.STRING,\n      pretty_name: \"Margin horizontal\",\n      default: \"8px\",\n    },\n    /** If true, trial will end when subject makes a response. */\n    response_ends_trial: {\n      type: ParameterType.BOOL,\n      pretty_name: \"Response ends trial\",\n      default: true,\n    },\n    /** If true, then the trial will end as soon as the audio file finishes playing. */\n    trial_ends_after_audio: {\n      type: ParameterType.BOOL,\n      pretty_name: \"Trial ends after audio\",\n      default: false,\n    },\n    /** If true, then responses are allowed while the audio is playing. If false, then the audio must finish playing before a response is accepted. */\n    response_allowed_while_playing: {\n      type: ParameterType.BOOL,\n      pretty_name: \"Response allowed while playing\",\n      default: true,\n    },\n  },\n};\n\ntype Info = typeof info;\n\n/**\n * **audio-multi-response**\n * jsPsych plugin for playing an audio file and getting a button or keyboard response\n * @author Adam Richie-Halford\n * @see {@link https://www.jspsych.org/plugins/jspsych-audio-multi-response/ audio-multi-response plugin documentation on jspsych.org}\n */\nclass AudioMultiResponsePlugin implements JsPsychPlugin<Info> {\n  static info = info;\n  private audio;\n\n  constructor(private jsPsych: JsPsych) {}\n\n  trial(display_element: HTMLElement, trial: TrialType<Info>, on_load: () => void) {\n    // hold the .resolve() function from the Promise that ends the trial\n    let trial_complete;\n\n    // setup stimulus\n    var context = this.jsPsych.pluginAPI.audioContext();\n\n    // store response\n    let response = {\n      rt: null,\n      key: null,\n      button: null,\n      source: null,\n    };\n\n    // record webaudio context start time\n    var startTime;\n\n    // load audio file\n    this.jsPsych.pluginAPI\n      .getAudioBuffer(trial.stimulus)\n      .then((buffer) => {\n        if (context !== null) {\n          this.audio = context.createBufferSource();\n          this.audio.buffer = buffer;\n          this.audio.connect(context.destination);\n        } else {\n          this.audio = buffer;\n          this.audio.currentTime = 0;\n        }\n        setupTrial();\n      })\n      .catch((err) => {\n        console.error(\n          `Failed to load audio file \"${trial.stimulus}\". Try checking the file path. We recommend using the preload plugin to load audio files.`\n        );\n        console.error(err);\n      });\n\n    const setupTrial = () => {\n      // set up end event if trial needs it\n      if (trial.trial_ends_after_audio) {\n        this.audio.addEventListener(\"ended\", end_trial);\n      }\n\n      // enable buttons after audio ends if necessary\n      if (!trial.response_allowed_while_playing && !trial.trial_ends_after_audio) {\n        this.audio.addEventListener(\"ended\", setup_keyboard_listener);\n        this.audio.addEventListener(\"ended\", enable_buttons);\n      }\n\n      //display buttons\n      var buttons = [];\n      if (Array.isArray(trial.button_html)) {\n        if (trial.button_html.length == trial.button_choices.length) {\n          buttons = trial.button_html;\n        } else {\n          console.error(\n            \"Error in audio-multi-response plugin. The length of the button_html array does not equal the length of the choices array\"\n          );\n        }\n      } else {\n        for (var i = 0; i < trial.button_choices.length; i++) {\n          buttons.push(trial.button_html);\n        }\n      }\n\n      let html = '<div id=\"jspsych-audio-multi-response-btngroup\">';\n\n      for (var i = 0; i < trial.button_choices.length; i++) {\n        var str = buttons[i].replace(/%choice%/g, trial.button_choices[i]);\n        html +=\n          '<div class=\"jspsych-audio-multi-response-button\" style=\"cursor: pointer; display: inline-block; margin:' +\n          trial.margin_vertical +\n          \" \" +\n          trial.margin_horizontal +\n          '\" id=\"jspsych-audio-multi-response-button-' +\n          i +\n          '\" data-choice=\"' +\n          i +\n          '\">' +\n          str +\n          \"</div>\";\n      }\n      html += \"</div>\";\n\n      //show prompt if there is one\n      if (trial.prompt !== null) {\n        if (trial.prompt_above_buttons) {\n          html = '<div id=\"jspsych-audio-multi-response-prompt\">' + trial.prompt + \"</div>\" + html;\n        } else {\n          html += '<div id=\"jspsych-audio-multi-response-prompt\">' + trial.prompt + \"</div>\";\n        }\n      }\n\n      display_element.innerHTML = html;\n\n      if (trial.response_allowed_while_playing) {\n        enable_buttons();\n        setup_keyboard_listener();\n      } else {\n        disable_buttons();\n      }\n\n      // start time\n      startTime = performance.now();\n\n      // start audio\n      if (context !== null) {\n        startTime = context.currentTime;\n        this.audio.start(startTime);\n      } else {\n        this.audio.play();\n      }\n\n      // end trial if time limit is set\n      if (trial.trial_duration !== null) {\n        this.jsPsych.pluginAPI.setTimeout(() => {\n          end_trial();\n        }, trial.trial_duration);\n      }\n\n      on_load();\n    };\n\n    // function to end trial when it is time\n    const end_trial = () => {\n      // kill any remaining setTimeout handlers\n      this.jsPsych.pluginAPI.clearAllTimeouts();\n\n      // stop the audio file if it is playing\n      // remove end event listeners if they exist\n      if (context !== null) {\n        this.audio.stop();\n      } else {\n        this.audio.pause();\n      }\n\n      this.audio.removeEventListener(\"ended\", end_trial);\n      this.audio.removeEventListener(\"ended\", setup_keyboard_listener);\n      this.audio.removeEventListener(\"ended\", enable_buttons);\n\n      // kill keyboard listeners\n      this.jsPsych.pluginAPI.cancelAllKeyboardResponses();\n\n      // gather the data to store for the trial\n      const trial_data = {\n        rt: response.rt,\n        stimulus: trial.stimulus,\n        keyboard_response: response.key,\n        button_response: response.button,\n        response_source: response.source,\n      };\n\n      // clear the display\n      display_element.innerHTML = \"\";\n\n      // move on to the next trial\n      this.jsPsych.finishTrial(trial_data);\n\n      trial_complete();\n    };\n\n    function button_response(e) {\n      var choice = e.currentTarget.getAttribute(\"data-choice\"); // don't use dataset for jsdom compatibility\n      after_button_response(choice);\n    }\n\n    function disable_buttons() {\n      var btns = document.querySelectorAll(\".jspsych-audio-multi-response-button\");\n      for (var i = 0; i < btns.length; i++) {\n        var btn_el = btns[i].querySelector(\"button\");\n        if (btn_el) {\n          btn_el.disabled = true;\n        }\n        btns[i].removeEventListener(\"click\", button_response);\n      }\n    }\n\n    function enable_buttons() {\n      var btns = document.querySelectorAll(\".jspsych-audio-multi-response-button\");\n      for (var i = 0; i < btns.length; i++) {\n        var btn_el = btns[i].querySelector(\"button\");\n        if (btn_el) {\n          btn_el.disabled = false;\n        }\n        btns[i].addEventListener(\"click\", button_response);\n      }\n    }\n\n    // function to handle responses by the subject\n    function after_button_response(choice) {\n      // measure rt\n      var endTime = performance.now();\n      var rt = Math.round(endTime - startTime);\n      if (context !== null) {\n        endTime = context.currentTime;\n        rt = Math.round((endTime - startTime) * 1000);\n      }\n      response.button = parseInt(choice);\n      response.rt = rt;\n      response.source = \"button\";\n\n      // disable all the buttons after a response\n      disable_buttons();\n\n      if (trial.response_ends_trial) {\n        end_trial();\n      }\n    }\n\n    // function to handle keyboard responses by the subject\n    const after_keyboard_response = (info) => {\n      // only record the first response\n      if (response.key == null) {\n        response = {\n          source: \"keyboard\",\n          button: null,\n          ...info,\n        };\n      }\n\n      if (trial.response_ends_trial) {\n        end_trial();\n      }\n    };\n\n    const setup_keyboard_listener = () => {\n      // start the keyboard response listener\n      if (trial.keyboard_choices != \"NO_KEYS\") {\n        let responseArgs;\n\n        if (context !== null) {\n          responseArgs = {\n            rt_method: \"audio\",\n            audio_context: context,\n            audio_context_start_time: startTime,\n          };\n        } else {\n          responseArgs = {\n            rt_method: \"performance\",\n          };\n        }\n\n        this.jsPsych.pluginAPI.getKeyboardResponse({\n          callback_function: after_keyboard_response,\n          valid_responses: trial.keyboard_choices,\n          persist: false,\n          allow_held_key: false,\n          ...responseArgs,\n        });\n      }\n    };\n\n    return new Promise((resolve) => {\n      trial_complete = resolve;\n    });\n  }\n\n  simulate(\n    trial: TrialType<Info>,\n    simulation_mode,\n    simulation_options: any,\n    load_callback: () => void\n  ) {\n    if (simulation_mode == \"data-only\") {\n      load_callback();\n      this.simulate_data_only(trial, simulation_options);\n    }\n    if (simulation_mode == \"visual\") {\n      this.simulate_visual(trial, simulation_options, load_callback);\n    }\n  }\n\n  private create_simulation_data(trial: TrialType<Info>, simulation_options) {\n    const keyboard_data = {\n      stimulus: trial.stimulus,\n      rt: this.jsPsych.randomization.sampleExGaussian(500, 50, 1 / 150, true),\n      keyboard_response: this.jsPsych.pluginAPI.getValidKey(trial.keyboard_choices),\n      button_response: null,\n      response_source: \"keyboard\",\n    };\n\n    const button_data = {\n      stimulus: trial.stimulus,\n      rt: this.jsPsych.randomization.sampleExGaussian(500, 50, 1 / 150, true),\n      button_response: this.jsPsych.randomization.randomInt(0, trial.button_choices.length - 1),\n      keyboard_response: null,\n      response_source: \"button\",\n    };\n\n    const default_data = Math.random() < 0.5 ? keyboard_data : button_data;\n\n    const data = this.jsPsych.pluginAPI.mergeSimulationData(default_data, simulation_options);\n\n    this.jsPsych.pluginAPI.ensureSimulationDataConsistency(trial, data);\n\n    return data;\n  }\n\n  private simulate_data_only(trial: TrialType<Info>, simulation_options) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    this.jsPsych.finishTrial(data);\n  }\n\n  private simulate_visual(trial: TrialType<Info>, simulation_options, load_callback: () => void) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    const display_element = this.jsPsych.getDisplayElement();\n\n    const respond = () => {\n      if (data.rt !== null) {\n        if (data.button_response !== null) {\n          this.jsPsych.pluginAPI.clickTarget(\n            display_element.querySelector(`div[data-choice=\"${data.response}\"] button`),\n            data.rt\n          );\n        } else {\n          this.jsPsych.pluginAPI.pressKey(data.keyboard_response, data.rt);\n        }\n      }\n    };\n\n    this.trial(display_element, trial, () => {\n      load_callback();\n      if (!trial.response_allowed_while_playing) {\n        this.audio.addEventListener(\"ended\", respond);\n      } else {\n        respond();\n      }\n    });\n  }\n}\n\nexport default AudioMultiResponsePlugin;\n"],"names":["info","name","parameters","stimulus","type","ParameterType","HTML_STRING","pretty_name","default","undefined","button_choices","STRING","array","keyboard_choices","KEYS","button_html","prompt","prompt_above_buttons","BOOL","trial_duration","INT","margin_vertical","margin_horizontal","response_ends_trial","trial_ends_after_audio","response_allowed_while_playing","AudioMultiResponsePlugin","jsPsych","_classCallCheck","this","value","display_element","trial","on_load","trial_complete","startTime","_this","context","pluginAPI","audioContext","response","rt","key","button","source","getAudioBuffer","then","buffer","audio","createBufferSource","connect","destination","currentTime","setupTrial","err","console","error","addEventListener","end_trial","setup_keyboard_listener","enable_buttons","buttons","Array","isArray","length","i","push","html","str","replace","innerHTML","disable_buttons","performance","now","start","play","setTimeout","clearAllTimeouts","stop","pause","removeEventListener","cancelAllKeyboardResponses","trial_data","keyboard_response","button_response","response_source","finishTrial","e","choice","endTime","Math","round","parseInt","after_button_response","currentTarget","getAttribute","btns","document","querySelectorAll","btn_el","querySelector","disabled","after_keyboard_response","Object","assign","responseArgs","rt_method","audio_context","audio_context_start_time","getKeyboardResponse","callback_function","valid_responses","persist","allow_held_key","Promise","resolve","simulation_mode","simulation_options","load_callback","simulate_data_only","simulate_visual","keyboard_data","randomization","sampleExGaussian","getValidKey","button_data","randomInt","default_data","random","data","mergeSimulationData","ensureSimulationDataConsistency","create_simulation_data","_this2","getDisplayElement","respond","clickTarget","concat","pressKey"],"mappings":"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"}